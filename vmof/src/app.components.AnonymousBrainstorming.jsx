require('./app.components.AnonymousBrainstorming.styl');
var React = require('react/addons');

var HelpTextMixin = require('./app.components.mixin.HelpText.js');
var AutoScroll = require('./app.components.mixin.AutoScroll.js');
var ModalWarningMixin = require('./app.components.mixin.ModalWarning.js');

var Timer = require('./app.components.Timer.jsx');
var BrainstormingDetails = require('./app.components.BrainstormingDetails.jsx');
var BrainstormingResults = require('./app.components.BrainstormingResults.jsx');
var PhaseBreadCrumbs = require('./app.components.PhaseBreadCrumbs.jsx');

var io = require('alias_socket_io');
var socket = io.connect();

var AnonymousBrainstorming = React.createClass({

    mixins: [HelpTextMixin, AutoScroll, ModalWarningMixin],

    getInitialState: function () {
        var parameters = this.props.params;
        parameters.myIdeas = [];
        parameters.displayIndex = 0;
        parameters.showingDetails = true;
        parameters.showHelp = true;

        // Create array to hold ideas generated by the client
        for (var i = 0; i < parameters.num_ideas; i++) {
            parameters.myIdeas.push("");
        }

        return parameters;
    },

    componentDidMount: function () {
        socket.on('receive:data', this.receiveData);

        if (this.state.question === '' && this.state.image === '#' && this.state.rules === '')
            $('#show-details-btn').css('visibility', 'hidden');

        this.initializeHelp();
        this.initializeAutoScroll(); // From mixin
    },

    componentDidUpdate: function () {
        // Don't let clicking show help
        $('[data-toggle="popover"]').click(function () {
            $('.popover').detach();
        });

        this.initializeAutoScroll(); // From mixin
    },

    componentWillUnmount: function () {
        socket.removeAllListeners('receive:data');

        // Clear help tutorial interval
        clearInterval(this.state.helpInterval);
    },

    initializeHelp: function () {
        // Allow html in popovers
        $('[data-toggle="popover"]').popover({html: true});

        // Don't let clicking show help
        $('[data-toggle="popover"]').click(function () {
            $('.popover').detach();
        });

        this.turnOnHelp();
    },

    // Filter out 'my' ideas from the full list for commenting
    updateCommentIdeas: function (data) {
        var ideas = Object.keys(data.ideas),
            myIdeas = this.state.myIdeas,
            commentIdeas = [];

        for (var i = 0; i < ideas.length; i++)
            if (myIdeas.indexOf(ideas[i]) === -1)
                commentIdeas.push(ideas[i]);
            
        return commentIdeas;
    },

    // Method that recieves data from the server and updates the state 
    receiveData: function (data) {
        //console.log("data received", data);
        data.commentIdeas = this.updateCommentIdeas(data); // Generate the comment-able ideas

        // If 0 users are ready then always enable the ready up button
        if (data.usersReady === 0) {
            $('#ready-up').attr('disabled',false);
            $('#vf-ready-check').hide();
        }

        // Show the help option for tutorial
        switch (data.cmd) {
            case "brainstorming:complete":
                this.submitAllIdeas();
                this.alertMessage( "Moving to Commentary round", "Brainstorming Complete" );
                break;
            case "commentary:complete":
                this.alertMessage( "Moving to Discussion round", "Commentary Complete" );
                break;
        }

        this.setState(data);
    },

    submitAllIdeas: function () {
        var $mi = $('.vf-my-idea'),
            myIdeas = this.state.myIdeas;
            
        $mi.each(function () {
            if (this.value.trim() !== '')
                myIdeas.push(this.value);
        });

        this.setState({myIdeas: myIdeas});
        socket.emit('send:anonymous:ideas', this.props.room, myIdeas);
    },

    // Send out a vote through socket io
    submitVote: function (data) {
        socket.emit('send:anonymous:vote', this.props.room, data);
    },

    // Send out a comment through socket io
    submitComment: function (data) {
        socket.emit('send:anonymous:comment', this.props.room, data)
    },

    // Send out an action Item
    submitActionItem: function (data) {
        socket.emit('send:anonymous:actionitem', this.props.room, data);
    },

    // Called when a user is ready
    readyUp: function (event) {
        var $tar = $(event.target);

        $('#ready-up').attr('disabled', true);
        $('#vf-ready-check').show();

        $tar.closest('div').find('.popover').detach();

        this.sendAck();
    },

    sendAck: function () {
        socket.emit('send:anonymous:ack', this.props.room);
    },

    toggleDetails: function (event) {
        var $tar = $(event.target);

        if (this.state.showingDetails) {
            $('#details-panel').fadeOut(500);    
            this.setState({showingDetails: false})
            $tar.html('Show Details');
        } else {
            $('#details-panel').fadeIn(500);    
            this.setState({showingDetails: true})
            $tar.html('Hide Details');
        }

        $tar.closest('div').find('.popover').detach();
    },

    render: function () {

        var self = this;

        var renderMyIdeas = function () {
            if (!self.state.renderBrainstorming) 
                return

            var renderIdea = function (idea, index) {
                return (
                    <div className="vf-idea-input">
                        <div className="well">
                            <input type="text" className="form-control vf-my-idea" placeholder="Please enter your response..." maxLength="200" />
                        </div>
                    </div>
                )
            }

            return (
                <div id="idea-widget">
                    <legend>Enter your responses to the topic in the space below</legend>
                    {self.state.myIdeas.map(renderIdea)}
                </div>
            )
        }

        var renderResults = function () {
            if (self.state.renderCommentary || self.state.renderDiscussion) {
                return (
                    <BrainstormingResults params={self.state} 
                                          submitComment={self.submitComment} 
                                          submitVote={self.submitVote} 
                                          submitActionItem={self.submitActionItem} />
                )
            }
        }

        return (
            <div className="anonymous-brainstorming">
                <legend>Anonymous Brainstorming</legend>
                
                <div className="navbar">
                    <div className="col-xs-4">
                        <button id="show-details-btn" onClick={self.toggleDetails} className="btn btn-info"
                                data-toggle="popover" data-title="Hide Details" data-content="Click to hide the activity details."
                                data-placement="bottom">
                            Hide Details
                        </button>
                    </div>

                    <div className="col-xs-4 vf-help-controls" style={{'text-align':'center'}}>
                        <span id="help-toggle" className="glyphicon glyphicon-question-sign" style={{'font-size':'30px', 'color':'green', 'cursor':'pointer'}} 
                              data-toggle="popover" data-title="Toggle Help Text"
                              data-content="Welcome to vMOF Brainstorming! Click this icon to toggle help on and off."
                              data-placement="bottom" data-container="body"
                              onClick={self.toggleHelp}>
                        </span>
                        <br/>
                        <span id="help-status">Help On</span>
                    </div>

                    <div className="col-xs-4">
                        <div className="col-xs-10" id="ready-up-div">
                            <button id="ready-up" className="btn btn-success" onClick={self.readyUp} style={{'float':'right'}}
                                    data-toggle="popover"
                                    data-title="Ready Up" data-content="Click to indicate that you are ready to move on to the next phase of the activity."
                                    data-placement="bottom">
                                Ready
                            </button>
                        </div>
                        <div id="vf-ready-check" className="col-xs-2" style={{'display':'none'}}>
                            <span className="glyphicon glyphicon-ok" style={{'color':'green', 'fontSize':'30px', 'float':'left'}}></span>
                        </div>
                    </div>
                </div>

                <div id="timer-div" data-toggle="popover" data-title="Time Remaining" data-content="As the time remaining in the current phase of the activity the bar will change from green to red."
                     data-placement="bottom">

                    <Timer start={this.state.start_time} totalSeconds={this.state.time_remaining} playAudio={false} />
                </div>

                <PhaseBreadCrumbs params={self.state} />

                <BrainstormingDetails params={this.state} 
                                      room={this.props.room} />

                {renderMyIdeas()}

                {renderResults()}
            </div>
        )
    }
});

module.exports = AnonymousBrainstorming;