SWEN-250 Activity Journal
Ruby – Grades CSV

Name: Stephen Brewster

RELEASE 1 - grades_util.rb & test_grades.rb
================================================================
Release 1 Implement & Test get_CSV_line() - Start
Estimated Time	1.5 hours
Plan for this level:
1. Read through all documentation and formulate a plan
2. Write tests that garauntee the requirements are met for a range of possible input
    2.a Commit and Update this document after each test method is complete
3. Implement each method to pass the tests
    3.a Commit and update this document after each utility method is complete
4. Learn any ruby syntax that may be necessary
5. Refactor and check documentation
6. Update this document and make final commit


Level 1 – Complete
Actual Time	1 hour
Notes: Lessons learned, problems encountered, obstacles overcome, etc.
1.  Finished faster than expected
2.  New appreciation for writing unit tests first
3.  Steps proceeded smoothly once a plan was in place
4.  Learned a couple new ruby tricks

================================================================

================================================================
Release 1 Implement & Test numeric_to_letter() - Start
Estimated Time	30 minutes
Plan for this level:
1. Write tests for the boundary conditions
    1.a Strings
    1.b Over 100
    1.c Negative
    1.d Success conditions
2. Commit
3. Create a global map to convert from numeric to whole letter
4. Implement method to accept only proper input and make the conversion
5. Test
6. Update Journal and commit

Level 1 – Complete
Actual Time	15 minutes
Notes: Lessons learned, problems encountered, obstacles overcome, etc.
1. Writing tests first quickly speeds up the development speed of the method
2. Thought of an efficient strategy using a range (x..y) with .include?
3. Completed in half the time estimated

================================================================

================================================================
Release 1 Implement & Test sum_weights() - Start
Estimated Time	15 minutes
Plan for this level:
1.  Write tests for boundaries
    1.a Inconsistent array lengths, header vs weights
2.  Commit
3.  Implement sum_weights
4.  Test
5.  Update Journal and commit

Level 1 – Complete
Actual Time	20 minutes
Notes: Lessons learned, problems encountered, obstacles overcome, etc.
1.  Took slightly longer than expected 
    1.a Tried to add an error check that was not needed
2.  Easy

================================================================

================================================================
Release 1 Implement & Test compute_grade() - Start
Estimated Time	25 minutes
Plan for this level:
1.  Create tests for success condition given a letter grade
    1.a Implement method to return numeric grade provided a letter grade
2.  Create tests for success condition given a numeric grade
    2.a Implement method to return numeric grade provided a numeric grade
3.  Commit
4.  Add any additional tests
5.  Polish method
6.  Update Journal and commit

Level 1 – Complete
Actual Time	25 minutes
Notes: Lessons learned, problems encountered, obstacles overcome, etc.
1.  Finished on time
2.  No problems encountered

================================================================

RELEASE 2 - grades.rb
================================================================
Release 2 -Level 1 – Start
Estimated Time	20 minutes
Plan for this level:
1.  Read documentation and requirements
2.  Formulate solution and implement
3.  Test using provided example.csv
4.  Update Journal and commit

Level 1 – Complete
Actual Time	15 minutes
Notes : Lessons learned, problems encountered, obstacles overcome, etc.
1.  Found .each_with_index to print values from 2 equal size arrays on the same line
2.  Took less time than expected

================================================================

================================================================
Release 2 -Level 2 – Start
Estimated Time	10 minutes
Plan for this level:
1.  Use sum_weights method and assign it to a global variable
2.  Validate sums and raise error if incorrect
3.  Rescue error and print according to the required format
4.  Test and verify accuracy
5.  Update Journal and submit

Level 1 – Complete
Actual Time	10 minutes
Notes : Lessons learned, problems encountered, obstacles overcome, etc.
1.  Quick and easy
2.  Finished on time

================================================================

================================================================
Release 2 -Level 3 – Start
Estimated Time	5 minutes
Plan for this level:
1.  Add a print statement in the existing while loop
2.  Verify the information is printed accurately
3.  Update Journal and commit

Level 1 – Complete
Actual Time	7 minutes
Notes : Lessons learned, problems encountered, obstacles overcome, etc.
1.  Easy and finished as expected
2.  Adjusted the way margins are made between print outs

================================================================

================================================================
Release 2 -Level 4 – Start
Estimated Time	15 minutes
Plan for this level:
1.  Use .each_with_index to iterate the fields and compute with weights
2.  Compute the average and convert to letter grade
3.  Add letter grade to hash
4.  Print grades 
5.  Verify with tests
6.  Update Journal and commit

Level 1 – Complete
Actual Time	20 minutes
Notes : Lessons learned, problems encountered, obstacles overcome, etc.
1.  Had a little trouble with computing the grade to match sample output
    a.  Converted the final grade to integer after it was summed
2.  Finished close to the expected time

================================================================

================================================================
Release 2 -Level 5 – Start
Estimated Time	5 minutes
Plan for this level:
1.  Noticed that I was not using compute_grade to multiply grade by weight
2.  Fix this oversight and ensure that case is taken into account
3.  Update Journal and commit

Level 1 – Complete
Actual Time	5 minutes
Notes : Lessons learned, problems encountered, obstacles overcome, etc.
1.  Completed with only a couple minor adjustments

================================================================

================================================================
Release 2 -Level 6 – Start
Estimated Time	10 minutes
Plan for this level:
1.  Learn iterate hash method
2.  Iterate hash and print out class results while accumulating class GPA
3.  Print class GPA
4.  Update Journal and commit

Level 1 – Complete
Actual Time	15 minutes
Notes : Lessons learned, problems encountered, obstacles overcome, etc.
1.  Completed with a fair amount of ease
2.  Found that I needed to initialize each Letter grade for it to show 0
    a. Caused it take a few extra minutes to complete

================================================================

OVERALL SUMMARY
================================================================
Estimated Total Time	3 hours 45 minutes
Actual Total Time	~3 hours 15 minutes 
Project reflection:

Overall it went very smooth as a result of having a well detailed plan
laid out in increments. Biggest struggle was discipline, remembering to
update activity_journal before and after each step. Finished close to the 
estimated time, it's nice to see the accuracy of my estimation is improving.
Solving the actually programming problems was fairly simple, many built in
ruby methods for array and hash structures allow for easy manipulation of data.
