--
-- PostgreSQL database dump
--

-- Dumped from database version 9.3.5
-- Dumped by pg_dump version 9.3.5
-- Started on 2014-12-08 18:50:20

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 184 (class 3079 OID 11750)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 2024 (class 0 OID 0)
-- Dependencies: 184
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 174 (class 1259 OID 57730)
-- Name: haskeyword; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE haskeyword (
    scriptid integer NOT NULL,
    keywordid integer NOT NULL
);


ALTER TABLE public.haskeyword OWNER TO postgres;

--
-- TOC entry 181 (class 1259 OID 57768)
-- Name: hasreadme; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE hasreadme (
    readmeid integer NOT NULL,
    packageid integer NOT NULL
);


ALTER TABLE public.hasreadme OWNER TO postgres;

--
-- TOC entry 173 (class 1259 OID 57719)
-- Name: keyword; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE keyword (
    id integer NOT NULL,
    keyword character varying NOT NULL
);


ALTER TABLE public.keyword OWNER TO postgres;

--
-- TOC entry 172 (class 1259 OID 57717)
-- Name: keyword_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE keyword_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.keyword_id_seq OWNER TO postgres;

--
-- TOC entry 2028 (class 0 OID 0)
-- Dependencies: 172
-- Name: keyword_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE keyword_id_seq OWNED BY keyword.id;


--
-- TOC entry 183 (class 1259 OID 57775)
-- Name: language; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE language (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE public.language OWNER TO postgres;

--
-- TOC entry 182 (class 1259 OID 57773)
-- Name: language_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE language_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.language_id_seq OWNER TO postgres;

--
-- TOC entry 2030 (class 0 OID 0)
-- Dependencies: 182
-- Name: language_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE language_id_seq OWNED BY language.id;


--
-- TOC entry 176 (class 1259 OID 57737)
-- Name: package; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE package (
    id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE public.package OWNER TO postgres;

--
-- TOC entry 175 (class 1259 OID 57735)
-- Name: package_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE package_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.package_id_seq OWNER TO postgres;

--
-- TOC entry 2032 (class 0 OID 0)
-- Dependencies: 175
-- Name: package_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE package_id_seq OWNED BY package.id;


--
-- TOC entry 180 (class 1259 OID 57759)
-- Name: readme; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE readme (
    id integer NOT NULL,
    path character varying NOT NULL,
    content character varying
);


ALTER TABLE public.readme OWNER TO postgres;

--
-- TOC entry 179 (class 1259 OID 57757)
-- Name: readme_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE readme_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.readme_id_seq OWNER TO postgres;

--
-- TOC entry 2034 (class 0 OID 0)
-- Dependencies: 179
-- Name: readme_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE readme_id_seq OWNED BY readme.id;


--
-- TOC entry 171 (class 1259 OID 57708)
-- Name: script; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE script (
    id integer NOT NULL,
    last_modified timestamp without time zone NOT NULL,
    created_on timestamp without time zone NOT NULL,
    name character varying NOT NULL,
    description character varying,
    content character varying NOT NULL,
    path character varying NOT NULL,
    packageid integer NOT NULL,
    languageid integer NOT NULL
);


ALTER TABLE public.script OWNER TO postgres;

--
-- TOC entry 170 (class 1259 OID 57706)
-- Name: script_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE script_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.script_id_seq OWNER TO postgres;

--
-- TOC entry 2036 (class 0 OID 0)
-- Dependencies: 170
-- Name: script_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE script_id_seq OWNED BY script.id;


--
-- TOC entry 178 (class 1259 OID 57748)
-- Name: unsorted; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE unsorted (
    id integer NOT NULL,
    file character varying NOT NULL
);


ALTER TABLE public.unsorted OWNER TO postgres;

--
-- TOC entry 177 (class 1259 OID 57746)
-- Name: unsorted_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE unsorted_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.unsorted_id_seq OWNER TO postgres;

--
-- TOC entry 2038 (class 0 OID 0)
-- Dependencies: 177
-- Name: unsorted_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE unsorted_id_seq OWNED BY unsorted.id;


--
-- TOC entry 1868 (class 2604 OID 57722)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY keyword ALTER COLUMN id SET DEFAULT nextval('keyword_id_seq'::regclass);


--
-- TOC entry 1872 (class 2604 OID 57778)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY language ALTER COLUMN id SET DEFAULT nextval('language_id_seq'::regclass);


--
-- TOC entry 1869 (class 2604 OID 57740)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY package ALTER COLUMN id SET DEFAULT nextval('package_id_seq'::regclass);


--
-- TOC entry 1871 (class 2604 OID 57762)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY readme ALTER COLUMN id SET DEFAULT nextval('readme_id_seq'::regclass);


--
-- TOC entry 1867 (class 2604 OID 57711)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY script ALTER COLUMN id SET DEFAULT nextval('script_id_seq'::regclass);


--
-- TOC entry 1870 (class 2604 OID 57751)
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unsorted ALTER COLUMN id SET DEFAULT nextval('unsorted_id_seq'::regclass);


--
-- TOC entry 2007 (class 0 OID 57730)
-- Dependencies: 174
-- Data for Name: haskeyword; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY haskeyword (scriptid, keywordid) FROM stdin;
1	1
2	2
2	3
2	4
3	2
3	3
3	4
4	5
5	6
6	7
6	6
7	8
7	9
7	10
8	8
8	9
8	10
9	11
10	12
10	13
10	14
11	15
11	16
11	17
12	18
12	19
12	20
13	21
14	22
15	23
16	5
17	12
17	24
18	25
19	26
19	27
20	13
20	12
20	28
21	29
21	30
21	31
22	30
22	31
22	29
23	32
23	33
23	34
24	35
24	33
24	34
24	2
25	13
25	36
26	27
27	27
28	12
28	28
28	13
29	37
29	38
29	39
30	37
30	38
30	39
31	40
31	41
32	42
33	42
34	42
35	42
36	42
37	37
37	38
37	43
37	44
38	44
38	39
38	45
39	46
39	25
40	20
40	46
40	47
41	37
41	38
42	38
43	48
43	49
44	5
44	36
45	12
45	50
46	5
46	12
46	13
47	33
47	34
47	35
47	2
48	51
48	52
48	53
49	54
49	53
50	55
50	54
50	53
51	56
52	57
53	58
54	59
54	60
55	57
56	42
57	12
57	13
57	61
58	40
58	62
59	5
60	63
61	5
62	64
62	65
62	66
62	67
62	30
63	31
63	68
63	69
63	70
64	31
64	68
64	69
64	71
65	72
65	73
65	30
65	68
65	69
65	31
66	72
66	74
66	75
66	68
66	69
67	72
67	73
67	30
67	68
67	69
67	31
68	76
68	77
69	78
69	79
69	71
70	80
70	81
70	82
71	83
72	44
73	38
73	84
74	38
74	85
75	39
76	39
77	86
77	87
78	87
78	38
79	57
79	87
80	88
80	25
81	38
81	37
82	38
82	37
82	1
83	57
84	54
84	55
84	89
84	40
85	35
85	33
86	32
86	33
87	90
87	61
88	2
88	3
88	91
88	92
88	90
88	93
89	93
89	3
89	92
89	90
90	95
90	96
90	97
90	25
90	9
90	98
90	99
90	100
90	101
91	38
91	61
92	38
93	57
94	2
94	3
95	5
95	2
96	102
96	3
97	58
98	102
98	3
99	103
100	5
101	3
101	104
102	105
102	106
103	102
103	3
104	12
104	13
105	107
106	107
107	12
107	28
107	92
108	3
108	2
109	12
109	13
109	61
110	5
111	108
111	109
111	101
112	38
\.


--
-- TOC entry 2014 (class 0 OID 57768)
-- Dependencies: 181
-- Data for Name: hasreadme; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY hasreadme (readmeid, packageid) FROM stdin;
1	1
2	12
3	13
4	16
5	24
6	28
7	43
8	45
9	47
10	51
\.


--
-- TOC entry 2006 (class 0 OID 57719)
-- Dependencies: 173
-- Data for Name: keyword; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY keyword (id, keyword) FROM stdin;
1	dictionary
2	threads
3	concurrency
4	banker algorithm
5	driver
6	binary tree
7	node
8	BMP
9	image
10	draw
11	bubble sort
12	swing
13	frame
14	non-working
15	list
16	array
17	user input
18	command line
19	menu interface
20	test
21	bank logic
22	customer class
23	saving account logic
24	menu
25	math
26	controller
27	calculator logic
28	gui
29	jdbc
30	database
31	sql
32	client
33	socket
34	io
35	server
36	main
37	csv
38	stdin
39	pointers
40	file
41	unused
42	
43	circular buffer
44	linked list
45	struct
46	quadratic
47	parse
48	binary
49	converter
50	gui interface
51	shift cyper
52	fibonacci
53	encryption
54	shift cypher
55	passphrase
56	exceptions
57	unit test
58	trivial
59	git
60	metric analysis
61	histogram
62	parser
63	command line interface
64	dml
65	alter tables
66	permissions
67	constraints
68	try
69	except
70	tuple
71	tuples
72	psycopg2
73	postgresql
74	postgres
75	connect to database
76	debug
77	ouput manager
78	search folder
79	search file system
80	regex
81	open file
82	read file
83	statistics
84	strings
85	text analysis
86	text manipulation
87	practicum
88	prime numbers
89	text file database
90	real-time
91	mutex
92	blob class
93	servo
94	ultrasonic sensor
95	PIL
96	Queue
97	time
98	A* search
99	DFS
100	depth-first search
101	AI
102	explicit lock
103	logger
104	synchronization
105	simulation clock
106	stopwatch
107	temperature
108	BFS
109	breadth-first search
\.


--
-- TOC entry 2039 (class 0 OID 0)
-- Dependencies: 172
-- Name: keyword_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('keyword_id_seq', 109, true);


--
-- TOC entry 2016 (class 0 OID 57775)
-- Dependencies: 183
-- Data for Name: language; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY language (id, name) FROM stdin;
1	python
2	java
3	c++
4	c
5	ruby
\.


--
-- TOC entry 2040 (class 0 OID 0)
-- Dependencies: 182
-- Name: language_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('language_id_seq', 5, true);


--
-- TOC entry 2009 (class 0 OID 57737)
-- Dependencies: 176
-- Data for Name: package; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY package (id, name) FROM stdin;
1	Amino Acids
2	Banker Algorithm
3	Binary Search Tree
4	BMP Art
5	BubbleSort_cpp
6	GUI for Bank Application
7	Bank Application
8	GUI Calculator in Java
9	JDBC Database
10	Database Interaction - Project 1
11	Calculator Server
12	C Project 1 - swen250
13	C Project 2 - swen250
14	Lab 1 - csc103
15	CSV in c
16	Word Count in C
17	Decimal-Binary Converter
18	Encryptor
19	Factorials in ruby
20	Fizz Buzz
21	Git Metrics
22	Java GUI Histogram
23	Graphical Histogram
24	LessonsLearned
25	Linked List in C
26	Longest Line
27	Palindrome Tester
28	Palindrome
29	Pointer Activity
30	Practicum 1 - swen250
31	Practicum 2 - swen250
32	Prime Numbers
33	Project 1 - swen250
34	Password Protector
35	Python Client-Server
36	Frequency Accuracy Test
37	Servo Control in QNX
38	Ultrasonic Measure
39	Servo Controller on Freescale
40	Teller Server
41	Robot Path Planner
42	Word Histogram in ruby
43	Phonetic Alphabet
44	Simple Thread in Java
45	Conference Room Simulation
46	Speed Reader
47	Temperature Conversion
48	Vocab Expander
49	Woolies
50	Word Ladder
51	Word Count in Python
\.


--
-- TOC entry 2041 (class 0 OID 0)
-- Dependencies: 175
-- Name: package_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('package_id_seq', 51, true);


--
-- TOC entry 2013 (class 0 OID 57759)
-- Dependencies: 180
-- Data for Name: readme; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY readme (id, path, content) FROM stdin;
1	B:\\Portfolio\\AminoAcids	<package>\n\tAmino Acids\n<.package>\n\nSWEN-250 Activity Reflection\nPython - Amino Acids\n\nName: Stephen Brewster\n\n================================================================\nStart\nEstimated Time\t1 Hour\nPlan:\n(Order of implementation, testing approach, etc.)\n1. Gather requirements\n1.5. Create skeleton of project and commit\n2. Design solution\n3. Create test cases using script that probes requirements boundaries\n\nComplete\nActual Time\tHH MM\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\n1. Relatively easy \n2. Finished sooner than anticipated\n3. Minor obstacles, overcome with basic code and fix method\n\n================================================================\n
2	B:\\Portfolio\\CProject1	<package>\n\tC Project 1 - swen250\n<.package>\n\nSWEN-250 Project Activity Journal\nC Health Monitoring System Project - Part 1\n\nName: Stephen Brewster\n\n===========  Stage 1  ==========================================\nStart\nEstimated Time\t1 hour\nPlan:\n(Order of implementation, testing approach, estimation technique)\n1. Create script that compiles and runs the program, then verifies output\n    1.1 Refresh knowledge of linux scripts\n2. Create test data to feed stdin\n    2.1 Commit\n3. Implement method to read input and print the line\n    3.1 Update this document and commit\n\nChanges:\n4. Creating .c files and test files for each level\n    4.1 This will allow each level to persist throught the project and be\n        executed using parameters passed to the run script\n\nComplete\nActual Time\t2 hours\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nTime ratio: 2:1\nSpent a lot of time trying to get my design working properly. A unique combination of problems between\nmake and the c file includes caused me to chase ghosts for a while. Gained a much better understanding\nof C structures.\n\nSpent another 30 minutes adding a script to compare the output with the expected\noutput.\n\n===========  Stage 2  ==========================================\nStart\nEstimated Time 20 minutes\nPlan:\n(Order of implementation, testing approach, estimation technique)\nCreate expected output file and test file. Use utilities already in place after\ncompleting lvl 1 to parse the lines of input and store the data until the print\ncommand is discovered. Print the line using proper format (Create a function\nto do this)\n\nComplete\nActual Time\t1 hour\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nRatio 3:1\nFound that my parse_line function had to be slightly redesigned to properly work with future Levels.\nSpent more time than expected designing the utility methods to properly work with all future levels.\nRealized I did not perfectly understand the intended uses for the typedef structs provided, spent\na little time reviewing how they will work in level 2 as well as future levels and worked my design\naround them. Overall this level went very smooth, very few compilation errors, mainly spent time\non design.\n\n===========  Stage 3  ==========================================\nStart\nEstimated Time\t15 minutes\nPlan:\n(Order of implementation, testing approach, estimation technique)\nMy current design should handle this level fairly easily, I should only need to add logic to the\nlevel 2 solution that increments the buffer pointers and add a condition in the print function to\nprint the '<NONE>' string.\n\nComplete\nActual Time\t17 minutes\nObservations:\nRatio 1.1:1\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nOnly small/expected obstacles on this level. Found the logic needed to properly print multiple stats\nand the <none> string when no reading is given.\n\n===========  Stage 4  ==========================================\nStart\nEstimated Time\t15 mintues\nPlan:\n(Order of implementation, testing approach, estimation technique)\nCreate test with more than 10 readings of a type to exercise the circular buffer.\nPlan out how to implement the circular buffer to store > 10 readings and print the readings in\nchronological order. Implement and test.\n\nComplete\nActual Time\t12 minutes\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nRatio .8:1\nFinished a little faster than expected, found the circular buffer fairly easy to implement. Noticed\nthat printing all 10 values when the buffer is full seems to be impossible to accomplish reliably. \nPrinting would need to include the end index, but when the buffer is not full, printing the end index\nwould produce garbage.\n\n===========  Stage 5  ==========================================\nStart\nEstimated Time\t10 minutes\nPlan:\n(Order of implementation, testing approach, estimation technique)\nJust need to add an array of charts that index the patients id, allowing values for up to 5 patients\nto be concurrently stored and printed.\n\nComplete\nActual Time\t10 minutes\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nRatio 1:1\nFinished on time, very simple to just add an array of charts and adjust the primary method to account\nfor the change.\n\n==========i=  PROJECT PART 1 SUMMARY REFLECTION  =======================\nEstimated total = 2 hours\nActual total    = 3 hours 39 minutes\nRatio           = 1.8:1\nOverall the project was great experience in C. I tried to modularize the project so that the test for\neach level would still be accessible by passing an argument to the bash script. It took a great deal\nof extra time to learn the bash and C necessary to accomplish this, but it was a good learning\nexperience. I would not say the difficulty of the project itself was reasonable, I did not include all\nthe time I spent on the extra design in my estimates, so I spent several hours more than the AJ shows.\nMy estimations were fairly innacurate for the first couple stages due to problems encountered getting\nC to do what I wanted it to. As I progressed through to the latter stages it became easier to accurately\nestimate the time because I understood the requirements better and there was ultimately less functionality\nto create.\n================================================================\n
3	B:\\Portfolio\\CProject2	<package>\n\tC Project 2 - swen250\n<.package>\n\n4010-250 Project Journal\nC Health Monitoring System Project - Part 2\n\nName: Stephen Brewster\n\n===========  Stage 1  ==========================================\nStart\nEstimated Time\t3 hours 30 minutes\nPlan:\n(Order of implementation, testing approach, estimation technique)\n1. Create a bash script for generating random test data to best test each level.\n2. Configure script to generate data for 1 patient check in\n3. Create skeleton for reading in data until EOF within main\n4. Implement addPatient\n5. Implement print for patient check-in\n\nComplete\nActual Time\t3 hours 45 minutes\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nRatio 1.07:1\nOverall no real problems. Learned some new bash functions related to functions and \nrandom number generation. Finished very close to the estimated time. Most of the time\nin this level was in creating the bash script to aid with testing throughout the\nremaining levels. The requirements for the level were easily completed using CProject1\nas a reference.\n\n===========  Stage 2  ==========================================\nStart\nEstimated Time\t1 hour 30 min\nPlan:\n(Order of implementation, testing approach, estimation technique)\nEstimation based on 45 minutes to figure out how to get my test script to produce\nthe data correctly and 30 minutes to set up the linked list data structure and verify\n1. Modify bash testing script to include cmd=9 before any health data is given for that type\n    1.1. commit\n2. Implement the getChart to retrieve the patient's chart\n    2.1. commit\n3. Implement the addHealthType method to create the node for the health type in the patients linked list\n4. Test\n5. Update journal and commit\n\nComplete\nActual Time      1 hour 15 minutes\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nRatio .83:1\nFinished a little under my estimate. Implementing the getChart and addHealthType were simple\nafter completing the pointer and linkedlist activities. They were excellent preparation for\nthis level. Spent most of the time on the bash script to generate appropriate tests.\n\n===========  Stage 3  ==========================================\nStart\nEstimated Time\t5 minutes\nPlan:\n(Order of implementation, testing approach, estimation technique)\nThe manner in which I implemented the previous level will allow this level to be trivial.\n\nComplete\nActual Time\t5 minutes\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nRatio 1:1\nFound a minor bug in my implementation of getChart that was not exposed by 1 patient. Forgot to\niterate the pointer! Still finished in the time estimated.\n\n===========  Stage 4  ==========================================\nStart\nEstimated Time\t45 minutes\nPlan:\n(Order of implementation, testing approach, estimation technique)\n5 minutes to modify test script. 10-15 minutes to implement the 'get health type for patient' method. 10-15\nminutes to implement the print method. 5-10 minutes to test and tweak.\n\n1. Modify bash script to provide test data for 1 patient and multiple health readings (<9) for a health type\n2. Implement method to find the health type list for a patient\n\t2.1 Commit\n3. Implement print method to print the data for a patient once cmd=6 is read\n\t3.1 Commit\n4. Test \n\t4.1 Ensure none is printed for non-existent data types\n\t4.2 Ensure data is accurate and formatting is correct\n5. Update this document and commit level 4 \n\nComplete\nActual Time\tHH MM\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\n\n\n===========  Stage 5  ==========================================\nStart\nEstimated Time\tHH MM\nPlan:\n(Order of implementation, testing approach, estimation technique)\n\nComplete\nActual Time\tHH MM\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\n\n===========  Stage 6  ==========================================\nStart\nEstimated Time\tHH MM\nPlan:\n(Order of implementation, testing approach, estimation technique)\n\nComplete\nActual Time\tHH MM\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\n\n===========  Stage 7  ==========================================\nStart\nEstimated Time\tHH MM\nPlan:\n(Order of implementation, testing approach, estimation technique)\n\nComplete\nActual Time\tHH MM\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\n\n\n===========  PROJECT SUMMARY REFLECTION  =======================\n(Replace this text with a couple of paragraphs summarizing your\nexperience with this project. What is too easy or too hard? What\nwas the most challenging technical problem you faced? How\ndid your estimated and actual time compare? Did your estimates\nimprove as you advanced to later stages? Why or why not?)\n================================================================\n
4	B:\\Portfolio\\CWordCount	<package>\n\tWord Count in C\n<.package>\n\nSWEN-250 Activity Reflection\nC - WordCount\n\nName: Stephen Brewster\n\n================================================================\nStart\nEstimated Time\t1 hour\nPlan:\n(Order of implementation, testing approach, etc.)\nNeed to learn C syntax for reading from stdin. Research methods for\ncounting strings in different ways.\n\nComplete\nActual Time\t~1 hour\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nAbout 12 compilations. Didn't get the exactly right count for words.\nLearned some of the subtle mannerisms of C.`\n\n================================================================\n
5	B:\\Portfolio\\LessonsLearned	<package>\n\tLessonsLearned\n<.package>\n\n********************************************************************************************************************************** \n\nLessons Learned\nPortfolio application\nby Stephen Brewster\n\n**********************************************************************************************************************************\n\nrebuild_db.py --\n\nPrimary module for building a fresh database from the ground up. Drops the tables, creates them new, creates roles, sets permissions, and adds constraints to the tables.\n\nupdate_db.py --\n\nUpdates the content for any files that have changed and deletes any that are missing from the file system.\n\nsearch_interface.py --\n\nDatabase query module, performs simple searching and advanced sql queries on the database using a command line interface.\n\ncreate_tables.py --\n\nCreates all required tables in the database.\n\ndrop_tables.py --\n\nDrops all tables in the database.\n\nalter_tables.py --\n\nCreates roles, sets permissions and constraints.\n\nll_db_io.py --\n\nContains admin level database IO sql methods.\n\nquery.py --\n\nContains methods for executing queries on the database, access is restricted to select statements.\n\nll_toolkit.py --\n\nAssorted utility methods for managing application features.\n\npg_get_connection.py --\n\nSupplies a connection and cursor object for the database.\n\ndebug.py --\n\nImplements logging logic. Outputs log messages to a file and console.
6	B:\\Portfolio\\Palindrome	<package>\n\tPalindrome\n<.package>\n\nSWEN-250 Activity Reflection\nPython - Palindrome\n\nName: Stephen Brewster\n\n================================================================\nStart\nEstimated Time: 40 minutes \t\nPlan:\n(Order of implementation, testing approach, estimation technique)\n1. Design palindrome testing script to use the 3 required methods\n2. Implement step by step, first ensuring that both advance and retreat functions work as intended\n3. Integrate all methods to generate a final boolean result (isPalindrome)\n4. Generate test cases that probe the boundaries of strings which may cause bugs to arise\n\nComplete\nActual Time\t1 hour 45 minutes\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\n1. Multiple problems with python-vim interaction, attempting to cut/paste code throws off the indentation\n2. Difficulty with unknown bugs that were ultimately resolved by rewriting the same code!\n3. Finished the bulk of the work in the estimated time, then spent extra time dealing with vim/python problems\n4. Learned a lot about how to work with vim and python, but there's a great deal more if I'm going to be efficient\n\n================================================================\n
7	B:\\Portfolio\\RubyPhonetic	<package>\n\tPhonetic Alphabet\n<.package>\n\nSWEN-250 Activity Reflection\nRuby - RubyPhonetic\n\nName: Stephen Brewster\n\n================================================================\nStart\nEstimated Time\t1 hour\nPlan:\n(Order of implementation, testing approach, etc.)\n1. Create necessay files, including tests.txt\n2. Complete the skeleton functions to meet the desired behaviour\n3. Test\n\nComplete\nActual Time\t3 hours\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\n1. Spent extra time exploring ruby\n2. Learned new ruby teqniques\n3. Found a strategy for accepting stdin as well as direct method calls\n4. Became more familiar with ruby unit testing\n\n================================================================\n
8	B:\\Portfolio\\SoftwareProjectDay\\src	<package>\n\tConference Room Simulation\n<.package>\n\nMain.java executes the primary functions of the project\n\nConfigurable constants are:\n\tsize of the teams (team_size)\n\tnumber of teams (team_count)\nthese values are declared in Main.java \n\nOutput is routed through the console and displays primary actions as they happen with timestamps
9	B:\\Portfolio\\TempConvert	<package>\n\tTemperature Conversion\n<.package>\n\nSWEN-250 Activity Reflection\nC - TempConvert\n\nName: Stephen Brewster\n\n================================================================\nStart\nEstimated Time\t30 minutes\nPlan:\n(Order of implementation, testing approach, etc.)\nCreate a main function that iterates through the integers 0-300 and prints\na formatted table showing the f -> c temperature conversion in steps of 20.\nSubmit.\nChange the integer to floating point for part 2 and submit.\n\nComplete\nActual Time\t35 minutes\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\nFairly trivial, about 3 compilation errors.\n\n================================================================\n
10	B:\\Portfolio\\WordCount	<package>\n\tWord Count in Python\n<.package>\n\nSWEN-250 Activity Reflection\nPython - WordCount\n\nName: Stephen Brewster\n\n================================================================\nStart\nEstimated Time\t30 minutes\nPlan:\n(Order of implementation, testing approach, etc.)\n1. Refresh knowledge of python syntax, specifically researching how to receive input from stdin and string manipulation\n2. Form a design that will meet the requirements of the project\n3. Implement the program step by step:\n\ta. ensure the text from the file provided in the CLI command is available in the script\n\tb. parse the text from the file and count the necessary components (lines, words, characters)\n4. Test by comparing the results with the wc unix command\n\nComplete\nActual Time 40 minutes\t\nObservations:\n(Lessons learned, problems encountered, obstacles overcome, etc.)\n1. Successfully researched the necessary knowledge required to link unix commands to python scripts\n2. Design and Implementation were fairly simple once necessary prequisite knowledge was attained\n3. Struggled slightly with finding the python/unix help that I was looking for\n\n================================================================\n
\.


--
-- TOC entry 2042 (class 0 OID 0)
-- Dependencies: 179
-- Name: readme_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('readme_id_seq', 10, true);


--
-- TOC entry 2004 (class 0 OID 57708)
-- Dependencies: 171
-- Data for Name: script; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY script (id, last_modified, created_on, name, description, content, path, packageid, languageid) FROM stdin;
1	2014-11-29 13:55:05	2014-11-29 13:49:06	amino_acids.py	Practice with python dictionary	# <package>\n#     Amino Acids\n# <.package>\n# <description>\n#     Practice with python dictionary\n# <.description>\n# <keywords>\n#     dictionary\n# <.keywords>\n\nimport sys\n\nSTART_CODON = "aug"\nSTOP_CODONS = ["uaa","uag","uga"]\nRNA_TO_AAs = {"aug":"Met","uuu":"Phe", "uuc":"Phe", "uua":"Leu", "uug":"Leu", "cuc":"Leu","cug":"Leu","auu":"Ile", "auc":"Ile", "aua":"Ile", "guu":"Val", "guc":"Val", "gua":"Val", "gug":"Val", "ucu":"Ser", "ucc":"Ser", "uca":"Ser", "ucg":"Ser", "ccu":"Pro", "ccc":"Pro", "cca":"Pro", "ccg":"Pro", "acu":"Thr", "acc":"Thr", "aca":"Thr", "acg":"Thr", "gcu":"Ala", "gcc":"Ala", "gca":"Ala", "gcg":"Ala", "uau":"Tyr", "uac":"Tyr", "cau":"His", "cac":"His", "caa":"Gln", "cag":"Gln", "aau":"Asn", "aac":"Asn", "aaa":"Lys", "aag":"Lys", "gau":"Asp", "gac":"Asp", "gaa":"Glu", "gag":"Glu", "ugu":"Cys", "ugc":"Cys", "ugg":"Trp", "cgu":"Arg", "cgc":"Arg", "cga":"Arg", "cgg":"Arg", "agu":"Ser", "agc":"Ser", "aga":"Arg", "agg":"Arg", "ggu":"Gly", "ggc":"Gly", "gga":"Gly", "ggg":"Gly" }\n\n\nstdin_lines = sys.stdin.readlines()\n\nfor line in stdin_lines:\n\tline = line.replace("\\n", "") #Remove line break to clean up output\n\tprint('Test line:', line) \n\tcodons = line.split()\n\ttranslation = '' #Reset translation string for each newline\n\tchainInProgress = False\n\n\t#Iterate codons for the line\n\tfor codon in codons:\n\t\tcodon = codon.lower() #Convert codons to lowercase to match dictionary \n\t\t\n\t\tif codon in START_CODON: #If it is a start codon reset the translation string\n\t\t\ttranslation = RNA_TO_AAs[codon]\n\t\t\tchainInProgress = True\n\n\t\telif codon in STOP_CODONS: #If it is a stop codon print the compiled translation\n\t\t\tprint(translation)\n\t\t\tchainInProgress = False\n\n\t\telif chainInProgress and codon in RNA_TO_AAs: #If AA chain is stopped and not restarted, ignore\n\t\t\ttranslation += RNA_TO_AAs[codon]\n\n\t\ttranslation += ' ' #Append space between amino acids\n\t\n\tif chainInProgress:\n\t\tprint(translation) #Default print if there is no stop codon for the line\t\n	B:\\Portfolio\\AminoAcids	1	1
2	2014-12-07 15:34:15	2014-12-07 15:35:18	Banker.java	Banker object for the practice exercise	/*\n<package>\n\tBanker Algorithm\n<.package>\n<description>\n    Banker object for the practice exercise \n<.description>\n<keywords>\n    threads, concurrency, banker algorithm\n<.keywords>\n*/\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Banker {\n\n\tprivate int nUnits;\n\tprivate int numberOfUnitsOnhand;\n\t\n\t// int[] holds currentAllocation and remainingAllocation for a thread\n\tprivate Map<Thread, int[]> claims;\n\n\tpublic Banker(int nUnits) {\n\t\tthis.nUnits = nUnits;\n\t\tthis.numberOfUnitsOnhand = nUnits;\n\t}\n\n\tpublic void setClaim(int nUnits) {\n\t\t// If the map doesn't exist, lazily create it.\n\t\tif (claims == null) {\n\t\t\t// Not sure if we need synchronization or not but eh...\n\t\t\tclaims = Collections.synchronizedMap(new HashMap<Thread, int[]>());\n\t\t}\n\n\t\t// Figure out if everything is good to go, if not, exit with error\n\t\t/* Exit if...\n\t\t *\tthe thread already has a claim registered, or\n\t\t *\tnUnits is not strictly positive, or\n\t\t *\tnUnits exceeds the number of resources in the system.*/\n\t\tThread requestor = Thread.currentThread();\n\t\tif (claims.get(requestor) != null || nUnits < 0 || nUnits > this.nUnits) {\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// Add the claim\n\t\t// claim contains currentAllocation and remainingClaim\n\t\tint[] claim = {0,nUnits};\n\t\tclaims.put(requestor, claim);\n\n\t\t// Let the world know what we did here.\n\t\tSystem.out.println("Thread " + requestor.getName() \n\t\t\t\t+ " sets a claim for " + nUnits + " units.");\n\t}\n\t\n\tprivate boolean safe(int nUnits) {\n\t\tList<int[]> tmpClaims = new ArrayList<>( claims.values() );\n\t\tSystem.err.println("OnHand: " + numberOfUnitsOnhand);\n\t\tint unitsOnHand = numberOfUnitsOnhand - nUnits; // Verify the request will result in a safe state\n\t\t\n\t\tif (unitsOnHand < 0) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Sort the list here on remaining claim\n\t\tboolean sorted = false;\n\t\twhile(!sorted) {\n\t\t\tsorted = true;\n\t\t\tfor(int i = 0; i < tmpClaims.size()-1; i++) {\n\t\t\t\tif (tmpClaims.get(i)[1] > tmpClaims.get(i+1)[1]) {\n\t\t\t\t\tint[] temp = tmpClaims.remove(i);\n\t\t\t\t\ttmpClaims.add(i+1, temp);\n\t\t\t\t\tsorted = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Perform safety check on sorted list\n\t\tfor (int i = 0; i < tmpClaims.size(); i++) {\n\t        // If there are not enough units for the ith thread's claim, then it cannot be guaranteed to\n\t        // complete. Because the array is sorted, no thread after i can be guaranteed to complete,\n\t        // so we have possible deadlock.\n\n\t        if (tmpClaims.get(i)[1] > unitsOnHand) {    // Too few units remain\n\t        \tSystem.out.println("Units on hand: " + unitsOnHand + ", Claim remaining: " + tmpClaims.get(i)[1]);\n\t            return false;\n\t        }\n\t        \n        \t// There are enough resources on hand so that we could run this thread until it releases all its\n        \t// resources, in which case we'd reclaim them and advance to the array entry for the next thread.\n        \tunitsOnHand += tmpClaims.get(i)[0];\n\t\t}\n\n\t    // We get here if it is possible for all threads to complete.\n\t    return true;\n\t}\n\n\n\t/**\n\t * Current thread requests nUnits more resources\n\t * @param nUnits number of resources\n\t */\n\tpublic synchronized boolean request(int nUnits) {\n\t\t// If the map doesn't exist, exit as there are no claims\n\t\tif (claims == null) {\n\t\t\tSystem.err.println("Claims null on request(), exiting.");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// Figure out if everything is good to go, if not, exit with error\n\t\t/* Exit if...\n\t\t * (a) the current thread has no claim registered, \n\t\t * (b) nUnits is not strictly positive or \n\t\t * (c) nUnits exceeds the invoking thread's remaining claim.*/\n\t\tThread requestor = Thread.currentThread();\n\t\tif (claims.get(requestor) == null || nUnits < 0 || nUnits > claims.get(requestor)[1]) {\n\t\t\tSystem.err.println("Invalid request or thread is null, exiting.");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// Print the message Thread name requests nUnits units.\n\t\tSystem.out.println("Thread " + requestor.getName() + " requests " + nUnits + " units.");\n\n\t\t/* If allocating the resources results in a safe state,\n\t\t * Print a message Thread name has nUnits units allocated.\n\t\t * Update the banker's state and return to the caller. */\n\t\twhile(!safe(nUnits)) {\n\t\t\tSystem.out.println("Thread" + requestor.getName() + " waits.");\n\t\t\ttry {\n\t\t\t\tsynchronized(requestor) {\n\t\t\t\t\trequestor.wait();\n\t\t\t\t}\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t} \n\t\t\n\t\tnumberOfUnitsOnhand -= nUnits;\n\t\tclaims.get(requestor)[1] -= nUnits;\n\t\tclaims.get(requestor)[0] += nUnits;\n\t\treturn true;\n\t}\n\n\tpublic synchronized void release(int nUnits) {\n\t\t// If the map doesn't exist, exit as there are no claims\n\t\tif (claims == null) {\n\t\t\tSystem.err.println("Claims is null on release(), exiting.");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// Figure out if everything is goot to go, if not, exit with error\n\t\t/* (a) the current thread has no claim registered, \n\t\t * (b) nUnits is not strictly positive or \n\t\t * (c) nUnits exceeds the number of units allocated to the current thread.*/\n\t\tThread requestor = Thread.currentThread();\n\t\tif (claims.get(requestor) == null || nUnits < 0 || nUnits > claims.get(requestor)[0]) {\n\t\t\tSystem.err.println("Null or invalid value in release(), exiting.");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t// Print the message Thread name releases nUnits units.\n\t\tSystem.out.println("Thread " + requestor.getName() + " releases " + nUnits + " units.");\n\t\t\n\t\tnumberOfUnitsOnhand += nUnits;\n\t\tclaims.get(requestor)[0] -= nUnits;\n\t\tclaims.get(requestor)[1] += nUnits;\n\t\t\n\t\tList<Thread> threads = new ArrayList<>( claims.keySet());\n\t\tfor(Thread t : threads) {\n\t\t\tsynchronized(t) {\n\t\t\t\tSystem.out.println("Threadname: " + t.getName() + " notified.");\n\t\t\t\tt.notify();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic synchronized int allocated( ) {\n\t\tint[] claim = claims.get(Thread.currentThread());\n\t\tif (claim == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn claim[0];\n\t}\n\n\tpublic synchronized int remaining( ) {\n\t\tThread thread = Thread.currentThread();\n\t\tint[] claim = claims.get(thread);\n\t\tif (claim == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn claim[1];\t\n\t}\n}\n	B:\\Portfolio\\BankersAlgorithm\\src	2	2
3	2014-12-07 15:34:35	2014-12-07 15:35:18	Client.java	Client object for the practice exercise	/*\n<package>\n\tBanker Algorithm\n<.package>\n<description>\n    Client object for the practice exercise \n<.description>\n<keywords>\n    threads, concurrency, banker algorithm\n<.keywords>\n*/\n\nimport java.util.Random;\n\npublic class Client extends Thread {\n\tprivate String name;\n\tprivate Banker banker;\n\tprivate int nUnits;\n\tprivate int nRequests;\n\tprivate long minSleepMillis;\n\tprivate long maxSleepMillis;\n\n\tpublic Client(String name, Banker banker, int nUnits, \n\t\t\tint nRequests, long minSleepMillis, long maxSleepMillis) \n\t{\n\t\tsuper(name);\n\t\tthis.banker = banker;\n\t\tthis.nUnits = nUnits;\n\t\tthis.nRequests = nRequests;\n\t\tthis.minSleepMillis = minSleepMillis;\n\t\tthis.maxSleepMillis = maxSleepMillis;\n\t}\n\t\n\tpublic void run() {\n\t\tRandom rnd = new Random();\n\t\tint units = rnd.nextInt(nUnits) + 1;\n\t\tbanker.setClaim(nUnits);\n\n\t\tfor (int i = 0; i < nRequests; i ++) {\n\t\t\tint remaining = banker.remaining();\n\t\t\tif (remaining == 0) {\n\t\t\t\tbanker.release(nUnits);\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// Request a random number of units, from 0 to remaining\n\t\t\t\tint req = rnd.nextInt(remaining) + 1;\n\t\t\t\tbanker.request(req);\n\t\t\t}\n\n\t\t\tint sleep = rnd.nextInt((int)(maxSleepMillis - minSleepMillis));\n\t\t\t\n\t\t\ttry {\n\t\t\t\tThread.sleep(1);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println("Thread " + this.getName() + " exits.");\n\t}\n}\n	B:\\Portfolio\\BankersAlgorithm\\src	2	2
4	2014-12-07 15:34:49	2014-12-07 15:35:18	Driver.java	Main method	/*\n<package>\n\tBanker Algorithm\n<.package>\n<description>\n    Main method \n<.description>\n<keywords>\n\tdriver\n<.keywords>\n*/\n\npublic class Driver {\n\tpublic static void main(String[] args) {\n\t\tBanker b = new Banker(10);\n\t\tClient c = new Client("Steve", b, 5, 10, 4000, 5000);\n\t\tClient c2 = new Client("Geoff", b, 5, 10, 1000, 2000);\n\t\tClient c3 = new Client("Josh", b, 5, 10, 1000, 2000);\n\t\tc.start();\n\t\tc2.start();\n\t\tc3.start();\n\t}\n}\n	B:\\Portfolio\\BankersAlgorithm\\src	2	2
5	2014-11-29 16:45:46	2014-11-29 16:41:55	BinarySearchTree.py	Tree Class for creating and using a binary tree	# <package>\n#     Binary Search Tree\n# <.package>\n# <description>\n#     Tree Class for creating and using a binary tree\n# <.description>\n# <keywords>\n#     binary tree\n# <.keywords>\n\nimport TreeNode\n\nclass BinarySearchTree:\n\n    def __init__(self):\n        self.root = None\n        self.size = 0\n\n    def length(self):\n        return self.size\n\n    def __len__(self):\n        return self.size\n\n    def __iter__(self):\n        return self.root.__iter__()\n\n    def put(self,key,val):\n        if self.root:\n            self._put(key,val,self.root)\n        else:\n            self.root = TreeNode(key,val)\n            self.size = self.size + 1\n\n    def _put(self,key,val,currentNode):\n        if key < currentNode.key:\n            if currentNode.hasLeftChild():\n                self._put(key,val,currentNode.leftChild)\n            else:\n                currentNode.leftChild = TreeNode(key,val,parent=currentNode)\n        else:\n            if currentNode.hasRightChild():\n                self._put(key,val,currentNode.rightChild)                                                                                                 else:\n                currentNode.rightChild = TreeNode(key,val,parent=currentNode)\n	B:\\Portfolio\\Binary Search Tree	3	1
6	2014-11-29 16:45:20	2014-11-29 16:41:55	TreeNode.py	Node class for use in a binary tree	# <package>\n#     Binary Search Tree\n# <.package>\n# <description>\n#     Node class for use in a binary tree\n# <.description>\n# <keywords>\n#     node, binary tree\n# <.keywords>\n\nclass TreeNode:\n    def __init__(self,key,val,left=None,right=None,parent=None):\n        self.key = key\n        self.payload = val\n        self.leftChild = left\n        self.rightChild = right\n        self.parent = parent\n \n    def hasLeftChild(self):\n        return self.leftChild\n\n    def hasRightChild(self):\n        return self.rightChild\n\n    def isLeftChild(self):\n        return self.parent and self.parent.leftChild == self\n    \n    def isRightChild(self):\n        return self.parent and self.parent.rightChild == self\n\n    def isRoot(self):\n        return not self.parent\n\n    def isLeaf(self):\n        return not (self.rightChild or self.leftChild)\n\n    def hasAnyChildren(self):\n        return self.rightChild or self.leftChild\n\n    def hasBothChildren(self):\n        return self.rightChild and self.leftChild\n                                                                                                                                                  def replaceNodeData(self,key,value,lc,rc):\n        self.key = key\n        self.payload = value\n        self.leftChild = lc\n        self.rightChild = rc\n        \n    if self.hasLeftChild():\n        self.leftChild.parent = self\n        \n    if self.hasRightChild():\n        self.rightChild.parent = self\n	B:\\Portfolio\\Binary Search Tree	3	1
13	2014-11-29 15:57:41	2014-11-29 15:01:17	checkingAcc.java	Checking account logic for Bank Application	/*\n<package>\n\tBank Application\n<.package>\n<description>\n    Checking account logic for Bank Application\n<.description>\n<keywords>\n    bank logic\n<.keywords>\n*/\n\nclass checkingAcc extends Customer {\n\n\tprivate double balance;\n\t\n\tpublic checkingAcc ( String l, \n\t\t\t\t\t\t\t String f, \n\t\t\t\t\t\t\t String pho, \n\t\t\t\t\t\t\t double bal )\n\t{\n\t\tsuper(l, f, pho);\n\t\tbalance = bal;\n\t}\n\t\n\tpublic checkingAcc ( String l,\n\t\t\t\t\t\t\t String f )\n\t{\n\t\tsuper(l, f);\n\t\tbalance = 0.0;\n\t}\n\t\n\tpublic checkingAcc ( )\n\t{\n\t\tsuper();\n\t\tbalance = 0.0;\n\t}\n\t\n\tpublic void getInfo ()\n\t{\n\t\tsuper.getInfo();\n\t\tSystem.out.println("Checking account balance: " + balance);\n\t}\n\t\n\t\n\tpublic void deposit  ( double d )\n\t{\n\t\tif ( d < 0 )\n\t\t\tSystem.out.println("\\n**Error: Deposit cannot be negative**");\n\t\telse {\n\t\t\tbalance += d;\n\t\t\tsuper.getInfo();\n\t\t\tSystem.out.println("Amount deposited: " + d);\n\t\t\tSystem.out.println("New balance: " + balance);\n\t\t}\n\t}\n\t\n\tpublic void withdraw ( double w )\n\t{\n\t\tif ( w >= balance ) \n\t\t{\n\t\t\tSystem.out.println("\\n**Error: Requested funds exceeds available balance**");\n\t\t\tw = balance;\n\t\t} else if ( w < 0 )\n\t\t\tSystem.out.println("\\n**Error: Invalid withdrawal amount**");\n\t\telse {\n\t\t\tbalance -= w;\n\t\t\tsuper.getInfo();\n\t\t\tSystem.out.println("Amount withdrawn: " + w);\n\t\t\tSystem.out.println("Remaining balance: " + balance);\n\t\t}\n\t}\t \n}\t	B:\\Portfolio\\CIS225 - Project 1\\Project 1	7	2
7	2014-11-29 13:12:21	2011-09-26 00:23:13	ArrayMain.cpp	Generates a BMP image using external EasyBMP files	/*\n<package>\n\tBMP Art\n<.package>\n<description>\n\tGenerates a BMP image using external EasyBMP files\n<.description>\n<keywords>\n\tBMP, image, draw\n<.keywords>\n*/\n\n#include "C2DArray.h"\n#include "EasyBMP.h"\n#include <math.h>\n#include <cstdlib>\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nint main()\n{\n\tconst int IMAGE_WIDTH = 1024;\t//Size of final .bmp image\n\tconst int IMAGE_HEIGHT = 828;   //"\n\tint x(270),y(140),w(50),mod(250);  //Variables used for manipulating position/color\n\tchar file[20] = "redRectangle.txt";\n\n\t//Create image & set size & fill background\n\tBMP The_Image;\t\n\tThe_Image.SetSize(IMAGE_WIDTH, IMAGE_HEIGHT);\n\tfill_background(The_Image, 0, 100, 255);\n\t\n//******** Draws the 4 blue (red outlined) gradient pattern ***************\n\t//Uses 2 C2DArray objects in a 10 cycle loop, modifying size, position\n\t//and color after each loop\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tC2DArray redRect = C2DArray(w, w, mod, 0, 0);\n\t\tC2DArray blueRect = C2DArray(w - 1, w - 1, 0, 0, mod);\n\t\t\n\t\t//paints underlying red bursts\n\t\tredRect.paint(The_Image, x - 1, y - 1);\n\t\tredRect.paint(The_Image, x, 768 - y);\n\t\tredRect.paint(The_Image, 1024 - x, y);\n\t\tredRect.paint(The_Image, 1024 - x, 768 - y);\n\t\t\n\t\t//paints blue bursts\n\t\tblueRect.paint(The_Image, x, y);\n\t\tblueRect.paint(The_Image, x + 1, 768 - y);\n\t\tblueRect.paint(The_Image, 1024 - x, y + 1);\n\t\tblueRect.paint(The_Image, 1024 - x, 768 - y);\n\t\t\n\t\t//spacing and coloring modifiers\n\t\tw -= 4;\n\t\tx += 20;\n\t\ty += 20;\n\t\tmod -= 25;\n\t}\n\t\n\t//Reset size, space, color modifiers \n\tw = 5;\n\tx = 517;\n\ty = 350;\n\tmod = 0;\n\t\n//******* Draws the Red rectangles (vertical)\n\tfor (int i = 0; i < 6; i++)\n\t{\n\t\t//Creates and paints top gradient\n\t\tC2DArray greenRect = C2DArray(w, w, 0, mod, 0);\n\t\tgreenRect.paint(The_Image, x, y);\n\n\t\tC2DArray redRect = C2DArray(w - 2, w - 2, mod, 0, 0);\n\t\tredRect.paint(The_Image, x + 1, y);\n\n\t\t//Paints bottom gradient\n\t\tgreenRect.paint(The_Image, x, 768 - y);\n\t\tredRect.paint(The_Image, x + 1, 770 - y);\n\t\t\n\t\t//Adjust size, position, color\n\t\tw += 10;\n\t\tx -= 4;\n\t\ty -= 65;\n\t\tmod += 20;\n\t}\n\n//****** Draws Center GREEN diamonds ************\n\tC2DArray bigGreenRect = C2DArray(150, 150, 0, 250, 0, 0, 0, 0);\n\tbigGreenRect.paint(The_Image, 445, 315);\n\n\tC2DArray midGreenRect = C2DArray(100, 100, 0, 125, 0, 0, 180, 0);\n\tmidGreenRect.paint(The_Image, 470, 340);\n\n\tC2DArray smallGreenRect = C2DArray(50, 50, 0, 75, 0, 0, 125, 0);\n\tsmallGreenRect.paint(The_Image, 495, 365);\n\n//****** Draws Left RED diamonds *****************\n\tC2DArray bigRedRect = C2DArray(150, 150, 250, 0, 0, 0, 0, 0);\n\tbigRedRect.paint(The_Image, 295, 315);\n\n\tC2DArray midRedRect = C2DArray(100, 100, 125, 0, 0, 180, 0, 0);\n\tmidRedRect.paint(The_Image, 320, 340);\n\n\tC2DArray smallRedRect = C2DArray(50, 50, 75, 0, 0, 125, 0, 0);\n\tsmallRedRect.paint(The_Image, 345, 365);\n\t\n//******* Draws Right BLUE diamonds *****************\n\tC2DArray bigBlueRect = C2DArray(150, 150, 0, 0, 250, 0, 0, 0);\n\tbigBlueRect.paint(The_Image, 595, 315);\n\n\tC2DArray midBlueRect = C2DArray(100, 100, 0, 0, 125, 0, 0, 180);\n\tmidBlueRect.paint(The_Image, 620, 340);\n\n\tC2DArray smallBlueRect = C2DArray(50, 50, 0, 0, 75, 0, 0, 125);\n\tsmallBlueRect.paint(The_Image, 645, 365);\n\t\n\t//utilizes the save-to-file and read-from-file utilities\n\tbigRedRect.saveToFile("redRectangle.txt");\n\tC2DArray paintFromFile = C2DArray("redRectangle.txt");\n\tpaintFromFile.paint(The_Image, 145, 315);\n\t\n\tbigBlueRect.saveToFile("blueRectangle.txt");\n\tC2DArray paintFromFile2 = C2DArray("blueRectangle.txt");\n\tpaintFromFile2.paint(The_Image, 745, 315);\n\n\t//save image to file\n\tThe_Image.WriteToFile("the_image.bmp");\n\n\treturn(0);\n}\n\n\n\n	B:\\Portfolio\\BMP_Art\\BMP_Art	4	3
8	2014-11-29 13:11:21	2011-09-26 00:23:14	C2DArray.cpp	Generates a BMP image using external EasyBMP files	/*\n<package>\n    BMP Art\n<.package>\n<description>\n    Generates a BMP image using external EasyBMP files\n<.description>\n<keywords>\n    BMP, image, draw\n<.keywords>\n*/\n\n#include "C2DArray.h"\n#include <iostream>\n#include <fstream>\nusing namespace std;\n\nC2DArray::C2DArray()\n{}\n\n//Copy constructor\nC2DArray::C2DArray(const C2DArray& aC2DArrayObject)\n{\n\ttheData = aC2DArrayObject.theData;\n\tw = aC2DArrayObject.w;\n\th = aC2DArrayObject.h;\n\tr = aC2DArrayObject.r;\n\tg = aC2DArrayObject.g;\n\tb = aC2DArrayObject.b;\n}\n\n//Dynamically creates a two-dimensional array of aColor structures and assigns rgb values\n//Creates basic square graphic, 5 ints as arguments\nC2DArray::C2DArray(int width, int height, int red, int green, int blue)\n\t:w(width),h(height)\n{\n\tColArrayPointer *theColArray = new ColArrayPointer[h];\n\t\n\t//Create second dimension of array\n\tfor (int i = 0; i < h; i++)\n\t\ttheColArray[i] = new aColor[w];\n\n\tfor (int i = 0; i < h; i++)\n\t{\n\t\tfor (int j = 0; j < w; j++)\n\t\t{\n\t\t\t//Set rgb colors to the square\n\t\t\ttheColArray[j][i].red = red;\n\t\t\ttheColArray[j][i].green = green;\n\t\t\ttheColArray[j][i].blue = blue;\n\t\t}\n\t\tcout << endl;\n\t}\n\ttheData = theColArray;\n}//end constructor\n\n//Creates diamond graphic\n//8 ints as arguments\nC2DArray::C2DArray(int width, int height, int red, int green, int blue, int bgred, int bggreen, int bgblue)\n\t:w(width),h(height)\n{\n\tColArrayPointer *theColArray = new ColArrayPointer[h];\n\tdouble slope = (h/2)/(w/2);  //slope of the lines outlining the diamond shape\n\t\n\t//Create 2nd dimension of array\n\tfor (int i = 0; i < h; i++)\n\t\ttheColArray[i] = new aColor[w];\n\n\tfor (int i = 0; i < h; i++)\n\t{\n\t\tfor (int j = 0; j < w; j++)\n\t\t{\n\t\t\t//Corners of the square are isolated and assigned rgb values\n\t\t\t if(i <= -slope * j + (h/2) || \n\t\t\t   i <=  slope * j - (h/2) ||\n\t\t\t   i >= -slope * j + (w*1.5) ||\n\t\t\t   i >=  slope * j + (w/2))\n\t\t\t{\n\t\t\t\ttheColArray[j][i].red = bgred;\n\t\t\t\ttheColArray[j][i].green = bggreen;\n\t\t\t\ttheColArray[j][i].blue = bgblue;\n\t\t\t//Central diamond shape assigned rgb values\n\t\t\t} else {\n\t\t\t\ttheColArray[j][i].red = red;\n\t\t\t\ttheColArray[j][i].green = green;\n\t\t\t\ttheColArray[j][i].blue = blue;\n\t\t\t}\n\t\t}\n\t\tcout << endl;\n\t}\n\ttheData = theColArray;\n}//end constructor\n\n//Constructs from a file\nC2DArray::C2DArray(char file[])\n{\n\tifstream myfile;\n\tmyfile.open(file);\n\t\n\tmyfile >> w >> h;\n\t\n\tColArrayPointer *theColArray = new ColArrayPointer[h];\n\n\tfor (int i = 0; i < h; i++)\n\t\ttheColArray[i] = new aColor[w];\n\n\tif(myfile.is_open())\n\t{\n\t\tfor(int i = 0; i < h; i++)\n\t\t\tfor(int j = 0; j < w; j++)\n\t\t\t{\n\t\t\t\tmyfile >> theColArray[j][i].red \n\t\t\t\t\t   >> theColArray[j][i].green\n\t\t\t\t\t   >> theColArray[j][i].blue;\n\t\t\t}\n\t}\t\n\ttheData = theColArray;\n\tmyfile.close();\n}//End constructor\n\n//Paints a premade 2D array of rgb colors to a BMP image\n//The color r = 0, g = 0, b = 0 is not painted to create 'transparency'\nvoid C2DArray::paint(BMP& Image, int x, int y)\n{\n\tfor(int i = 0; i < h; i++)\n\t\tfor(int j = 0; j < w; j++)\n\t\t{\n\t\t\t//No pixel information is changed if the rgb values are 0,0,0\n\t\t\tif(theData[j][i].red == 0 && theData[j][i].green == 0 && theData[j][i].blue == 0)\n\t\t\t{} \n\t\t\telse{\n\t\t\tImage(j+x,i+y)->Red = theData[j][i].red;\n\t\t\tImage(j+x,i+y)->Green = theData[j][i].green;\n\t\t\tImage(j+x,i+y)->Blue = theData[j][i].blue;\n\t\t\t}\n\t\t}\n}//end paint()\n\n//Saves object data values to a text file\nvoid C2DArray::saveToFile(char file[])\n{\n  ofstream myfile;\n  myfile.open (file);\n  myfile << w << " " << h << endl;\n\n  for(int i = 0; i < h; i++)\n\t\tfor(int j = 0; j < w; j++)\n\t\t{\n\t\t\tmyfile << theData[j][i].red << " "\n\t\t\t\t   << theData[j][i].green  << " "\n\t\t\t\t   << theData[j][i].blue << endl;\n\t\t}\n\n  myfile.close();\n}//end savetofile()\n\n\n//Fills background of an image\nvoid fill_background(BMP& Image, int r, int g, int b)\n{\n\tint x(0), y(0);  //Variables used to control background texture\n\t\n\tfor(int i = 0; i < Image.TellHeight() - 1; i++)\n\t{\n\t\tfor(int j = 0; j < Image.TellWidth() - 1; j++)\n\t\t{\n\t\t\t//Creates border around image\n\t\t\tif (i < 8 || j < 8 || i > Image.TellHeight() - 10 || j > Image.TellWidth() - 10)\n\t\t\t{\n\t\t\t\tImage(j,i)->Red = j + i;\n\t\t\t\tImage(j,i)->Green = j/10;\n\t\t\t\tImage(j,i)->Blue = j/10;\n\t\t\t}\n\t\t\t//Creates background gradiant\n\t\t\telse if (x > 20 || y > 20)\n\t\t\t{\n\t\t\t\tImage(j,i)->Red = j/10;\n\t\t\t\tImage(j,i)->Green = i/10;\n\t\t\t\tImage(j,i)->Blue = (i + j);\n\t\t    //Creates texture color\n\t\t\t} else {\n\t\t\t\tImage(j,i)->Red = j/10;\n\t\t\t\tImage(j,i)->Green = i/10;\n\t\t\t\tImage(j,i)->Blue = Image.TellWidth() - j + Image.TellHeight() - i;\n\t\t\t}\n\t\t\t//Handles the texture shape\n\t\t\tx++;\n\t\t\tif (x > 40)\n\t\t\t\tx = 0;\n\t\t}\n\t\t//Handles the texture shape\n\t\ty++;\n\t\tif (y > 40)\n\t\t\ty = 0;\n\t}\n\treturn;\n}//end fill_background()\n\n//Destructor\nC2DArray::~C2DArray()\n{\t\n\tdelete theData, r, g, b, h, w;\n}\n\n\n	B:\\Portfolio\\BMP_Art\\BMP_Art	4	3
9	2014-11-29 13:17:46	2011-09-26 00:23:14	Main.cpp	Sorts an array of random integers	/*\n<package>\n\tBubbleSort_cpp\n<.package>\n<description>\n\tSorts an array of random integers\n<.description>\n<keywords>\n\tbubble sort\n<.keywords>\n*/\n\n#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint main()\n{\n\tint unsortedArray[100000], sortedArray[100000], x, ops(0), increment(2000), elements(1000);\n\tbool flag = true;\n\nfor (int j = 0; j <= 9; j++)\n{\n\tfor (int i = 0; i <= elements; i++)\n\t{\n\t\tunsortedArray[i] = rand() % 1000;\n\t\tsortedArray[i] = unsortedArray[i];\n\t\t//cout << unsortedArray[i] << "\\t";\n\t}\n\t\n\twhile(flag)\n\t{\n\tflag = false;\n\t\tfor (int i = 0; i <= elements-1; i++)\n\t\t{\n\t\t\tif (sortedArray[i+1] < sortedArray[i])\n\t\t\t{\n\t\t\t\tops++;\n\t\t\t\tflag = true;\n\t\t\t\tx = sortedArray[i];\n\t\t\t\tsortedArray[i] = sortedArray[i+1];\n\t\t\t\tsortedArray[i+1] = x;\n\t\t\t}\n\t\t}\n\t} //end while loop\n\n\tflag = true;\t\t\t\n\tcout << "Elements: " << elements << "\\tOperations: " << ops << "\\n";\n\telements += increment;\n\tops = 0;\n\n}//end j loop\n\t\n\tcout << "\\nPress any key...";\n\tcin >> x;\n}	B:\\Portfolio\\BubbleSort\\BubbleSort	5	3
10	2014-11-29 15:54:07	2014-11-29 15:01:17	BankTestGUI.java	Currently non operating GUI interface for the Bank application	/*\n<package>\n\tGUI for Bank Application\n<.package>\n<description>\n    Currently non operating GUI interface for the Bank application\n<.description>\n<keywords>\n    swing, frame, non-working\n<.keywords>\n*/\n\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class BankTestGUI extends JFrame {\n\tstatic JTextArea outPutWin = new JTextArea(50);\n\n\tpublic static void main (String[] args) {\n\t BankTestGUI frame = new BankTestGUI();\n    frame.setTitle("Bank of Brewster");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(600,600);\n    frame.setVisible(true);\n\t outPut("Hi");\n\t \t outPut("Hi");\n\t\t \t outPut("Hi");\n\n\t}\n\t\n\tpublic BankTestGUI ( )\n\t{\n\t\t//Menu Panel creation\n\t\tJPanel p1 = new JPanel();\n\t\tp1.setLayout(new GridLayout(7,1));\n\t\tp1.add(new JButton("Add Customer"));\n\t\tp1.add(new JButton("Delete Customer"));\n\t\tp1.add(new JButton("Sort List"));\n\t\tp1.add(new JButton("Find Customer"));\n\t\tp1.add(new JButton("Make Deposit"));\n\t\tp1.add(new JButton("Make Withdrawal"));\n\t\tp1.add(new JButton("Print List"));\n\t\t\n\t\t//Main window creation\n\t\tJPanel p2 = new JPanel();\n\t\tp2.setLayout(new GridLayout(1,1));\n\t\tp2.add(outPutWin);\n\t\t\n\t\t//Create panel\n\t\tadd(p1, BorderLayout.WEST);\n\t\tadd(p2, BorderLayout.CENTER);\n\t}\n\t\n\tpublic static void outPut(String s)\n\t{\n\t\toutPutWin.setText(s);\n\t}\n}	B:\\Portfolio\\CIS225 - Project 1	6	2
11	2014-11-29 15:56:00	2014-11-29 15:01:17	Bank.java	Performs business logic for Banking application	/*\n<package>\n\tBank Application\n<.package>\n<description>\n    Performs business logic for Banking application\n<.description>\n<keywords>\n    list, array, user input\n<.keywords>\n*/\n\n//************************************************\n//           Name:        Steven Brewster, Calvin Burnup\n//           Course:      CSC 225\n//           Instructor:  Wexler\n//           Project:     Bank.java\n//           Due Date:    March 10th 2011\n//\n//************************************************\n//******************************************************************************\n// Program Customer.java - The method class, contains all pertanant algorithims.\n// Most of the program functions though here.\n//******************************************************************************\n\nimport java.util.*;\nclass Bank {\n\n\tprivate Customer customerList[] = new Customer[6];\n\tprivate int count = 0;\n\tprivate boolean id[] = new boolean[1000];\n\tScanner keyIn = new Scanner(System.in);\n\t\n\tpublic void addCustomer(Customer c)\n\t{\n\t\tif ( count == customerList.length - 1 )\n\t\t\tcustomerList = ensureCapacity();\n\t\t\t\n\t\tcustomerList[count] = c;\n\t\tcustomerList[count].setIndex(count); \n\t\tcustomerList[count].setId(findId());\n\t\tcount++;\n\t}\n\t\n\tpublic Customer[] ensureCapacity ( )\n\t{\n\t\tCustomer temp[] = new Customer[ customerList.length + 5 ];\n\t\t\tfor (int i = 0; i < customerList.length; i++)\n\t\t\t{\n\t\t\t\ttemp[i] = customerList[i];\n\t\t\t}\n\t\treturn temp;\n\t}\n\t\n\tpublic void deleteCustomer( String l, String f )\n\t{\n\t\tCustomer c = retrieve ( l, f );\n\t\tint temp_index = c.getIndex();\n\t\tid[c.getId()] = false;\n\t\tcustomerList[temp_index] = null;\n\t\t\n\t\tfor (int i = temp_index; i < count; i++)\n\t\t{\n\t\t\tcustomerList[i] = customerList[i + 1];\n\t\t}\n\n\t\tcount--;\n\t}\n\t\n\tpublic void printList ( )\n\t{\n\t\tfor (int i = 0; i < count; i++)\n\t\t{\n\t\t\tcustomerList[i].getInfo();\n\t\t}\n\t}\n\t\n\tpublic int findId ( )\n\t{\n\t\tint i = 0;\n\t\t\n\t\twhile(id[i])\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tid[i] = true;\n\t\treturn i;\n\t}\n\t\n\tpublic Customer retrieve ( String l, String f )\n\t{\n\t\tCustomer c = new Customer();\n\t\tint ticker = 0;\n\t\t\n\t\tfor (int i = 0; i < count; i++)\n\t\t{\n\t\t\tif (customerList[i].getLastName().equalsIgnoreCase(l) &&\n\t\t\t   customerList[i].getFirstName().equalsIgnoreCase(f))\n\t\t\t{   \n\t\t\t\tc = customerList[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn c;\n\t}\n\t\n   public Customer retrieve ( int d )\n\t{\n\t\tCustomer c = new Customer();\n\t\t\n\t\tfor (int i = 0; i < count; i++)\n\t\t{\n\t\t\tif ( customerList[i].getId() == d )\n\t\t\t   \t\tc = customerList[i];\n\t\t}\n\t\t\n\t\treturn c;\n\t}\n\n\tpublic void sortList ( )\n\t{\n\t\tCustomer passer = new Customer();\n\t\tString alpha, omega;\n\t\tboolean flag = true;\n\t\t\n\t\twhile (flag)\n\t\t{\n\t\t\tflag = false;\n\t\t\tfor (int i = 0; i < count - 1; i++)\n\t\t\t{\n\t\t\t\talpha = customerList[i].getLastName();\n\t\t\t\tomega = customerList[i + 1].getLastName();\n\t\t\t\t\n\t\t\t\tif ( alpha.compareTo(omega) > 0 )\n\t\t\t\t{\n\t\t\t\t\tpasser = customerList[i];\n\t\t\t\t\tcustomerList[i] = customerList[i + 1];\n\t\t\t\t\tcustomerList[i].setIndex(i);\n\t\t\t\t\tcustomerList[i + 1] = passer;\n\t\t\t\t\tcustomerList[i + 1].setIndex(i + 1);\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tpublic void deposit ( String l, String f, double d )\n\t{\n\t\tCustomer d1 = this.retrieve(l,f);\n\t\td1.deposit(d);\n\t}\n\t\n\tpublic void withdraw ( String l, String f, double d )\n\t{\n\t\tCustomer w1 = this.retrieve(l,f);\n\t\tw1.withdraw(d);\n\t}\t \n\t\t\n}	B:\\Portfolio\\CIS225 - Project 1\\Project 1	7	2
12	2014-11-29 15:56:57	2014-11-29 15:01:17	bankTest.java	Console test of the bank applications operations	/*\n<package>\n\tBank Application\n<.package>\n<description>\n    Console test of the bank applications operations\n<.description>\n<keywords>\n    command line, menu interface, test\n<.keywords>\n*/\n\nimport java.io.*;\nimport java.util.*;\n\nclass bankTest {\n\n\tprivate static Bank b1 = new Bank();\n\tprivate static Scanner keyIn = new Scanner(System.in);\n\t\n\tpublic static void main ( String[] args )\n\t{\n\t\tint choice = 0;\n\t\tdouble emptyDouble = 0.0;\n\t\tString emptyString = "";\n\t\treadIn();\n\t\t\t\n\t\t\t//Sort customer list\n\t\t\tprintMenu();\n\t\t\tSystem.out.println("Sort the list");\n\t\t\tmenu(6,emptyDouble,emptyString,emptyString,emptyString);\n\t\t\t\t\t\tmenu(7,emptyDouble,emptyString,emptyString,emptyString);\n\t\t\t\n\t\t\t//Print the list\n\t\t\tprintMenu();\n\t\t\tSystem.out.println("Print the list");\n\t\t\tmenu(7,emptyDouble,emptyString,emptyString,emptyString);\n\t\t\t\n\t\t\t//Withdraw $125 from  Smith John account\n\t\t\tprintMenu();\n\t\t\tSystem.out.println("Withdraw $125 from  Smith John account");\n\t\t\tmenu(3,125.00,"Smith","John","checking");\n\t\t\t\t\t\tmenu(7,emptyDouble,emptyString,emptyString,emptyString);\n\t\t\t\n\t\t\t//Withdraw $300 from Smith John account\n\t\t\tprintMenu();\n\t\t\tSystem.out.println("Withdraw $300 from Smith John account");\n\t\t\tmenu(3,300.00,"Smith","John","checking");\n\t\t\tmenu(7,emptyDouble,emptyString,emptyString,emptyString);\n\t\t\t\n\t\t\t//Deposit $500 to Clinton Hillery's account \n\t\t\tprintMenu();\n\t\t\tSystem.out.println("Deposit $500 to Clinton Hillery's account");\n\t\t\tmenu(2,500.00,"Clinton","Hillery","saving");\n\t\t\tmenu(7,emptyDouble,emptyString,emptyString,emptyString);\n\t\t\t\n\t\t\t//Remove Obama Barak from the list\n\t\t\tprintMenu();\n\t\t\tSystem.out.println("Remove Obama Barak from the list");\n \t\t\tmenu(5,emptyDouble,"Obama","Barak",emptyString);\n\t\t\tmenu(7,emptyDouble,emptyString,emptyString,emptyString);\n\t\t\t\n\t\t\t//Deposit -$100 into George Bush account\n\t\t\tprintMenu();\n\t\t\tSystem.out.println("Deposit -$100 into George Bush account");\n\t\t\tmenu(2,-100.00,"Bush","George","saving");\n\t\t\tmenu(7,emptyDouble,emptyString,emptyString,emptyString);\n\t\t\t\n\t\t\t//Withdraw -$50 from Grove Kavin account \n\t\t\tprintMenu();\n\t\t\tSystem.out.println("Withdraw -$50 from Grove Kavin account");\n\t\t\tmenu(3,-50.00,"Grove","Kavin","checking");\n\t\t\tmenu(7,emptyDouble,emptyString,emptyString,emptyString);\n\t\n\t}\n\t\n\tprivate static void readIn()\n\t{\n\t\tFileReader theFile;\n\t\tBufferedReader fileIn = null;\n\t\tString oneLine= "";\n\n\t\t\n\t\ttry {\n\t   \ttheFile = new FileReader( "customerlist.txt" );\n         fileIn  = new BufferedReader( theFile );\n\t\t   while( ( oneLine = fileIn.readLine( ) ) != null )\n     \t\t \treadInCustomer ( oneLine );\n\t\t}     \n\t\tcatch( Exception e )\n      \t{  System.out.println( e ); }\n\t}\n\t\n\tprivate static void readInCustomer(String s)\n\t{\n\t\tString splitter[] = s.split(",");\n\t\t\n\t\t\n\t\tif (splitter[4].equals("checking"))\n\t\t{\n\t\t\tcheckingAcc c1 = new checkingAcc(splitter[0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsplitter[1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsplitter[2],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDouble.parseDouble(splitter[3]));\n\t\t\tb1.addCustomer(c1);\n\t\t}\n\t\tif (splitter[4].equals("saving"))\n\t\t{\n\t\t\tsavingAcc s1 = new savingAcc(splitter[0],\n\t\t\t\t\t\t\t\t\t\t\t\t  splitter[1],\n\t\t\t\t\t\t\t\t\t\t\t\t  splitter[2],\n\t\t\t\t\t\t\t\t\t\t\t\t  Double.parseDouble(splitter[3]));\n\t\t\tb1.addCustomer(s1);\n\t\t}\n\n\t}\n\t\n\tprivate static void menu ( int c,\n\t\t\t\t\t\t\t\t\t\tdouble dollars,\n\t\t\t\t\t\t\t\t\t\tString l,\n\t\t\t\t\t\t\t\t\t\tString f,\n\t\t\t\t\t\t\t\t\t\tString accType )\n\t{\n\n\t\tswitch (c)\n\t\t{\n\t\t\tcase 1: add();\n\t\t\t\t\t\tbreak;\n\t\t\tcase 2: b1.deposit(l,f,dollars);\n\t\t\t\t\t\tbreak;\n\t\t\tcase 3: b1.withdraw(l,f,dollars);\n\t\t\t\t\t\tbreak;\n\t\t\tcase 4: b1.retrieve(l,f);\n\t\t\t\t\t\tbreak;\n\t\t\tcase 5: b1.deleteCustomer(l,f);\n\t\t\t\t\t\tbreak;\n\t\t\tcase 6: b1.sortList();\n\t\t\t\t\t\tbreak;\n\t\t\tcase 7: b1.printList();\n\t\t\t\t\t\tbreak;\n\t\t}\n\n\t}\n\t\n\tprivate static void add ( )\n\t{\n\t\tString l, f, pho;\n\t\tdouble bal;\n\t\tSystem.out.print("Customer's last name: ");\n\t\t\tl = keyIn.next();\n\t\tSystem.out.print("Customer's first name: ");\n\t\t\tf = keyIn.next();\n\t\tSystem.out.print("Customer's phone number: ");\n\t\t\tpho = keyIn.next();\n\t\tSystem.out.print("Starting balance: ");\n\t\t\tbal = Double.parseDouble(keyIn.next());\n\t\t\n\t\tcheckingAcc c1 = new checkingAcc(l,f,pho,bal);\n\t\tb1.addCustomer(c1);\n\t\t\n\t\tSystem.out.println("+++New customer successfully created+++");\n\t}\n\t\n\tprivate static void printMenu()\n\t{\n\t\t\tSystem.out.print("\\n1.\tAdd a customer\\n" +\n\t\t\t\t\t\t\t\t "2.\tDeposit\\n" +\n\t\t\t\t\t\t\t\t "3.\tWithdraw\\n" +\n\t\t\t\t\t\t\t\t "4.\tRetrieve a customer\\n" +\n\t\t\t\t\t\t\t\t "5.\tRemove  a customer\\n" +\n\t\t\t\t\t\t\t\t "6.\tSort the customers  (in ascending order)\\n" +\n\t\t\t\t\t\t\t\t "7.\tPrint the list of customers ( last  name first name, id, and balance)\\n" +\n\t\t\t\t\t\t\t\t "8.\tQuit\\n" +\n\t\t\t\t\t\t\t\t "--> ");\n\t}\n}	B:\\Portfolio\\CIS225 - Project 1\\Project 1	7	2
14	2014-11-29 15:58:19	2014-11-29 15:01:17	Customer.java	Customer object class	/*\n<package>\n\tBank Application\n<.package>\n<description>\n    Customer object class\n<.description>\n<keywords>\n    customer class\n<.keywords>\n*/\n\n//************************************************\n//           Name:        Steven Brewster, Calvin Burnup\n//           Course:      CSC 225\n//           Instructor:  Wexler\n//           Project:     Customer.java\n//           Due Date:    March 10th 2011\n//\n//************************************************\n//******************************************************************************\n// Program Customer.java - Contains initial contrsuctors and calls for methods.\n// The Parent class of Savings and Checking.\n//******************************************************************************\n\nimport java.util.*;\n\npublic class Customer {\n\t\n\tprotected String first, last, phone;\n\tprivate int index, id;\n\n\tpublic Customer()\n\t{\n\t\tfirst   = "";\n\t\tlast    = "";\n\t\tphone   = "";\n\t}\n\t\n\tpublic Customer(String l, String f)\n\t{\n\t\tfirst   = f;\n\t\tlast    = l;\n\t\tphone   = "";\n\t}\n\t\n\tpublic Customer(String l, String f, String pho)\n\t{\n\t\tfirst   = f;\n\t\tlast    = l;\n\t\tphone   = pho;\n\t}\n\t\n\tpublic void getInfo ()\n\t{\n\t\tSystem.out.println("\\nCustomer: " + last + ", " + first);\n\t\tSystem.out.println("Id Number: " + id);\n\t\tSystem.out.println("Phone: " + phone);\n\t}\n\t\n\tpublic void withdraw ( double d )\n\t{ }\n\t\n\tpublic void deposit ( double d )\n\t{ }\n\t\n\tpublic void setId ( int i )\n\t{\n\t\tid = i;\n\t}\n\t\n\tpublic int getId ( )\n\t{\n\t\treturn id;\n\t}\n\t\n\tpublic void setIndex ( int ind )\n\t{\n\t\tindex = ind;\n\t}\n\t\n\tpublic int getIndex ( )\n\t{\n\t\treturn index;\n\t}\n\t\n\tpublic String getLastName ( )\n\t{\n\t\treturn last;\n\t}\n\t\n\tpublic String getFirstName ( )\n\t{\n\t\treturn first;\n\t}\n\t\n}	B:\\Portfolio\\CIS225 - Project 1\\Project 1	7	2
15	2014-11-29 15:59:09	2014-11-29 15:01:17	savingAcc.java	Performs saving account logic for Bank Application	/*\n<package>\n\tBank Application\n<.package>\n<description>\n    Performs saving account logic for Bank Application\n<.description>\n<keywords>\n    saving account logic\n<.keywords>\n*/\n\nclass savingAcc extends Customer{\n\n\tprivate double balance;\n\t\n\tpublic savingAcc ( String l, \n\t\t\t\t\t\t\t String f, \n\t\t\t\t\t\t\t String pho, \n\t\t\t\t\t\t\t double bal )\n\t{\n\t\tsuper(l, f, pho);\n\t\tbalance = bal;\n\t}\n\t\n\tpublic savingAcc ( String l,\n\t\t\t\t\t\t\t String f )\n\t{\n\t\tsuper(l, f);\n\t\tbalance = 0.0;\n\t}\n\t\n\tpublic savingAcc ( )\n\t{\n\t\tsuper();\n\t\tbalance = 0.0;\n\t}\n\t\n\tpublic void getInfo ()\n\t{\n\t\tsuper.getInfo();\n\t\tSystem.out.println("Savings account balance: " + balance);\n\t}\n\t\n\tpublic void deposit ( double d )\n\t{\n\t\tif ( d < 0 )\n\t\t\tSystem.out.println("\\n**Error: Deposit cannot be negative**");\n\t\telse {\n\t\t\tbalance += d;\n\t\t\tsuper.getInfo();\n\t\t\tSystem.out.println("Amount deposited: " + d);\n\t\t\tSystem.out.println("New balance: " + balance);\n\t\t}\n\t}\n\t\n\tpublic void withdraw ( double w )\n\t{\n\t\tif ( w >= balance ) \n\t\t{\n\t\t\tSystem.out.println("\\n**Error: Requested funds exceeds available balance**");\n\t\t\tw = balance;\n\t\t} else if ( w < 0 )\n\t\t\tSystem.out.println("\\n**Error: Invalid withdrawal amount**");\n\t\telse {\n\t\t\tbalance -= w;\n\t\t\tsuper.getInfo();\n\t\t\tSystem.out.println("Amount withdrawn: " + w);\n\t\t\tSystem.out.println("Remaining balance: " + balance);\n\t\t}\n\t}\t  \n}\t	B:\\Portfolio\\CIS225 - Project 1\\Project 1	7	2
16	2014-11-29 16:00:51	2014-11-29 15:01:17	calculatorMain.java	Main method for calculator application	/*\n<package>\n\tGUI Calculator in Java\n<.package>\n<description>\n    Main method for calculator application\n<.description>\n<keywords>\n\tdriver\n<.keywords>\n*/\n\nimport java.awt.*;\nimport javax.swing.*;\n\nclass calculatorMain{\t\n\t\n\tpublic static void main (String[] args) {\n\t makeFrame frame = new makeFrame();\n    frame.setTitle("Fraction Calculator");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(300,200);\n    frame.setVisible(true);\n\t}\n}\n\t	B:\\Portfolio\\CIS225 - Project 2	8	2
17	2014-11-29 16:01:28	2014-11-29 15:01:17	CreateMenus.java	Swing class for creating menus	/*\n<package>\n\tGUI Calculator in Java\n<.package>\n<description>\n    Swing class for creating menus\n<.description>\n<keywords>\n\tswing, menu\n<.keywords>\n*/\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\n\npublic class CreateMenus extends JFrame implements ActionListener\n\n{\n\n  private JMenuItem jmiCalc;\n  private JMenuItem jmiClear;\n  private JMenuItem jmiExit;\n  private JMenuItem About;\n  private JMenuItem InputInfo;\n\n//-----------------------------------------------------------\n\n/** Default constructor*/\n   public CreateMenus()\n   {\n//-------------------------------------------------------------\n\n     JMenuBar jmenuBar = new JMenuBar();\n\n     //Set menu bar to the frame\n     setJMenuBar(jmenuBar);\n\n     //Create two menus labeled Operation and Help\n     JMenu fileMenu = new JMenu("Operation");\n     JMenu helpMenu = new JMenu("Help");\n     jmenuBar.add(fileMenu);\n     jmenuBar.add(helpMenu);\n\n\t  //Create menu items\n     fileMenu.add(jmiCalc = new JMenuItem("Calculate", 'L'));\n     fileMenu.add(jmiClear = new JMenuItem("Clear", 'R'));\n\n     //The menu components\n     jmiCalc.setIcon(new ImageIcon("new.gif"));\n     jmiClear.setIcon(new ImageIcon("open.gif"));\n\n     fileMenu.addSeparator();\n\n     fileMenu.add(jmiExit = new JMenuItem("Exit",'E'));\n\n      // Set keyboard accelerators\n\t  jmiCalc.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_L, ActionEvent.CTRL_MASK));\n\t  jmiClear.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_R, ActionEvent.CTRL_MASK));\n\t  jmiExit.setAccelerator(\n            KeyStroke.getKeyStroke(KeyEvent.VK_E, ActionEvent.CTRL_MASK));\n\n     helpMenu.add(About = new JMenuItem("About", 'T'));\n     helpMenu.add(InputInfo = new JMenuItem("Input Information", 'I'));\n\t\t\n\t  About.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_T, ActionEvent.CTRL_MASK));\n\t  InputInfo.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_I, ActionEvent.CTRL_MASK));\n\n       //Register Listeners for JMenuItems and JRadioButtonMenuItems\n       jmiCalc.addActionListener(this);\n       jmiClear.addActionListener(this);\n       jmiExit.addActionListener(this);\n\t\t About.addActionListener(this);\n\t\t InputInfo.addActionListener(this);\n    } // end default constructor\n\n/** Handle ActionEvent from menu items and buttons*/\n  public void actionPerformed(ActionEvent e)\n  {\n    String actionCommand = e.getActionCommand();\n\n    if (e.getSource() instanceof JMenuItem)\n     {\n\n \t  if ("Calculate".equals(actionCommand))\n \t      respondToCalc();\n \t  else if ("Clear".equals(actionCommand))\n \t      respondToClear();\n\n \t  else if ("Exit".equals(actionCommand))\n \t      System.exit(0);\n\t  else if("About".equals(actionCommand))\n\t      respondToAbout();\n\t  else if("Input Information".equals(actionCommand))\n\t      respondToInputInfo();\n    }// end instance of JMenuItem\n\n   } //end actionPerformed\n\n   public void respondToCalc()\n   {\n\t   System.out.println("The file, Calculate option was selected");\n   }//end respondToNew\n\n\n\n   public void respondToClear()\n   {\n\t System.out.println("The file, Clear option was selected");\n   }//end respondToOpen\n\t\n\tpublic void respondToAbout()\n\t{\n\t\tSystem.out.println("Computing Fraction Value");\n\t}\n\t\n\tpublic void respondToInputInfo()\n\t{\n\t\tSystem.out.println("Example for Input");\n\t\tSystem.out.println("1/2 + 2/3");\n\t\tSystem.out.println("Need space between operands and operation");\n\t}\n}//end class CreateMenu	B:\\Portfolio\\CIS225 - Project 2	8	2
18	2014-11-29 16:01:50	2014-11-29 15:01:17	Fraction.java	Math logic for the calculator	/*\n<package>\n\tGUI Calculator in Java\n<.package>\n<description>\n\tMath logic for the calculator\n<.description>\n<keywords>\n\tmath\n<.keywords>\n*/\n\npublic class Fraction{\n\tprivate int numerator, denominator;\n\n\tpublic Fraction(int n, int d)\n\t{\n\t\tnumerator = n;\n\t\tdenominator = d;\n\t}\n\t\n\tpublic int getN ( )\n\t{\n\t\treturn numerator;\n\t}\n\t\n\tpublic int getD ( )\n\t{\n\t\treturn denominator;\n\t}\n\t\n\t//Multiplies fractions 'f' and 's', returns result\n\tpublic static Fraction multiply ( Fraction f, Fraction s )\n\t{\n\t\treturn new Fraction((f.getN() * s.getN()),(f.getD() * s.getD()));\n\t}\n\t\n\t//Adds fractions 'f' and 's', does not find common denominator, returns result\n\tpublic static Fraction add ( Fraction f, Fraction s )\n\t{\n\t\treturn new Fraction((f.getN() * s.getD()) + (s.getN() * f.getD()),f.getD() * s.getD());\n\t}\n\t\n\t//Divides fraction 'f' by fraction 's', returns result\n\tpublic static Fraction divide ( Fraction f, Fraction s )\n\t{\n\t\treturn new Fraction((f.getN() * s.getD()),s.getN() * f.getD());\n\t}\n\t\n\t//Subtracts fraction 's' from 'f', returns result\n\tpublic static Fraction subtract ( Fraction f, Fraction s )\n\t{\t\n\t\treturn new Fraction((f.getN() * s.getD()) - (s.getN() * f.getD()),f.getD() * s.getD());\n\t}\n\t\n\t//Returns true if first fraction is less than second fraction\n\tpublic static boolean lessThan ( Fraction f, Fraction s )\n\t{\n\t\treturn (((double)f.getN()/(double)f.getD()) < ((double)s.getN()/(double)s.getD()));\n\t}\n\t\n\t//Returns true if first fraction is greater than second fraction\n\tpublic static boolean greaterThan ( Fraction f, Fraction s )\n\t{\n\t\treturn (((double)f.getN()/(double)f.getD()) > ((double)s.getN()/(double)s.getD()));\n\t}\n\t\n\t//Returns true if fractions are equal\n\tpublic static boolean equalTo ( Fraction f, Fraction s )\n\t{\n\t\treturn (((double)f.getN()/(double)f.getD()) == ((double)s.getN()/(double)s.getD()));\n\t}\n}\t\t	B:\\Portfolio\\CIS225 - Project 2	8	2
36	2014-11-29 16:18:36	2014-11-29 13:49:06	lvl_5.c	Executes the level 5 requirements of the project	/*\n<package>\n\tC Project 1 - swen250\n<.package>\n<description>\n    Executes the level 5 requirements of the project\n<.description>\n<keywords><.keywords>\n*/\n\nint execute_lvl_5() {\n    execute_lvl_2() ;\n}\n	B:\\Portfolio\\CProject1\\lvl	12	4
19	2014-11-29 16:02:34	2014-11-29 15:01:17	fractionCalculator.java	Logic controller for the calculator	/*\n<package>\n\tGUI Calculator in Java\n<.package>\n<description>\n    Logic controller for the calculator\n<.description>\n<keywords>\n\tcontroller, calculator logic\n<.keywords>\n*/\n\nimport java.util.*;\n\npublic class fractionCalculator{\n\tprivate Fraction frac1, frac2, rFrac;\n\tprivate int operator;\n\tprivate String result, inline;\n\t\n\tpublic fractionCalculator( String s )\n\t{\n\t\tinline = s;\n\t\tString[] e, \n\t\t\t\t\tf1, \n\t\t\t\t\tf2;\n\t\t\n\t\te = s.split(" ");  //Splits string from inputWin text field into fractions and operation\n\t\t\n\t\t//Create arrays of fraction values\n\t\tf1 = e[0].split("/"); \t\t\n\t\tf2 = e[2].split("/"); \n\t\t\n\t\toperator = (int)e[1].charAt(0); //Set ASCII value of operand to 'operator'\n\t\t\tif (e[1].length() == 2) //If Operand is 2 characters long...\n\t\t\t\toperator += (int)e[1].charAt(1); //Adds ASCII value of second character to 'operator'\n\t\t\n\t\t//Create fraction objects from strings\n\t\tfrac1 = new Fraction(Integer.parseInt(f1[0]),Integer.parseInt(f1[1]));\n\t\tfrac2 = new Fraction(Integer.parseInt(f2[0]),Integer.parseInt(f2[1]));\n\t}\n\t\n\t//Checks for arithmetic operation, then executes and builds a return String\n\tpublic String getResult ( )\n\t{\n\t\tswitch(operator)\n\t\t{\n\t\t\t//*,+,/,- functions\n\t\t\t//*\n\t\t\tcase 42: rFrac = Fraction.multiply(frac1,frac2);\n\t\t\t\t\t\tresult = inline + " = " + rFrac.getN() + "/" + rFrac.getD(); \n\t\t\t\t\t\tbreak;\n\t\t\t//+\n\t\t\tcase 43: rFrac = Fraction.add(frac1,frac2);\n\t\t\t\t\t\tresult = inline + " = " + rFrac.getN() + "/" + rFrac.getD();\n\t\t\t\t\t\tbreak;\n\t\t\t///\n\t\t\tcase 47: rFrac = Fraction.divide(frac1,frac2);\n\t\t\t\t\t\tresult = inline + " = " + rFrac.getN() + "/" + rFrac.getD();\n\t\t\t\t\t\tbreak;\n\t\t\t//-\n\t\t\tcase 45: rFrac = Fraction.subtract(frac1,frac2);\n\t\t\t\t\t\tresult = inline + " = " + rFrac.getN() + "/" + rFrac.getD();\n\t\t\t\t\t\tbreak;\n\t\t\t\n\t\t\t//<,>,= functions\n\t\t\t//<\n\t\t\tcase 60: if (Fraction.lessThan(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is less than " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not less than " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t//>\n\t\t\tcase 62: if (Fraction.greaterThan(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is greater than " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not greater than " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t//=\n\t\t\tcase 61: if (Fraction.equalTo(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is equal to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not equal to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t//<=\n\t\t\tcase 121: if (Fraction.lessThan(frac1,frac2) || Fraction.equalTo(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is < or = to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not < or = to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t//=>\n\t\t\tcase 123: if (Fraction.greaterThan(frac1,frac2) || Fraction.equalTo(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is > or = to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not > or = to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\tresult = "0";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t}\n\t\treturn result;\n\t}\t\n}\n\t	B:\\Portfolio\\CIS225 - Project 2	8	2
20	2014-11-29 16:03:10	2014-11-29 15:01:17	makeFrame.java	Frame creator for the calculator GUI	/*\n<package>\n\tGUI Calculator in Java\n<.package>\n<description>\n\tFrame creator for the calculator GUI\n<.description>\n<keywords>\n\tframe, swing, gui\n<.keywords>\n*/\n\nimport java.awt.*;\nimport javax.swing.*;\nimport java.awt.event.*;\n\npublic class makeFrame extends JFrame{\n\t\t\n\t\tprivate JTextField outputWin = new JTextField();\n\t\tprivate JTextField inputWin = new JTextField();\n\t   \n\t\tprivate JMenuItem jmiCalc,\n\t\t\t\t\t\t\t\tjmiClear,\n\t\t\t\t\t\t\t\tjmiExit,\n\t\t\t\t\t\t\t\tAbout,\n\t\t\t\t\t\t\t\tInputInfo;\n\t\t\n\t\tprivate fractionCalculator fc1;\n\t\n\tpublic makeFrame ( )\n\t{\n\t\t//Create text fields for 'Enter Equation' and Input window\n\t\tJPanel p1 = new JPanel();\n\t\tJTextField eq = new JTextField("Enter Equation");\n\t\t\teq.setEditable(false);\n\t\t\t\tp1.setLayout(new GridLayout(2,2));\n\t\t\t\tp1.add(eq);\n\t\t\t\tp1.add(inputWin);\n\t\n\t\t//Create i/o text fields\n\t\tJTextField val = new JTextField("Value");\n\t\t\tval.setEditable(false);\n\t\t\toutputWin.setEditable(false);\n\t\t\t\tp1.add(val);\n\t\t\t\tp1.add(outputWin);\n\t\t\n\t\t//Create action buttons panel\n\t\tJPanel p2 = new JPanel();\n\t\tJButton calculate = new JButton("Calculate");\n\t\tJButton clear = new JButton("Clear");\n\t\t\tp2.setLayout(new GridLayout(1,2));\n\t\t\tp2.add(calculate);\n\t\t\tp2.add(clear);\n\t\t\n\t\t//Add panels to the frame\n\t\tadd(p1, BorderLayout.CENTER);\n\t\tadd(p2, BorderLayout.SOUTH);\n\t\t\n\t\t//Create Menus\n\t\tJMenuBar jmenuBar = new JMenuBar();\n\n      //Set menu bar to the frame\n      setJMenuBar(jmenuBar);\n\n      //Create two menus labeled Operation and Help\n      JMenu fileMenu = new JMenu("Operation");\n      JMenu helpMenu = new JMenu("Help");\n      \tjmenuBar.add(fileMenu);\n      \tjmenuBar.add(helpMenu);\n\n    \t//Create items for 'Operations' menu\n      fileMenu.add(jmiCalc = new JMenuItem("Calculate", 'L'));\n      fileMenu.add(jmiClear = new JMenuItem("Clear", 'R'));\n      fileMenu.addSeparator();\n      fileMenu.add(jmiExit = new JMenuItem("Exit",'E'));\n\n      // Set keyboard shortcuts for 'Operations' menu\n\t   jmiCalc.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_L, ActionEvent.CTRL_MASK));\n\t   jmiClear.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_R, ActionEvent.CTRL_MASK));\n\t   jmiExit.setAccelerator(\n           KeyStroke.getKeyStroke(KeyEvent.VK_E, ActionEvent.CTRL_MASK));\n\t\t\n\t   //Add 'Help' menu items\t\n      helpMenu.add(About = new JMenuItem("About", 'T'));\n      helpMenu.add(InputInfo = new JMenuItem("Input Information", 'I'));\n\t \n\t   //Set keyboard shortcuts for 'Help' menu\n\t   About.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_T, ActionEvent.CTRL_MASK));\n\t   InputInfo.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_I, ActionEvent.CTRL_MASK));\n\t\t\t  \n\t   //Create listeners for buttons\n\t\tButtonListener btlisten = new ButtonListener();\n\t\tcalculate.addActionListener(btlisten);\n\t\tclear.addActionListener(btlisten);\n\t\t\n\t   //Create listeners for menus\n\t\tjmiCalc.addActionListener(btlisten);\n      jmiClear.addActionListener(btlisten);\n      jmiExit.addActionListener(btlisten);\n\t\tAbout.addActionListener(btlisten);\n\t\tInputInfo.addActionListener(btlisten);\n\t\t\n\n\t}//End makeFrame constructor\n\t\n\tprivate void outPut(String s)\n\t{\n\t\toutputWin.setText(s);\n\t}\n\t\n\t//Inner class sets actions for each button pressed in GUI\n\tclass ButtonListener implements ActionListener\n\t{\n\t\tpublic void actionPerformed(ActionEvent e)\n\t\t{\n\t\t\tif (e.getActionCommand().equals("Calculate"))\n\t\t\t{\n\t\t\t\tif (inputWin.getText().length() != 9 && inputWin.getText().length() != 10){//Ensure input is of valid length\n\t\t\t\t\terrorMessage eM = new errorMessage();\n\t\t\t\t} else{\n\t\t\t\t\tFraction result;\n\t\t\t\t\tfc1 = new fractionCalculator(inputWin.getText());\t//Builds fractions and sets operation\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (fc1.getResult().equals("0")){\t//A zero is returned from getResult if there is an input error\n\t\t\t\t\t\t\terrorMessage eM = new errorMessage();\n\t\t\t\t\t\t} else {\t\n\t\t\t\t\t\t\toutPut(fc1.getResult());\t//Performs operation and outputs the result\n\t\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t} //End 'Calculate' algorithm\n\t\t\telse if (e.getActionCommand().equals("Clear"))\n\t\t\t{\n\t\t\t\toutputWin.setText("");\n\t\t\t\tinputWin.setText("");\n\t\t\t}\n\t\t\telse if (e.getActionCommand().equals("About"))\n\t\t\t{\n\t\t\t\taboutFrame af = new aboutFrame();\n\t\t\t}\n\t\t\telse if (e.getActionCommand().equals("Input Information"))\n\t\t\t{\n\t\t\t\tinputInfoFrame ii = new inputInfoFrame();\n\t\t\t}\n\t\t}//End actionPerformed\n\t}//End ButtonListener class\n\t\n\tpublic class aboutFrame extends JFrame\n\t{\n\t\tpublic aboutFrame ( )\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, "Performs the following operations between 2 fractions:" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"\\n*  /  +  -  <  >  =  <=  =>" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"\\n\\nWritten by Stephen Brewster",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"Fraction Calculator by Stephen Brewster",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t}\n\t}\n\t\n\tpublic class inputInfoFrame extends JFrame\n\t{\n\t\tpublic inputInfoFrame ( )\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, "Input must be in the format:\\n  1/2 * 2/3" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"\\nA space is required between the operands and operation.",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"Input Information",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t}\n\t}\n\t\n\tpublic class errorMessage extends JFrame\n\t{\n\t\tpublic errorMessage( )\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, "Input Error: see Help / Input Information",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"Input Error",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\t\t\t\n\t\t}\n\t}\t\n}//End makeFrame Class	B:\\Portfolio\\CIS225 - Project 2	8	2
21	2014-11-29 16:05:34	2014-11-29 15:01:17	DataBase.java	Class for database interaction using JDBC	/*\n<package>\n\tJDBC Database\n<.package>\n<description>\n    Class for database interaction using JDBC\n<.description>\n<keywords>\n\tjdbc, database, sql\n<.keywords>\n*/\n\nimport java.sql.*;\nimport java.io.*;\nimport java.util.*;\nimport javax.swing.*;\n\nclass DataBase\n{\n   private Connection conn;\n   private Statement stat;\n\t\n\t//Constructor\n\tpublic DataBase(String pfile) throws SQLException, IOException\n\t{\n\t\tconn = getConnection(pfile);\n\t\tstat = conn.createStatement();\t\n\t}\n\t\t\n\t//Creates a connection from the properties file for the database\n\tpublic Connection getConnection(String pfile)\n           throws SQLException, IOException\n   {\n \t  Properties props   = new Properties();\n\t  FileInputStream in = new FileInputStream(pfile);\n\t  \n\t  props.load(in);\n     in.close();\n\n     String drivers = props.getProperty("jdbc.drivers");\n     \n\t  if (drivers != null)\n     \t\tSystem.setProperty("jdbc.drivers", drivers);\n   \n\t  String url = props.getProperty("jdbc.url");\n     String username = props.getProperty("jdbc.username");\n     String password = props.getProperty("jdbc.password");\n\n     return\n  \t\t   DriverManager.getConnection(url, username, password);\n   }//end getConnection\n\t\n\t//Adds a table to the database\n\tpublic void createTable(String tName, String fields) throws SQLException\n\t{\n\t\tString cmd = "";\n\t\tremoveTable(tName);\n\n      cmd = "CREATE TABLE " + tName + " (" + fields + ")";\n\n      stat = conn.createStatement();\n\t\tstat.execute(cmd);\n\n    }//end CreateTable\n\t \n\t //Delets a table from the database\n\t public void removeTable(String tName) throws SQLException\n\t {\n\t \tString cmd = "";\n\t\ttry\n\t\t{\n\t\t\tcmd = "DROP TABLE " + tName;\n\t\t\tstat = conn.createStatement();\n\t\t\tstat.execute(cmd);\n      }\n\t\tcatch ( SQLException e)\n\t\t{\n\t\t\n\t\t}\n\t }\n\t \t\n\t //Recieves strings for table name, fields, and values to be inserted\n\t //A query statement is generated from the passed strings and executes\n\t public void insertDataToTable(String tName, String fields, String values)\n\t {\n\t    String query;\n \t    ResultSet result = null;\n\n       try\n\t\t {\n\t\t\tquery = "INSERT INTO " + tName + "(" + fields + ") VALUES " + "(" + values + ")";\n\t\n\t\t\tint i = stat.executeUpdate (query);\n\t\t }\n\t\t catch ( SQLException e)\n\t\t {\n\n\t\t\t   System.out.println("in load table  -->"+ e.toString());\n\n\t\t\t   if (e.toString().toLowerCase().endsWith(\n\t\t\t\t\t\t\t\t\t\t\t"no resultset was produced"))\n\n\t\t\t\t\tSystem.out.println( "Data Was inserted correctly!!!!");\n\n\t\t\t   else\n\n\t\t\t\t\tSystem.out.println( "Error in Inserting data!!!!!");\n       }\n    }  // end insertDataToTable\n\n\t //Recieves a query, executes, and prints the results\n\t public void executeQuery(String query, int fieldNum)\n\t {\n\t \tSystem.out.println("*** Result for the following query ***\\n" + query + "\\n");\n\t\t\n\t \ttry\n\t\t{\n\t \t\tResultSet result = stat.executeQuery(query);\n\t\t\twhile (result.next())\n\t\t\t{\n\t\t\t\tfor(int i = 1; i <= fieldNum; i++)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.print(result.getString(i) + "\\t");\n\t\t\t\t}\n\t\t\t\tSystem.out.print("\\n");\n\t\t\t}\n\t\t  System.out.println();\n\t\t}\n\t   catch ( SQLException e)\n\t\t{\n\t\t\tSystem.out.println("Error with query");\n\t\t}\n\n\t }\n\t\n\t//Outputs meta data for the table\n\tpublic void showTablesInfo(String tableName)\n   {\n   \ttry\n      {\n\t\t\tStatement stat2 = conn.createStatement();\n      \tResultSet rs = stat2.executeQuery("SELECT * FROM " + tableName);\n      \tResultSetMetaData rsmd = rs.getMetaData();\n\n      \tSystem.out.println("Number of columns in " + tableName + ":"\n      \t                     +rsmd.getColumnCount());\n      \tfor (int i = 1; i <= rsmd.getColumnCount(); i++)\n      \t{\n         \tString columnName = rsmd.getColumnLabel(i);\n         \tint columnWidth  = rsmd.getColumnDisplaySize(i);\n\n\n         \tSystem.out.print( "Column Name: " + columnName );\n            System.out.println( "\\t Column Width: " + columnWidth );\n\n         }\n      \trs.close();\n\t\t}\n      catch(SQLException e)\n      {\n\t\t  JOptionPane.showMessageDialog(null, "in showTableInfo --> "+e);\n\t  }\n\t  System.out.println();\n   }//End showTablesInfo\t \n\t \n\t //Closes the database\n\t public void close() throws SQLException, IOException\n\t {\n\t\t stat.close();\n\t\t conn.close();\n    }\n}\t \n\n\t\t	B:\\Portfolio\\CIS225 - Project 3	9	2
22	2014-11-29 16:08:44	2014-11-29 15:01:17	Project3.java	First database application! Basic table creation and interaction	/*\n<package>\n\tDatabase Interaction - Project 1\n<.package>\n<description>\n    First database application! Basic table creation and interaction\n<.description>\n<keywords>\n\tdatabase, sql, jdbc\n<.keywords>\n*/\n\nimport java.io.*;\nimport java.sql.*;\n\nclass Project3\n{\n\tpublic static void main (String args[])\n\t{\n\t\tFileReader theFile;\n  \t   BufferedReader fileIn = null;\n  \t\tString oneLine;\n\t\tString splitter[];\n\t\t\n\t\ttry\n\t   {\n\t\t //Create database connection\n\t\t DataBase db = new DataBase("dbprops2.dat");\n\t\t  \n\t\t  //Create the two tables\n\t\t  db.createTable("Employees","EmployeeID INTEGER, " +\n\t\t  \t\t\t\t\t  "FirstName VARCHAR(10), " +\n\t\t\t\t\t\t\t  "LastName VARCHAR(10), " +\n\t\t\t\t\t\t\t  "Department VARCHAR(20), " +\n\t\t\t\t\t\t\t  "Hours INTEGER");\n\t\t\t\t\t\t\t  \n\t\t  db.createTable("Location","Department VARCHAR(20), " +\n\t\t                 "City VARCHAR(20), " +\n\t\t\t\t\t\t\t  "State CHAR(2)");\t\n\t\t\n//**** Employee Insertion Code***********\n\n\t\t  //Set up the 'Employees' file for data input\n\t\t  theFile = new FileReader( "Table1.txt" );\n        fileIn = new BufferedReader( theFile );\n\t\t\t\t\n\t\t  String values = "";\n\t\t  String tName = "Employees";\n\t\t  String fields = "EmployeeID, FirstName, LastName, Department, Hours";\n            \t\n\t     //Loop to read in and insert data to the 'Employees' table\n\t\t  while( ( oneLine = fileIn.readLine( ) ) != null )\n        {\n\t   \t\tsplitter = oneLine.split(",");\n\t\t\t\t\t\t\n\t\t\t\tfor (int i = 0; i < splitter.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvalues += splitter[i];\n\t\t\t\t\tif(i != splitter.length - 1)\n\t\t\t\t\t\tvalues += ",";\n\t\t\t\t}\n\n\t\t\t\tdb.insertDataToTable(tName, fields, values);\n\t\t\t\tvalues = ""; //Reset data string for next line of input\n      \t}\n\t\t\t\n//******** Location Insertion Code ***********\n\t\t\t\n\t\t  //Insert data from Table2.txt into the 'Location' table\n  \t\t  theFile = new FileReader( "Table2.txt" );\n        fileIn = new BufferedReader( theFile );\n\n\t\t  values = "";\n\t\t  tName = "Location";\n\t\t  fields = "Department, City, State";\n\t\t  \n\t\t  //Loop to read in and insert data to the 'Location' table\n\t\t  while( ( oneLine = fileIn.readLine( ) ) != null )\n        {\n\t   \t\tsplitter = oneLine.split(",");\n\t\t\t\t\t\t\n\t\t\t\tfor (int i = 0; i < splitter.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvalues += splitter[i];\n\t\t\t\t\tif(i != splitter.length - 1)\n\t\t\t\t\t\tvalues += ",";\n\t\t\t\t}\n\n\t\t\t\tdb.insertDataToTable(tName, fields, values);\n\t\t\t\tvalues = ""; //Reset data string for next line of input\n      \t}\n\n//********** Output for the inserted data *********\n\t\t\tdb.showTablesInfo("Employees");\n\t\t\tdb.showTablesInfo("Location");\n\t\t\tdb.executeQuery("SELECT * FROM Employees",5);\n\t\t\tdb.executeQuery("SELECT * FROM Location",3);\n\t\t\tdb.executeQuery("SELECT * FROM Employees WHERE Employees.Department = " +\n\t\t\t\t\t\t\t\t "'Computer';",5);\t\n\t\t\tdb.executeQuery("SELECT * FROM Employees WHERE Employees.Department = " +\n\t\t\t\t\t\t\t\t "'Computer' and Employees.Hours < 40;",5);\n\t\t\tdb.executeQuery("SELECT Employees.EmployeeID, Employees.FirstName, " +\n\t\t\t\t\t\t\t\t "Employees.LastName, Employees.Hours, Location.City FROM " +\n\t\t\t\t\t\t\t\t "Employees, Location WHERE Employees.Department = " +\n\t\t\t\t\t\t\t\t "Location.Department AND Location.City = 'Brighton';", 5);\t\t\n\t\t\tdb.close();\t//close database\t\t\t\t\t\t  \t\t\t\t  \n\t  }\n\t  //Catch and print any exceptions\n\t  catch (SQLException ex)\n\t  {\n\t\t while (ex != null)\n\t\t {\n\t\t\tex.printStackTrace();\n\t\t\tex = ex.getNextException();\n\t\t }\n\t  }\n\t  catch (IOException ex)\n\t  {\n\t\t ex.printStackTrace();\n\t  }\n\t  catch (Exception ex)\n\t  {\n\t  \t\t ex.printStackTrace();\n\t  }\n\t\t\n\t}//end main\n}//end class\n\t\t	B:\\Portfolio\\CIS225 - Project 3	10	2
23	2014-11-29 16:13:31	2014-11-29 15:01:17	CalcClient.java	Client for the Calculator Server, connects to the server and sends calculation requests, receives results	/*\n<package>\n\tCalculator Server\n<.package>\n<description>\n    Client for the Calculator Server, connects to the server and sends calculation requests, receives results\n<.description>\n<keywords>\n\tclient, socket, io\n<.keywords>\n*/\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.awt.*;\nimport javax.swing.*;\n\nimport java.io.EOFException;\nimport java.io.IOException;\n\npublic class CalcClient\n{\n\tprivate Socket connectToServer;\n\tprivate BufferedReader fromServer;\n\tprivate PrintWriter toServer;\n\tprivate String calcLine = "";\n\tprivate boolean flag = false;\n\t\n\tpublic CalcClient()\n   {\n\t\ttry\n\t\t{\n\t\t//Establish connection to server\n\t\tconnectToServer = new Socket("localhost",8000);\n\t\t\n\t\t//Establish input from server\n\t\tfromServer = new BufferedReader(new InputStreamReader\n                  (connectToServer.getInputStream()));\n\t\t//Establish output to server\n\t\ttoServer = new PrintWriter\n\t\t\t\t\t  (connectToServer.getOutputStream(), true);\n\t}//End try\n   catch(IOException e1)\n   {\n      System.err.println("Client died with exception: " + e1.toString());\n      System.exit(0);\n   }\n\n}//E - CalcClient()\n\n\tpublic String setCalcLine ( String s )\n\t{\n\t\ttry\n\t\t{\n\t\t\ttoServer.println(s);\n\t\t\ttoServer.flush();\n\t\t\treturn fromServer.readLine();\n\t\t}\n\t\tcatch(IOException e1)\n\t\t{\n\t\t\treturn "Error";\n\t\t}\n\t}\n\t\n\tpublic void close()\n\t{\n\t\ttry\n\t\t{\n\t\t\ttoServer.close();    //Close output stream\n\t\t\tfromServer.close();  // Close input stream\n\t\t   connectToServer.close(); //Close socket\n\t\t} \n      catch (IOException ioException)\n      {\n\t\t\tioException.printStackTrace();\n\t   }\n\t}\t\n}//E - CalcClient Class\n\n	B:\\Portfolio\\CIS225 - Project 4	11	2
24	2014-11-29 16:14:38	2014-11-29 15:01:17	CalcServer.java	Server for the Calculator Server application, establishes connections with CalcClients, receives requests, responds with results	/*\n<package>\n\tCalculator Server\n<.package>\n<description>\n\tServer for the Calculator Server application, establishes connections with CalcClients, receives requests, responds with results\n<.description>\n<keywords>\n\tserver, socket, io, threads\n<.keywords>\n*/\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class CalcServer extends JFrame\n{\n   private Socket connectToClient;\n\tprivate JTextArea servWin = new JTextArea();\n\t\n\t \tpublic static void main(String[] args) \n\t \t{\n  \t\t\tnew CalcServer();\n   \t}\n\t\t\n\tpublic CalcServer()\n\t{\n\t\t//Create GUI\n\t\tsetLayout(new BorderLayout());\n      add(new JScrollPane(servWin), BorderLayout.CENTER);\n      setTitle("Server");\n      setSize(500, 300);\n      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      setVisible(true);\n\t\t\n\t\tint clientID = 1;\n\t\t\n\t\ttry\n\t\t{\n\t\t\t//Create socket for connection\n\t\t\tServerSocket socket = new ServerSocket(8000);\n\t\t\tservWin.append("Server started at " + new Date() + '\\n');\n\t\t\t\n   \t\t//Primary loop for input/output      \n\t\t\tboolean cont = true;\n         while(cont == true)\n         {\t\n\t   \t\t//Listen for client connection\n\t\t\t\tconnectToClient = socket.accept();\t\n\t\t\t\t//Output connection information in server GUI\n\t\t\t\tservWin.append("\\nNew connection established at " + new Date() +\n\t\t\t\t\t\t\t\t"\\nUser UserID: " + clientID +\n\t\t\t\t\t\t\t\t"\\nUser IP: " + connectToClient.getInetAddress());\n\t\t\t\t\n\t\t\t\t//Create new thread\n\t\t\t\tProcessNewTask newTask = new ProcessNewTask(connectToClient, clientID);\n\t\t\t\t\n\t\t\t\t//Start new thread\n\t\t\t\tnew Thread(newTask).start();\n\t\t\t\t\n\t\t\t\tclientID++;\n\t\t\t}//E - while{}\n\t\t}//E - try{}\n\t   catch(IOException ex)\n\t\t{\n  \t\t    System.err.println(ex);\n      }\t\n\t}//E - CalcServer\t\n\t\n//THREAD task method, establishes/processes each client\t\nclass ProcessNewTask implements Runnable\n{\n\tprivate Socket serverSock;\n\tprivate int clientID;\n\tString lineIn;\n\t\n\t//Constructor for the thread task\n\tpublic ProcessNewTask(Socket socket, int id)\n\t{\n\t\tserverSock = socket;\n\t\tclientID = id;\n\t}\n\t\n\t//Contains connectivity and processing code\n\tpublic void run()\n\t{\n\t\ttry\n\t\t{\n\t\t\t//Establish INPUT stream from client\n\t      BufferedReader fromClient = new BufferedReader(new InputStreamReader(\n\t\t\t\t\t\t\t  \t\t\t\t\t serverSock.getInputStream()));\n\t\t\t//Establish OUTPUT stream to client\n\t\t\tPrintWriter toClient = new PrintWriter(\n   \t\t               \t     serverSock.getOutputStream(), true);\t\t\n\t\t\n\t\t\t//Primary COMMUNICATION loop\n\t\t\twhile(true)\n\t\t\t{\t\n\t\t\t\t//Recieves input from client\n\t\t\t\tlineIn = fromClient.readLine();\n\t\t\t\n\t\t\t\t//Calculates result and sends to client\t\t\t\n\t\t\t\ttoClient.println(processInput(lineIn)); \n\t\t\t  \n\t\t\t \t//Output to server window  \n\t\t\t\tservWin.append("\\n" + lineIn + " : recieved from ClientID: " + clientID);\n\t\t\t\tservWin.append("\\nResult: " + processInput(lineIn) + " returned to client " + clientID); \n\t\t\t\t\n\t\t\t}//E - while{}\n\t\t}//E - try[]\n      catch(IOException e) \n\t\t{\n        servWin.append("\\nConnection Error: ClientID = " + clientID);\n\t\t}\n\t}//E - run()\n\t\t\n\t\t//Method for processing fraction result\n\t\tprivate String processInput( String s)\n\t\t{\n\t\t\tFraction result;\n\t\t   fractionCalculator fc1 = new fractionCalculator(s);\t//Builds fractions and sets operation\n\t\t\t\n\t\t\t//A double-zero is returned from getResult if there is an input error\t\t\t\n\t\t\tif (fc1.getResult().equals("00"))\n\t\t\t{\t\n\t\t\t\treturn "Input Error";\n\t\t\t} \n\t\t\telse \n\t\t\t{\t\n\t\t\t\treturn fc1.getResult(); //Performs operation and outputs the result\n  \t  \t   }\t\n\t\t}//E - processInput()\t\n\t}//E - ProcessNewTask{}\n}//End Class\t\t\t  \t\t\t\t	B:\\Portfolio\\CIS225 - Project 4	11	2
25	2014-11-29 16:25:12	2014-11-29 15:01:17	calculatorMain.java	Starts up the Calculator Server application	/*\n<package>\n\tCalculator Server\n<.package>\n<description>\n    Starts up the Calculator Server application\n<.description>\n<keywords>\n\tframe, main\n<.keywords>\n*/\n\nimport java.awt.*;\nimport javax.swing.*;\n\nclass calculatorMain{\t\n\t\n\tpublic static void main(String[] args) {\n\t makeFrame frame = new makeFrame();\n    frame.setTitle("Fraction Calculator");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(300,200);\n    frame.setVisible(true);\n\t}\n}\n\t	B:\\Portfolio\\CIS225 - Project 4	11	2
26	2014-11-29 16:26:00	2014-11-29 15:01:17	Fraction.java	Performs calculator logic for the Calculator Server	/*\n<package>\n\tCalculator Server\n<.package>\n<description>\n    Performs calculator logic for the Calculator Server\n<.description>\n<keywords>\n\tcalculator logic\n<.keywords>\n*/\n\npublic class Fraction{\n\tprivate int numerator, denominator;\n\n\tpublic Fraction(int n, int d)\n\t{\n\t\tnumerator = n;\n\t\tdenominator = d;\n\t}\n\t\n\tpublic int getN ( )\n\t{\n\t\treturn numerator;\n\t}\n\t\n\tpublic int getD ( )\n\t{\n\t\treturn denominator;\n\t}\n\t\n\t//Multiplies fractions 'f' and 's', returns result\n\tpublic static Fraction multiply ( Fraction f, Fraction s )\n\t{\n\t\treturn new Fraction((f.getN() * s.getN()),(f.getD() * s.getD()));\n\t}\n\t\n\t//Adds fractions 'f' and 's', does not find common denominator, returns result\n\tpublic static Fraction add ( Fraction f, Fraction s )\n\t{\n\t\treturn new Fraction((f.getN() * s.getD()) + (s.getN() * f.getD()),f.getD() * s.getD());\n\t}\n\t\n\t//Divides fraction 'f' by fraction 's', returns result\n\tpublic static Fraction divide ( Fraction f, Fraction s )\n\t{\n\t\treturn new Fraction((f.getN() * s.getD()),s.getN() * f.getD());\n\t}\n\t\n\t//Subtracts fraction 's' from 'f', returns result\n\tpublic static Fraction subtract ( Fraction f, Fraction s )\n\t{\t\n\t\treturn new Fraction((f.getN() * s.getD()) - (s.getN() * f.getD()),f.getD() * s.getD());\n\t}\n\t\n\t//Returns true if first fraction is less than second fraction\n\tpublic static boolean lessThan ( Fraction f, Fraction s )\n\t{\n\t\treturn (((double)f.getN()/(double)f.getD()) < ((double)s.getN()/(double)s.getD()));\n\t}\n\t\n\t//Returns true if first fraction is greater than second fraction\n\tpublic static boolean greaterThan ( Fraction f, Fraction s )\n\t{\n\t\treturn (((double)f.getN()/(double)f.getD()) > ((double)s.getN()/(double)s.getD()));\n\t}\n\t\n\t//Returns true if fractions are equal\n\tpublic static boolean equalTo ( Fraction f, Fraction s )\n\t{\n\t\treturn (((double)f.getN()/(double)f.getD()) == ((double)s.getN()/(double)s.getD()));\n\t}\n}\t\t	B:\\Portfolio\\CIS225 - Project 4	11	2
27	2014-11-29 16:15:10	2014-11-29 15:01:17	fractionCalculator.java	Calculator logic for the Calculator Server application	/*\n<package>\n\tCalculator Server\n<.package>\n<description>\n\tCalculator logic for the Calculator Server application\n<.description>\n<keywords>\n\tcalculator logic\n<.keywords>\n*/\n\nimport java.util.*;\n\npublic class fractionCalculator{\n\tprivate Fraction frac1, frac2, rFrac;\n\tprivate int operator;\n\tprivate String result, inline;\n\t\n\tpublic fractionCalculator( String s )\n\t{\n\t\tinline = s;\n\t\tString[] e, \n\t\t\t\t\tf1, \n\t\t\t\t\tf2;\n\t\t\n\t\te = s.split(" ");  //Splits string from inputWin text field into fractions and operation\n\t\t\n\t\t//Create arrays of fraction values\n\t\tf1 = e[0].split("/"); \t\t\n\t\tf2 = e[2].split("/"); \n\t\t\n\t\toperator = (int)e[1].charAt(0); //Set ASCII value of operand to 'operator'\n\t\t\tif (e[1].length() == 2) //If Operand is 2 characters long...\n\t\t\t\toperator += (int)e[1].charAt(1); //Adds ASCII value of second character to 'operator'\n\t\t\n\t\t//Create fraction objects from strings\n\t\tfrac1 = new Fraction(Integer.parseInt(f1[0]),Integer.parseInt(f1[1]));\n\t\tfrac2 = new Fraction(Integer.parseInt(f2[0]),Integer.parseInt(f2[1]));\n\t}\n\t\n\t//Checks for arithmetic operation, then executes and builds a return String\n\tpublic String getResult ( )\n\t{\n\t\tswitch(operator)\n\t\t{\n\t\t\t//*,+,/,- functions\n\t\t\t//*\n\t\t\tcase 42: rFrac = Fraction.multiply(frac1,frac2);\n\t\t\t\t\t\tresult = inline + " = " + rFrac.getN() + "/" + rFrac.getD(); \n\t\t\t\t\t\tbreak;\n\t\t\t//+\n\t\t\tcase 43: rFrac = Fraction.add(frac1,frac2);\n\t\t\t\t\t\tresult = inline + " = " + rFrac.getN() + "/" + rFrac.getD();\n\t\t\t\t\t\tbreak;\n\t\t\t///\n\t\t\tcase 47: rFrac = Fraction.divide(frac1,frac2);\n\t\t\t\t\t\tresult = inline + " = " + rFrac.getN() + "/" + rFrac.getD();\n\t\t\t\t\t\tbreak;\n\t\t\t//-\n\t\t\tcase 45: rFrac = Fraction.subtract(frac1,frac2);\n\t\t\t\t\t\tresult = inline + " = " + rFrac.getN() + "/" + rFrac.getD();\n\t\t\t\t\t\tbreak;\n\t\t\t\n\t\t\t//<,>,= functions\n\t\t\t//<\n\t\t\tcase 60: if (Fraction.lessThan(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is less than " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not less than " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t//>\n\t\t\tcase 62: if (Fraction.greaterThan(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is greater than " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not greater than " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t//=\n\t\t\tcase 61: if (Fraction.equalTo(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is equal to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not equal to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t//<=\n\t\t\tcase 121: if (Fraction.lessThan(frac1,frac2) || Fraction.equalTo(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is < or = to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not < or = to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t//=>\n\t\t\tcase 123: if (Fraction.greaterThan(frac1,frac2) || Fraction.equalTo(frac1,frac2)){\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is > or = to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = frac1.getN() + "/" + frac1.getD() + \n\t\t\t\t\t\t\t" is not > or = to " + \n\t\t\t\t\t\t\tfrac2.getN() + "/" + frac2.getD();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\tresult = "00";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t}\n\t\treturn result;\n\t}\t\n}\n\t	B:\\Portfolio\\CIS225 - Project 4	11	2
28	2014-11-29 16:15:57	2014-11-29 15:01:17	makeFrame.java	GUI for the Calculator Server application, uses Swing	/*\n<package>\n\tCalculator Server\n<.package>\n<description>\n\tGUI for the Calculator Server application, uses Swing\n<.description>\n<keywords>\n\tswing, gui, frame\n<.keywords>\n*/\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.awt.*;\nimport javax.swing.*;\nimport java.awt.event.*;\n\n\npublic class makeFrame extends JFrame{\n\t\t\n\t\tprivate JTextField outputWin = new JTextField();\n\t\tprivate JTextField inputWin = new JTextField();\n\t   \n\t\tprivate JMenuItem jmiCalc,\n\t\t\t\t\t\t\t\tjmiClear,\n\t\t\t\t\t\t\t\tjmiExit,\n\t\t\t\t\t\t\t\tAbout,\n\t\t\t\t\t\t\t\tInputInfo;\n\t\t\n\t\tprivate fractionCalculator fc1;\n\t\tCalcClient CC;\n\t\n\tpublic makeFrame ( )\n\t{\n\t\tCC = new CalcClient();\n\t\t\n\t\t//Create text fields for 'Enter Equation' and Input window\n\t\tJPanel p1 = new JPanel();\n\t\tJTextField eq = new JTextField("Enter Equation");\n\t\t\teq.setEditable(false);\n\t\t\t\tp1.setLayout(new GridLayout(2,2));\n\t\t\t\tp1.add(eq);\n\t\t\t\tp1.add(inputWin);\n\t\n\t\t//Create i/o text fields\n\t\tJTextField val = new JTextField("Value");\n\t\t\tval.setEditable(false);\n\t\t\toutputWin.setEditable(false);\n\t\t\t\tp1.add(val);\n\t\t\t\tp1.add(outputWin);\n\t\t\n\t\t//Create action buttons panel\n\t\tJPanel p2 = new JPanel();\n\t\tJButton calculate = new JButton("Calculate");\n\t\tJButton clear = new JButton("Clear");\n\t\t\tp2.setLayout(new GridLayout(1,2));\n\t\t\tp2.add(calculate);\n\t\t\tp2.add(clear);\n\t\t\n\t\t//Add panels to the frame\n\t\tadd(p1, BorderLayout.CENTER);\n\t\tadd(p2, BorderLayout.SOUTH);\n\t\t\n\t\t//Create Menus\n\t\tJMenuBar jmenuBar = new JMenuBar();\n\n      //Set menu bar to the frame\n      setJMenuBar(jmenuBar);\n\n      //Create two menus labeled Operation and Help\n      JMenu fileMenu = new JMenu("Operation");\n      JMenu helpMenu = new JMenu("Help");\n      \tjmenuBar.add(fileMenu);\n      \tjmenuBar.add(helpMenu);\n\n    \t//Create items for 'Operations' menu\n      fileMenu.add(jmiCalc = new JMenuItem("Calculate", 'L'));\n      fileMenu.add(jmiClear = new JMenuItem("Clear", 'R'));\n      fileMenu.addSeparator();\n      fileMenu.add(jmiExit = new JMenuItem("Exit",'E'));\n\n      // Set keyboard shortcuts for 'Operations' menu\n\t   jmiCalc.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_L, ActionEvent.CTRL_MASK));\n\t   jmiClear.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_R, ActionEvent.CTRL_MASK));\n\t   jmiExit.setAccelerator(\n           KeyStroke.getKeyStroke(KeyEvent.VK_E, ActionEvent.CTRL_MASK));\n\t\t\n\t   //Add 'Help' menu items\t\n      helpMenu.add(About = new JMenuItem("About", 'T'));\n      helpMenu.add(InputInfo = new JMenuItem("Input Information", 'I'));\n\t \n\t   //Set keyboard shortcuts for 'Help' menu\n\t   About.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_T, ActionEvent.CTRL_MASK));\n\t   InputInfo.setAccelerator(\n\t        KeyStroke.getKeyStroke(KeyEvent.VK_I, ActionEvent.CTRL_MASK));\n\t\t\t  \n\t   //Create listeners for buttons\n\t\tButtonListener btlisten = new ButtonListener();\n\t\tcalculate.addActionListener(btlisten);\n\t\tclear.addActionListener(btlisten);\n\t\t\n\t   //Create listeners for menus\n\t\tjmiCalc.addActionListener(btlisten);\n      jmiClear.addActionListener(btlisten);\n      jmiExit.addActionListener(btlisten);\n\t\tAbout.addActionListener(btlisten);\n\t\tInputInfo.addActionListener(btlisten);\n\t}//End makeFrame constructor\n\t\n\tprivate void outPut(String s)\n\t{\n\t\toutputWin.setText(s);\n\t}\n\t\n\t//Inner class sets actions for each button pressed in GUI\n\tclass ButtonListener implements ActionListener\n\t{\n\t\tpublic void actionPerformed(ActionEvent e)\n\t\t{\n\t\t\tif (e.getActionCommand().equals("Calculate"))\n\t\t\t{\n\t\t\t\tif (inputWin.getText().length() != 9 && inputWin.getText().length() != 10){//Ensure input is of valid length\n\t\t\t\t\terrorMessage eM = new errorMessage();\n\t\t\t\t} else{\n\t\t\t\t\toutPut(CC.setCalcLine(inputWin.getText()));\n \t\t\t\t}\n\t\t\t} //End 'Calculate' algorithm\n\t\t\telse if (e.getActionCommand().equals("Clear"))\n\t\t\t{\n\t\t\t\toutputWin.setText("");\n\t\t\t\tinputWin.setText("");\n\t\t\t}\n\t\t\telse if (e.getActionCommand().equals("About"))\n\t\t\t{\n\t\t\t\taboutFrame af = new aboutFrame();\n\t\t\t}\n\t\t\telse if (e.getActionCommand().equals("Input Information"))\n\t\t\t{\n\t\t\t\tinputInfoFrame ii = new inputInfoFrame();\n\t\t\t}\n\t\t}//End actionPerformed\n\t}//End ButtonListener class\n\t\n\tpublic class aboutFrame extends JFrame\n\t{\n\t\tpublic aboutFrame ( )\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, "Performs the following operations between 2 fractions:" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"\\n*  /  +  -  <  >  =  <=  =>" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"\\n\\nWritten by Stephen Brewster",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"Fraction Calculator by Stephen Brewster",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t}\n\t}\n\t\n\tpublic class inputInfoFrame extends JFrame\n\t{\n\t\tpublic inputInfoFrame ( )\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, "Input must be in the format:\\n  1/2 * 2/3" +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"\\nA space is required between the operands and operation.",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"Input Information",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t}\n\t}\n\t\n\tpublic class errorMessage extends JFrame\n\t{\n\t\tpublic errorMessage( )\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, "Input Error: see Help / Input Information",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"Input Error",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\t\t\t\n\t\t}\n\t}\n}//End makeFrame Class	B:\\Portfolio\\CIS225 - Project 4	11	2
29	2014-12-08 17:20:40	2014-12-07 15:21:52	health.c	Primary class for the Health Monitor System (C Project 1 - swen250)	/*\n<package>\n\tC Project 1 - swen250\n<.package>\n<description>\n    Primary class for the Health Monitor System (C Project 1 - swen250)\n<.description>\n<keywords>\n    csv, stdin, pointers\n<.keywords>\n*/\n\n/*\n* Health Monitoring System\n*/\n#include <stdio.h>\n#include <ctype.h>\n#include "header.h"\n#include "util.c"\n#include "lvl/lvl_1.c"\n#include "lvl/lvl_2.c"\n#include "lvl/lvl_3.c"\n#include "lvl/lvl_4.c"\n#include "lvl/lvl_5.c"\n\n/*Health records for all patients defined here.\n* The variable record is visible to all functions\n* in this file, i.e. it is global.\n*/\nChart record[MAXPATIENTS];\t\n\nvoid main(int argc, char **argv){\n    int i, j;\n\n    /* initialize health data records for each patient */\n\n    for( i=0; i < MAXPATIENTS; i++ ){\n        record[i].id = i + 1;\n        for( j=0; j < MAXTYPES; j++ ){\n            record[i].buffer[j].start = 0;\n            record[i].buffer[j].end = 0;\n        }\n    }\n\n    printf("Welcome to the Health Monitoring System\\n\\n");\n\n/*\n*  YOUR CODE GOES HERE:\n*  (1) Read a csv line of health data from stdin \n*  (2) Parse csv line into appropriate fields\n*  (3) Store health data in patient record or print if requested\n*  (4) Continue (1)-(3) until EOF\n*/\n    //Determine level to execute using option\n    int c ;\n    while((c = getopt(argc, argv, "12345")) != -1 ) {\n        switch(c) {\n            case 49:\n                execute_lvl_1() ;\n                break ;\n            case 50:\n                execute_lvl_2() ;\n                break ;\n            case 51:\n                execute_lvl_3() ;\n                break ;\n            case 52:\n                execute_lvl_4() ;\n                break ;\n            case 53:\n                execute_lvl_5() ;\n                break ;\n            default:\n                break ;\n        }\n    }\n\n    /* If health is run directly and no arguments are passed:\n     * execute highest level\n    */\n    if(argc == 1) {\n        execute_lvl_5() ;\n    }\n\n    printf("\\nEnd of Input\\n");\n}\n	B:\\Portfolio\\CProject1	12	4
30	2014-11-29 14:31:33	2014-11-29 13:49:06	util.c	Utility methods for C Project 1	/*\n<package>\n\tC Project 1 - swen250\n<.package>\n<description>\n    Utility methods for C Project 1\n<.description>\n<keywords>\n    csv, stdin, pointers\n<.keywords>\n*/\n\n/*\n * Utilities for health.c\n *\n*/\n\n/* Parses a line and returns the end char to test for EOF */\n\nchar parse_health_line(struct Element *line, int *id, int *cmd) {\n    char ch ;\n    // read in patient id\n    scanf("%d", id) ;\n    ch = getchar() ;\n\n    // read in timestamp, null terminate it and get comma\n    scanf("%8c", line->timestamp) ;\n    line->timestamp[8] = '\\0' ;\n    ch = getchar() ;\n\n    // read in cmd code and comma\n    scanf("%d", cmd) ;\n    ch = getchar() ;\n\n    // read in value and end character\n    scanf("%d", &line->value) ;\n    ch = getchar() ;\n\n    return ch ;\n}\n\n/** Prints the health data for the chart in the order given **/\n\nvoid print_health_data(struct Chart chart) {\n    printf("%s\\n", HR) ;\n    printf("Readings for Patient ID = %d are:\\n", chart.id) ;\n\n    // Loop through each type and print the readings stored\n    int i, j ;\n    for(i = 0; i < MAXTYPES; i++) {\n        int end = chart.buffer[i].end ;\n        int start = chart.buffer[i].start ;\n        char* statPrint = get_stat_string(i+1) ;\n\n        // heading for the stat\n        printf("%s:\\n", statPrint) ;\n\n        // start == end only when no readings were given\n        if(start == end) {\n            printf("%s\\n", NONE) ;\n        }\n\n        // wrap through the buffer and print the readings\n        for( j = start; j != end; j=(j+1)%MAXREADINGS ) {\n            char* timestamp = chart.buffer[i].reading[j].timestamp ;\n            int value = chart.buffer[i].reading[j].value ;\n            if(i == 0) {\n                printf("%s: %.1f\\n", timestamp, (value/10.)) ;\n            } else {\n                printf("%s: %d\\n", timestamp, value) ;\n            }\n        }\n    }\n    printf("%s\\n", HR) ;\n}\n\n\n/* Determines the function of the command */\n\nchar* get_stat_string(int cmd) {\n    char* statPrint = "Default" ;\n    switch(cmd) {\n        case 1:\n            statPrint = "Temperature\\0" ;\n            break ;\n        case 2:\n            statPrint = "Heart Rate\\0" ;\n            break ;\n        case 3:\n            statPrint = "Systolic Pressure\\0" ;\n            break ;\n        case 4:\n            statPrint = "Diastolic Pressure\\0" ;\n            break ;\n        case 5:\n            statPrint = "Respirate Rate\\0" ;\n            break ;\n        case 6:\n            statPrint = "Print\\0" ;\n            break ;\n    }\n\n    return statPrint ;\n}\n\n/* Initializes a chart to default values */\n\nvoid initialize_chart(struct Chart *chart) {\n    int i, j ;\n    for(i = 0; i < MAXTYPES; i++) {\n        chart->buffer[i].start = 0 ;\n        chart->buffer[i].end = 0 ;\n    }\n}\n\n\n	B:\\Portfolio\\CProject1	12	4
31	2014-12-08 17:21:10	2014-11-29 13:49:06	verify.c	Unused test method intended to verify the results of the main program	/*\n<package>\n\tC Project 1 - swen250\n<.package>\n<description>\n\tUnused test method intended to verify the results of the main program\n<.description>\n<keywords>\n    file, unused\n<.keywords>\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main () {\n    FILE *fo ;\n    FILE *fe ;\n\n    fe = fopen("lvl/lvl_2_expected_output.txt", "r") ;\n    fo = fopen("log/test_log.txt", "r") ;\n\n    char ch_test ;\n    char ch_expected ;\n\n    do {\n        ch_test = fgetc(fo) ;\n        ch_expected = fgetc(fe) ;\n\n        if(ch_test == EOF || ch_expected == EOF) {\n            break ;\n        }\n\n        if( ch_test == ch_expected ) {\n            //printf("%c", ch_test) ;\n        } else {\n            printf("\\nSymmetry break, testVal:%c, expectedVal:%c\\n", ch_test, ch_expected) ;\n            return -1 ;\n        }\n    } while ( ch_test != EOF ) ;\n\n    fclose(fo);\n    fclose(fe);\n\n    //printf("All tests passed\\n") ;\n\n    return 0 ;\n}\n	B:\\Portfolio\\CProject1	12	4
32	2014-11-29 16:17:27	2014-11-29 13:49:06	lvl_1.c	Executes the level 1 requirements of the project	/*\n<package>\n\tC Project 1 - swen250\n<.package>\n<description>\n\tExecutes the level 1 requirements of the project\n<.description>\n<keywords><.keywords>\n*/\n\n#include <stdio.h>\n\nint execute_lvl_1 () {\n    struct Element line ;\n    int cmd ;\n    int id ;\n    char ch ;\n\n    do {\n        ch = parse_health_line(&line, &id, &cmd) ;\n        if(ch == EOF) {\n            break;\n        }\n\n        //Determine string for level 1 print\n        char* statPrint = get_stat_string(cmd) ;\n\n        printf("%s: %s for patient ID = %d is %.1f\\n",\n            line.timestamp, statPrint, id, (line.value/10.0)) ;\n\n    } while( ch != EOF ) ;\n\n    return 0;\n}\n\n	B:\\Portfolio\\CProject1\\lvl	12	4
33	2014-11-29 16:17:58	2014-11-29 13:49:06	lvl_2.c	Executes the level 2 requirements of the project	/*\n<package>\n\tC Project 1 - swen250\n<.package>\n<description>\n    Executes the level 2 requirements of the project\n<.description>\n<keywords><.keywords>\n*/\n\nint execute_lvl_2() {\n    struct Element line ;\n    struct Chart chart[MAXPATIENTS] ;\n\n    int id, i;\n    int cmd = 0 ;\n    char ch ;\n\n    // Initializes the chart buffers to start=0, end=0\n    for(i = 0; i < MAXPATIENTS; i++) {\n        initialize_chart(&chart[i]) ;\n    }\n\n    do {\n        ch = parse_health_line(&line, &id, &cmd) ;\n\n        if(ch == EOF) {\n            break ;\n        }\n\n        // Print chart when cmd = 6, otherwise, aggregate data into the buffer\n        if(cmd == 6) {\n            print_health_data(chart[id-1]) ;\n        } else {\n            chart[id-1].id = id ;\n            int e = chart[id-1].buffer[cmd-1].end ;\n            int s = chart[id-1].buffer[cmd-1].start ;\n            chart[id-1].buffer[cmd-1].reading[e] = line ;\n\n            e = (e+1)%MAXREADINGS ;\n            if(e <= s) {\n                s = (s+1)%MAXREADINGS ;\n            }\n\n            chart[id-1].buffer[cmd-1].end = e ;\n            chart[id-1].buffer[cmd-1].start = s ;\n        }\n    } while (ch != EOF) ;\n}\n	B:\\Portfolio\\CProject1\\lvl	12	4
34	2014-11-29 16:18:12	2014-11-29 13:49:06	lvl_3.c	Executes the level 3 requirements of the project	/*\n<package>\n\tC Project 1 - swen250\n<.package>\n<description>\n    Executes the level 3 requirements of the project\n<.description>\n<keywords><.keywords>\n*/\n\nint execute_lvl_3() {\n    execute_lvl_2() ;\n}\n	B:\\Portfolio\\CProject1\\lvl	12	4
35	2014-11-29 16:18:24	2014-11-29 13:49:06	lvl_4.c	Executes the level 4 requirements of the project	/*\n<package>\n\tC Project 1 - swen250\n<.package>\n<description>\n    Executes the level 4 requirements of the project\n<.description>\n<keywords><.keywords>\n*/\n\nint execute_lvl_4() {\n    execute_lvl_2() ;\n}\n	B:\\Portfolio\\CProject1\\lvl	12	4
37	2014-11-29 14:33:21	2014-11-29 13:49:06	health.c	Parse CSV lines and store medical patient related data in structures, check patients in and out	/*\n<package>\n\tC Project 2 - swen250\n<.package>\n<description>\n    Parse CSV lines and store medical patient related data in structures, check patients in and out\n<.description>\n<keywords>\n    csv, stdin, circular buffer, linked list\n<.keywords>\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n#include "health.h"\n\n/*\n* Main function for the Health Monitoring System. Primarily responsible for\n* processing input of csv lines and printing as required. Data structures are\n* maintained using the helper functions in health_util.c\n* \n*/\n#define HR "-----------------------------------------"\n\nChartptr patientList = NULL;    /* Define global variable patientList (declared in health.h) */\n                                /* patientList is globaaly accessible in health_util.c    */\n\nvoid main(){\n\nprintf("Welcome to the Health Monitoring System\\n\\n");\n\n/*\n*  YOUR CODE GOES HERE:\n*  (1) Read an input csv line from stdin \n*  (2) Parse csv line into appropriate fields\n*  (3) Take action based on input type:\n*        - Check-in or check-out a patient with a given ID\n*        - Add a new health data type for a given patient\n*        - Store health data in patient record or print if requested\n*  (4) Continue (1)-(3) until EOF\n*/\n    // init variables\n    struct Element *element = (struct Element*)malloc( sizeof( struct Element) ) ;\n    int *patientid = (int *)malloc( sizeof( int ) ) ;\n    int *cmd = (int *)malloc( sizeof( int ) );\n    char ch ;\n\n    // read in first line \n    ch = parse_line(element, patientid, cmd) ;\n\n    // primary loop to read in all data from stdin\n    // parses each line, executes the command as it is processed\n    while(ch != EOF) {\n        switch(*cmd) {\n            case 0:\n                //printf("Delete data\\n");\n                break;\n            case 1 ... 5:\n                //printf("Add data point\\n");\n                break;\n            case 6:\n                //printf("Print health data for ID = %d\\n", *patientid);\n                break;\n            case 7:\n                printf("%s\\n", HR);\n                printf("%s: Patient ID = %d checking in\\n", element->timestamp, *patientid);\n                printf("%s\\n", HR);\n                addPatient(*patientid);\n                break;\n            case 8:\n                //printf("%s\\n", HR);\n                //printf("%s: Patient ID = %d checking out\\n", element->timestamp, *patientid);\n                //printf("%s\\n", HR);\n                //removePatient(*patientid);\n                break;\n            case 9:\n                addHealthType(*patientid, element->value);\n                //printf("Added new health type: %d, for patient ID = %d\\n", element->value, *patientid);\n                break;\n            default:\n                printf("Unknown cmd\\n");\n                break;\n        }\n\n        // parse next line\n        ch = parse_line(element, patientid, cmd) ;\n    }\n\n    printf("\\nEnd of Input\\n") ;\n}\n	B:\\Portfolio\\CProject2	13	4
38	2014-11-29 14:34:22	2014-11-29 13:49:06	health_util.c	Utility methods for C Project 2	/*\n<package>\n\tC Project 2 - swen250\n<.package>\n<description>\n    Utility methods for C Project 2\n<.description>\n<keywords>\n    linked list, pointers, struct\n<.keywords>\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include "health.h"\n\n\n/*\n* health_util.c - Helper functions for the Health Monitoring System\n*\n* Add any optional helper function declarations here, define \n* the functions after the required functions below.\n*\n* static void myOptionalFunc();   // EXAMPLE \n*\n*/\nchar parse_line(struct Element *element, int *id, int *cmd);\n\n/*\n* addPatient: check-in a new patient\n*   (1) allocate a new Chart for the patient\n*   (2) initialize the chart with the passed patientID\n*   (3) new patients are inserted at the start of the patient list\n*\n* (note that the variable patientList is globally accessible)\n*/\nvoid addPatient( int patientID ) {\n    // init new chart\n    Chartptr new_chart = (Chartptr)malloc( sizeof( Chartptr ) ) ;\n    new_chart->id = patientID ;\n    new_chart->buffer = NULL ;\n    new_chart->next = NULL ;\n\n    // if first chart -> assign to head\n    if(patientList == NULL) {\n        patientList = new_chart ;\n    // else append new chart to the end of the patient list\n    } else {\n        Chartptr tail = patientList ;\n        while(tail->next != NULL) {\n            tail = tail->next ;\n        }\n        tail->next = new_chart ;\n    }\n}\n\n/*\n* addHealthType: add a new health type buffer for a given patient\n*\t(1) allocate a new CircularBuffer\n*\t(2) initialize the buffer\n* \t(3) link it to the existing patient's Chart\n*/\nvoid addHealthType( int patientID, int newType ){\n    // find the patient's chart\n    Chartptr patient_chart = getChart( patientID );\n\n    // init buffer\n    CBuffptr buffer = (CBuffptr)malloc( sizeof( CBuffptr ) ) ;\n    buffer->type  = newType ;\n    buffer->start = 0 ;\n    buffer->end   = 0 ;\n    buffer->next  = NULL ;\n\n    // append to the head of the chart when first type added\n    if(patient_chart->buffer == NULL) {\n        patient_chart->buffer = buffer ;\n    // find the tail and append otherwise\n    } else {\n        CBuffptr tail = patient_chart->buffer ;\n        while(tail->next != NULL) {\n            tail = tail->next ;\n        }\n        patient_chart->buffer->next = buffer ;\n    }\n}\n  \n/*\n*  getChart: given a patientID, return a pointer to their Chart\n*/\nChartptr getChart( int patientID ){\n    Chartptr foundChart = NULL;\n    Chartptr iter = patientList ;\n    while(iter != NULL) {\n        if(iter->id == patientID) {\n            foundChart = iter ;\n            break ;\n        }\n        iter = iter->next ;\n    }\n    return foundChart;\n}\n\n/* \n*  getHealthType: given a patientID & healthType, return a pointer \n*  to the CircularBuffer for that type. If the health type does NOT exist \n*  for that patient, return NULL\n*/\nCBuffptr getHealthType( int patientID, int healthType ){\n  CBuffptr foundType = NULL;\n  \n  /* YOUR CODE HERE */\n  \n  return foundType;\n  }\n \n/*\n*  addHealthReading: given a pointer to CircularBuffer, add the passed\n*  timestamp and health data type reading to the buffer\n*/\nvoid addHealthReading( CBuffptr buffer, char* timestamp, int reading ){\n\n  /* YOUR CODE HERE */\n}\n  \n/*\n*  removePatient: check-out an existing patient\n*\t  (1) delete the patient's Chart & accompanying \n*         health data readings.\n*     (2) update the list of current patients\n*/\nvoid removePatient( int patientID ){\n    //printf("Removing patient ID: %d\\n", patientID);\n}\n\n/*\n* Optional helper functions defined starting here:\n*\n* static void myOptionalFunc(){ }  // EXAMPLE\n*\n*/\nchar parse_line(struct Element *element, int *id, int *cmd) {\n    char ch;\n    // pull PatientID\n    scanf("%d", id);\n    getchar();\n    getchar();\n    // pull TIME\n    scanf("%8c", element->timestamp);\n    element->timestamp[8] = '\\0';\n    getchar();\n    getchar();\n    // pull CMD\n    scanf("%d", cmd);\n    getchar();\n    getchar();\n    // pull VALUE\n    scanf("%d", &element->value);\n    ch = getchar();\n    // ch notifies main() of EOF\n    return ch ;\n}\n	B:\\Portfolio\\CProject2	13	4
39	2014-11-29 16:52:34	2014-12-07 15:25:04	Quadratic.java	Utility methods for the lab 1 - csc103	/*\n<package>\n\tLab 1 - csc103\n<.package>\n<description>\n\tUtility methods for the lab 1 - csc103\n<.description>\n<keywords>\n\tquadratic, math\n<.keywords>\n*/\n\npublic class Quadratic {\n\t\n\tprivate double coefA, coefB, coefC;\n\tprivate double roots[] = new double[3];\n\t\n\tpublic Quadratic()\n\t{\n\t\tcoefA = 0;\n\t\tcoefB = 0;\n\t\tcoefC = 0;\n\t}\n\t\n\tpublic Quadratic(double a, double b, double c)\n\t{\n\t\tcoefA = a;\n\t\tcoefB = b;\n\t\tcoefC = c;\n\t}\n\t\n\t\t\n\tpublic static Quadratic sum(Quadratic q1, Quadratic q2)\n\t{\n\t\tQuadratic temp = new Quadratic(q1.getCoefA() + q2.getCoefA(), \n\t\t\t\t\t\t\t\t\t  \t\t\t q1.getCoefB() + q2.getCoefB(), \n\t\t\t\t\t\t\t\t\t \t\t\t q1.getCoefC() + q2.getCoefC());\n\t\treturn temp;\n\t}\n\t\n\tpublic static Quadratic scale(double r, Quadratic q)\n\t{\n\t\tQuadratic scaled = new Quadratic(r * q.getCoefA(), \n\t\t\t\t\t\t\t\t\t\t \t\t   r * q.getCoefB(), \n\t\t\t\t\t\t\t\t\t\t\t\t   r * q.getCoefC());\n\t\treturn scaled;\n\t}\n\t\n\tpublic double getCoefA()\n\t{\n\t\treturn coefA;\n\t}\n\t\n\tpublic double getCoefB()\n\t{\n\t\treturn coefB;\n\t}\n\t\n\tpublic double getCoefC()\n\t{\n\t\treturn coefC;\n\t}\n\t\n\tpublic void show()\n\t{\n\tSystem.out.println("\\t(" + coefA + "x^2) + " +\n\t\t\t\t\t\t \t   "(" + coefB + "x) + " +\n\t\t\t\t\t\t  \t   "(" + coefC + ")");\n\t}\n\t\n\tpublic double evalExpression(double x)\n\t{\n\t\treturn (coefA * Math.pow(x, 2.0)) + (coefB * x) + coefC;\n\t}\n\t\n\tpublic static Quadratic clone(Quadratic q)\n\t{\n\t\tQuadratic clone = new Quadratic(q.getCoefA(),q.getCoefB(),q.getCoefC());\n\t\treturn clone;\n\t}\n\t\n\tpublic void findRoots ( )\n\t{\n\t\tif (coefA == 0 && coefB == 0 && coefC == 0)\n\t\t\troots[0] = 3;\n\t\t\n\t\tif (coefA == 0 && coefB == 0 && coefC != 0)\n\t\t\troots[0] = 0;\n\t\t\t\n\t\tif (coefA == 0 && coefB != 0)\n\t\t{\n\t\t\troots[0] = 1;\n\t\t\troots[1] = - coefC / coefB;\n\t\t}\n\t\t\t\t\t\n\t\tif (coefA != 0 && (Math.pow(coefB, 2) < 4 * coefA * coefC))\n\t\t\troots[0] = 0;\n\t\t\t\n\t\tif (coefA != 0 && (Math.pow(coefB, 2) == 4 * coefA * coefC))\n\t\t{\n\t\t\troots[0] = 1;\n\t\t\troots[1] = -coefB / (2 * coefA);\n\t\t}\n\t\t\n\t\tif (coefA != 0 && (Math.pow(coefB, 2) > (4 * coefA * coefC)))\n\t\t{\n\t\t\troots[0] = 2;\n\t\t\troots[1] = (- coefB - Math.sqrt(Math.pow(coefB, 2) - (4 * coefA * coefC)))/ (2 * coefA);\n\t\t\troots[2] = (- coefB + Math.sqrt(Math.pow(coefB, 2) - (4 * coefA * coefC)))/ (2 * coefA);\n\t\t}\n\t}\n\t\n\tpublic double getNumRoots ( )\n\t{\n\t\treturn roots[0];\n\t}\n\t\n\tpublic double getRootOne ( )\n\t{\n\t\treturn roots[1];\n\t}\n\t\n\tpublic double getRootTwo ( )\n\t{\n\t\treturn roots[2];\n\t}\n}\n\n\n	B:\\Portfolio\\CSC103 - Project 1	14	2
40	2014-11-29 16:53:23	2014-11-29 16:49:52	QuadTest.java	Tests the quadratic functions of the lab by reading in a file and verifying results	/*\n<package>\n\tLab 1 - csc103\n<.package>\n<description>\n\tTests the quadratic functions of the lab by reading in a file and verifying results\n<.description>\n<keywords>\n\ttest, quadratic, parse\n<.keywords>\n*/\n\nimport java.io.*;\n\n\npublic class QuadTest {\n\n\t/**\n\t * @param Class: QuadTest\n\t * @param \n\t * @param Author: Stephen Brewster\n\t * @param Description: Solution for Ch.2, projects 8 & 9, page 95.\n\t * \t\t\t\t\t   Works with Quadratic class to create quadratic\n\t * \t\t\t\t\t   equation objects to be manipulated in various manners.\n\t */\n\t\n\tQuadratic q1,\n\t\t\t\t q2,\n\t\t\t\t sum,\n\t\t\t\t scaled,\n\t\t\t\t clone;\n\t\t\t\t \n\tdouble[] coeffValues;\n\t\t\n\tpublic void parse(String fileLine)\n\t{\n\t// Split the line from the file into an array then convert string values\n\t// into double vaules.\n\t\tString[] splitter = fileLine.split(" ");\n\t\t\n\t\tif (splitter.length == 8)\n\t\t{\n\t\t\tcoeffValues = new double[splitter.length];\n\t\t\t\n\t\t\tfor (int i = 0; i <= splitter.length - 1; i++)\n\t\t\t{\t\n\t\t\t\tcoeffValues[i] = Double.parseDouble(splitter[i]);\n\t\t\t}\n\t\t\n\t// Use values from coeffValues array to create quadratic objects\n\t\t\tq1 = new Quadratic(coeffValues[0],\n\t\t\t\t\t\t\t\t    coeffValues[1], \n\t\t\t\t\t\t\t\t\t coeffValues[2]);\n\t\t\t\t\t\t\t\t \n\t\t\tq2 = new Quadratic(coeffValues[5], \n\t\t\t\t\t\t\t\t\t coeffValues[6], \n\t\t\t\t\t\t\t\t\t coeffValues[7]);\n\t\t\t\t\t\t\t\t \n\t\t\tsum = new Quadratic();\n\t\t\tsum = Quadratic.sum(q1,q2);\n\t\t\n\t\t\tcalculations();\n\t\t}  else \n\t\t\t\tSystem.out.println("Data line, " + fileLine + ", is of insufficient length");\n\t}\n\t\n\n\tpublic static void printIntro()\n\t{\n\t\tSystem.out.println("Welcome to the quadratic manipulation program!" +\n\t\t\t\t\t\t   "\\nThis program will read lines of data from inputCoef.txt" +\n\t\t\t\t\t\t   "\\nwhich will consist of coefficient values for 2 quadratics" +\n\t\t\t\t\t\t   "\\nand 2 values which will be used to scale and solve the quadratics.");\n\t}\n\t\n\t\n\tprivate void calculations()\n\t{\n\t\tSystem.out.println("The first quadratic is: ");\n\t\tq1.show();\n\t\t\n\t\tSystem.out.println("\\nThe result of the first quadratic expression with x = " +\n\t\t\t\t\t\t\t\t    coeffValues[3] + " is: " + q1.evalExpression(coeffValues[3]));\n\t\t\t\t\n\t\tscaled = new Quadratic();\n\t\tscaled = Quadratic.scale(coeffValues[4],q1);\t\t\t\t\t\t\n\t\t\t\n\t\t\tSystem.out.println("\\nThe first quadratic after scaling with R = " + coeffValues[4] + " is: ");\n\t\t\tscaled.show();\n\t\t\t\n\t\tq1.findRoots();\n\t\tif (q1.getNumRoots() == 3.0)\n\t\t\tSystem.out.println("\\nNumber of roots: Infinite");\n\t\telse\n\t\t\tSystem.out.println("\\nNumber of roots: " + q1.getNumRoots());\n\t\t\n\t\tif (q1.getNumRoots() == 2.0)\n\t\t{\t\n\t\tSystem.out.println("Value of root one: " + q1.getRootOne());\n\t\tSystem.out.println("Value of root two: " + q1.getRootTwo());\n\t\t}\n\t\t\n\t\tif (q1.getNumRoots() == 1.0)\n\t\t\tSystem.out.println("Value of root: " + q1.getRootOne());\n\t\t\n\t\tSystem.out.println("\\nThe second quadratic is: ");\n\t\tq2.show();\n\t\t\n\t\tSystem.out.println("\\nThe quadratic which is the sum of the first 2 is: ");\n\t\tsum.show();\n\t\t\n\t\tclone = new Quadratic();\n\t\tclone = Quadratic.clone(q1);\n\t\t\t\n\t\t\tSystem.out.println("\\nA clone of the first quadratic is: ");\n\t\t\tclone.show();\n\t}\n\n}\n\n	B:\\Portfolio\\CSC103 - Project 1	14	2
41	2014-11-29 14:28:47	2014-11-29 13:49:06	csv.c	Parse and print CSV formatted files read from standard input	/*\n<package>\n    CSV in c\n<.package>\n<description>\n    Parse and print CSV formatted files read from standard input\n<.description>\n<keywords>\n    csv, stdin\n<.keywords>\n*/\n\n/*\n * Skeleton implementation for the activity to parse and print\n * CSV formatted files read from standard input.\n */\n\n#include <stdlib.h>\n#include <stdio.h>\n\n/*\n * Boolean here - just so we don't have to import a text file.\n */\n\ntypedef enum { false, true } bool ;\n\n#define MAX_FIELDS (15)/* maximum fields on a CSV input line */\n#define MAX_CHARS (20) /* maximum characters in any one field */\n\n/*\n * Just an array of characters representing a single filed.\n*/\n\ntypedef char f_string[MAX_CHARS+1] ;    /* string for each field */\n\n/*\n * A parsed CSV line, with the number of fields and upto MAX_FIELDS themselves.\n*/\n\ntypedef struct {\n    int nfields ;   /* 0 => end of file */\n    f_string field[MAX_FIELDS] ;    /* array of strings for fields */\n} csv_line ;\n\n/*\n * Returns true iff the character 'ch' ends a field. That is, ch is end of file,\n * a comma, or a newline.\n */\n\nbool is_end_of_field(char ch) {\n    return (ch == ',') || (ch == '\\n') || (ch == EOF) ;\n}\n\n/*\n * Return the minimum of two integers.\n */\n\nint min(int x, int y) {\n    return x < y ? x : y ;\n}\n\n/*\n * Read the next field from standard input. Returns the value of getchar() that\n * stopped (terminated) the field.\n */\n\nint get_field(f_string field) {\n    char ch ;\n    int index ;\n\n    //Initialize field string\n    for(index = 0; index < MAX_CHARS; index++) {\n        field[index] = " ";\n    }\n\n    index = 0 ;\n\n    do {\n        ch = getchar() ;\n        if(is_end_of_field(ch)) {\n            field[index] = '\\0' ;\n            return ch ;\n        } else {\n            field[index] = ch ;\n            index += 1 ;\n        }\n    } while( !is_end_of_field(ch) ) ;\n}\n\n/*\n * Read in a CSV line. No error checking is done on the number of fields or\n * the size of any one field.\n * On return, the fields have been filled in (and properly NUL-terminated), and\n * nfields is the count of the number of valid fields.\n * nfields == 0 means end of file was encountered.\n */\n\ncsv_line get_line() {\n    csv_line aLine ;\n    aLine.nfields = 0 ;\n    char ch ;\n\n    do {\n        ch = get_field(aLine.field[aLine.nfields]) ;\n        if(ch == EOF) {\n            return aLine ;\n        }\n        aLine.nfields += 1 ;\n    } while(ch != 10) ;\n    return aLine ;\n}\n\n/*\n * Print a CSV line, associating the header fields with the\n * data line fields.\n * The minimum of the number of fields in the header and the data\n * determines how many fields are printed.\n */\n\nvoid print_csv(csv_line header, csv_line data) {\n    int nfields = header.nfields ;\n    int i ; \n    for(i = 0; i < nfields; i++) {\n        printf("%s=%s\\n", header.field[i], data.field[i]) ;\n    }\n\n    printf("\\n") ;\n}\n\n/*\n * Driver - read a CSV line for the header then read and print data lines\n * until end of file.\n */\n\nint main() {\n    csv_line header ;\n    csv_line current ;\n\n    header = get_line() ;\n    current = get_line() ;\n\n    print_csv(header, current) ;\n\n    while ( current.nfields > 0 ) {\n        print_csv(header, current) ;\n        current = get_line() ;\n    }\n\n    return 0 ;\n}\n	B:\\Portfolio\\csv	15	4
42	2014-11-29 14:35:21	2014-11-29 13:49:06	ritwc.c	Counts the words, characters and lines of stdin, mimics wc in Linux	/*\n<package>\n\tWord Count in C\n<.package>\n<description>\n    Counts the words, characters and lines of stdin, mimics wc in Linux\n<.description>\n<keywords>\n    stdin\n<.keywords>\n*/\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <ctype.h>\n#include <unistd.h>\n\n#define FALSE (0)\n#define TRUE  (1)\n\nint main(int argc, char *argv[]) {\n    int tot_chars = 0 ; /* total characters */\n    int tot_lines = 0 ; /* total lines */\n    int tot_words = 0 ; /* total words */\n\n    int ch;\n\n    /* read character by character from stdin */\n    do {\n        ch = fgetc(stdin);\n        tot_chars += 1;\n        if(ch == 10) {\n            tot_lines += 1;\n        }\n        if(ch == 32 || ch == 10) {\n            tot_words += 1;\n        }\n    } while (ch != EOF); \n\n    printf("%d %d %d", tot_lines, tot_words, tot_chars);\n    return 0;\n}\n	B:\\Portfolio\\CWordCount	16	4
43	2014-11-29 16:35:03	2014-11-29 16:36:34	BDNumber.java	Converts numbers between decimal and binary	/*\n<package>\n\tDecimal-Binary Converter\n<.package>\n<description>\n    Converts numbers between decimal and binary\n<.description>\n<keywords>\n\tbinary, converter\n<.keywords>\n*/\n\n/*\n\tRuns With: BDNumberMain\n*/\nclass BDNumber{\n\tprivate int[] number = new int[11];\n\tprivate String Hex;\n\t\n\t//Set D/B values when Integer is passed\n\tpublic BDNumber(String num, int base){\n\t\tswitch(base)\n\t\t{\n\t\tcase 2:  number[10] = convertBtoD(num);\n\t\t\t\t Hex = convertBtoHex(num);\n\t\t\t\t break;\n\t\tcase 10: number[2] = convertDtoB(num);\n\t\t\t\t break;\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\t//Returns user requested base\n\tpublic String getConversion(int b)\n\t{\n\t\tif (b == 16){\n\t\t\treturn Hex;\n\t\t} else{\n\t\t\treturn Integer.toString(number[b]);\n\t\t}\n\t}\n\n\t//Convert binary to decimal\t\n\tprivate int convertBtoD(String n) {\n\t\tint j = 0;\n\t\tint sum = 0;\n\t\t\n\t\tfor (int i = n.length() - 1; i >= 0; i--){\n\t\t\tif (n.charAt(i) == '1')\n\t\t\t{\n\t\t\t\tsum += (int) Math.pow(2.0, j);\n\t\t\t}\n\t\t\tj = j + 1;\n\t\t}\n\t\treturn sum;\n\t}\n\t\n\tprivate String convertBtoHex(String n) {\n\t\tint sum = 0, i = 0;\n\t\tdouble segments = Math.ceil((double)(n.length()) / 4); // Finds the number of bytes required\n\t\tString retrieveByte = "";\n\t\t\tfor (int j = 1; j <= segments; j++)\n\t\t\t\t{\n\t\t\t\ti = - (1 + 3*j)\n\t\t\t\t\twhile (n.charAt(i) != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(Character.toString(n.charAt(n.length()-1)));\n\t\t\t\t\t}\n\t\t\t\t\t//System.out.print(retrieveByte);\n\t\t\t\t}\n\t\treturn Integer.toString(sum);\n\t}\n\t\n\t//Convert Decimal to Binary\n\tprivate int convertDtoB(String num) {\n\tString result = "";\n\tint n = Integer.parseInt(num);\n\t\n\tif (n == 0)\n\t{\n\t\tresult = "0";\n\t}\n\telse\n\t{\n\t\twhile (n > 0) {\n\t\t\tresult = n%2 + result ;\n\t\t\tn = n / 2;\n\t\t}\n\t}\n\treturn Integer.parseInt(result);\n\t}\n\t\n\n} // End class\n\n\n/*\n//Addition of the 2 numbers \npublic BDNumber add(BDNumber n) {\n\tBDNumber sum;\n\t\tsum = new BDNumber(this.getDec() + n.getDec());\nreturn sum;\n}\t\n\n//Subtraction of the 2 numbers\npublic BDNumber subtract(BDNumber n) {\n\tBDNumber subtract;\n\t\n//Find the proper order of subtraction to avoid a negative number and set result to a new object\n\t\tif (this.dec_num >= n.dec_num)\t\t\t\n\t\t\t\t\tsubtract = new BDNumber(this.getDec() - n.getDec());\n\t\t\telse\n\t\t\t\t\tsubtract = new BDNumber(n.getDec() - this.getDec());\n\t\t\n\treturn subtract;\n}\n*/	B:\\Portfolio\\DBConverter	17	2
44	2014-11-29 16:35:41	2014-11-29 16:36:34	BDNumberMain.java	Converts numbers between decimal and binary	/*\n<package>\n\tDecimal-Binary Converter\n<.package>\n<description>\n    Converts numbers between decimal and binary\n<.description>\n<keywords>\n\tdriver, main\n<.keywords>\n*/\n\n/**\n\tProgram: BDNumber\n\tAuthor: Stephen Brewster\n\tDate: 10/25/10\n\tPurpose: This program models the Fraction class, performing similar\n\t\tmethods with integers in place of fractions.\n\tRuns With: BDNumber\n*/\nimport java.util.*;\nclass BDNumberMain{\n\n\tpublic static void main( String[] args) {\n\t\tBDNumber toConvert;\n\t\tScanner keyIn = new Scanner(System.in);\t\n\t\tint baseIn, baseOut;\n\t\tString num;\n\t\t\t\n\t\t\tSystem.out.print("What base will the number be in? (2,8,10,16): ");\n\t\t\t\tbaseIn = keyIn.nextInt();\n\t\t\tSystem.out.print("What base are you converting to? (2,8,10,16): ");\n\t\t\t\tbaseOut = keyIn.nextInt();\n\t\t\tSystem.out.print("Enter the number: ");\n\t\t\t\tnum = keyIn.next();\n\t\t\t\t\n\t\t\ttoConvert = new BDNumber(num,baseIn);\n\t\t\t\n\t\t\t//System.out.print(num + " in base " + baseOut + " is: " + toConvert.getConversion(baseOut) + ".");\n\t}\n}\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n	B:\\Portfolio\\DBConverter	17	2
45	2014-11-29 13:23:36	2011-07-23 19:02:44	EncryptorFrame.java	Creates the GUI for the Encryptor application	/*\n<package>\n\tEncryptor\n<.package>\n<description>\n    Creates the GUI for the Encryptor application\n<.description>\n<keywords>\n    swing, gui interface\n<.keywords>\n*/\n\nimport java.awt.*;\nimport javax.swing.*;\nimport java.awt.event.*;\nimport javax.swing.JFileChooser.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\n\nimport java.io.EOFException;\nimport java.io.IOException;\n\npublic class EncryptorFrame extends JFrame {\n\tprivate JTextField inPutWin = new JTextField();\n\tprivate JTextArea outPutWin = new JTextArea();\n\tprivate JScrollPane scrollerOut = new JScrollPane(outPutWin);\n\tprivate JButton encrypt = new JButton("Encrypt");\n\tprivate JButton decrypt = new JButton("Decrypt");\n\tprivate Encryptor en1 = new Encryptor();\n   private JMenu fileMenu = new JMenu("File");\n\tprivate JMenu encryptMenu = new JMenu("Encryption");\n   private JMenu helpMenu = new JMenu("Help");\n\tprivate JMenu connect = new JMenu("Connect");\n\tprivate JMenu server = new JMenu("Server");\n\tprivate JTextArea clientListWin = new JTextArea();\t\n\tprivate JScrollPane userScroll = new JScrollPane(clientListWin);\n\npublic static void main (String[] args) {\n\t EncryptorFrame frame = new EncryptorFrame();\n    frame.setTitle("Encryptor by Stephen Brewster");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(700,400);\n    frame.setVisible(true);\n}\n\n\tprivate encryptorClient ec;\n\t\tprivate Socket connectToServer;\n\t\tprivate BufferedReader fromServer;\n\t\tprivate PrintWriter toServer;\n\t\tprivate String clientList[] = new String[10];\n\t\tprivate int numClients = 0;\n\t\n\tpublic EncryptorFrame ( )\n\t{\n    try {\n\t    // Set cross-platform Java L&F (also called "Metal")\n        UIManager.setLookAndFeel(\n            UIManager.getSystemLookAndFeelClassName());\n    } \n    catch (UnsupportedLookAndFeelException e) {\n       // handle exception\n    }\n    catch (ClassNotFoundException e) {\n       // handle exception\n    }\n    catch (InstantiationException e) {\n       // handle exception\n    }\n    catch (IllegalAccessException e) {\n       // handle exception\n    }\n\t\t\n\t\t\t\t\n\t\t//Create Encryption submenu\n\t\tJRadioButtonMenuItem fib, xrated, basic, plat;\n\t\tencryptMenu.add(basic = new JRadioButtonMenuItem("Basic"));\n\t\tencryptMenu.add(fib = new JRadioButtonMenuItem("Fibonacci"));\n\t\tencryptMenu.add(xrated = new JRadioButtonMenuItem("X-Rated"));\n\t\tencryptMenu.add(plat = new JRadioButtonMenuItem("Platinum"));\n\t\t\tButtonGroup encryptBTG = new ButtonGroup();\n\t\t\tencryptBTG.add(basic);\n\t\t\tencryptBTG.add(fib);\n\t\t\tencryptBTG.add(xrated);\n\t\t\tencryptBTG.add(plat);\n\t\t\n//************* Main window creation **************************\n\n\t\t//USER DISPLAY PANE\n\t\tclientListWin.setEditable(false);\n\t\tJPanel p1 = new JPanel();\n\t\tp1.setBorder(BorderFactory.createTitledBorder ("Users"));\n\t\tp1.setLayout(new GridLayout(1,1));\n\t\tp1.setMinimumSize(new Dimension(100,100));\t\t\n\t\tp1.add(userScroll);\n\n\t\t\n\t\t//OUTPUT WINDOW PANE\n\t\tJPanel p2 = new JPanel();\n\t\tp2.setLayout(new GridLayout(1,1));\n\t\tp2.setBorder(BorderFactory.createTitledBorder("Chat Window"));\n\t\t\toutPutWin.setLineWrap(true);\n\t\t\toutPutWin.setWrapStyleWord(true);\n\t\tp2.add(scrollerOut);\n\t\t\n\t\t//INPUT PANE\n\t\tJPanel p3 = new JPanel();\n\t\tJButton sendButton = new JButton("Send");\n\t\t\n\t\t//Sets the ENTER button to send message line\n\t\tinPutWin.setAction(send);\n\t\tsendButton.getInputMap().put(KeyStroke.getKeyStroke("ENTER"), "SEND");\n\t\tsendButton.getActionMap().put("SEND", send); \n\t\t\n\t\tp3.setLayout(new BoxLayout(p3, BoxLayout.LINE_AXIS));\n\t\tp3.add(Box.createHorizontalGlue());\n\t\tp3.setBorder(BorderFactory.createTitledBorder("Input"));\n\t\tp3.add(sendButton);\n\t\tp3.add(inPutWin);\t\n\t\tsendButton.setPreferredSize(new Dimension(113,0));\n\n\t\t//Create panel\n\t\tadd(p1, BorderLayout.WEST);\n\t\tadd(p2, BorderLayout.CENTER);\n\t\tadd(p3, BorderLayout.PAGE_END);\n\n\t\tp3.setPreferredSize(new Dimension(200,50));\t\t\n\t\tp1.setPreferredSize(new Dimension(120,100));\n\t\tsendButton.setMaximumSize(new Dimension(0,60));\t\n\t\t\t\t\t\t\n\t\t//Create menu\n\t   JMenuBar jmenuBar = new JMenuBar();\n       setJMenuBar(jmenuBar);\n\t\t jmenuBar.add(fileMenu);\n\t\t jmenuBar.add(encryptMenu);\n\t\t jmenuBar.add(connect);\t\n\t\t jmenuBar.add(server);\t\n\t\t jmenuBar.add(helpMenu);\n\t\t \n\t\t//Create file submenu\n\t\tJMenuItem txtImport;\n\t\tfileMenu.add(txtImport = new JMenuItem("Import .txt File"));\n\t\t\n\t\t//Create Connection submenu\n\t\tJMenuItem conIP;\n\t\tconnect.add(conIP = new JMenuItem("Connect to Server"));\n\t\t\n\t\t//Create Server submenu\n\t\tJMenuItem serverLaunch;\n\t\tserver.add(serverLaunch = new JMenuItem("Launch Server"));\n\t\t\n\t\t//Create listeners\n\t\tButtonListener btListener = new ButtonListener();\n   \t decrypt.addActionListener(btListener);\n\t\t basic.addActionListener(btListener);\n\t\t fib.addActionListener(btListener);\n\t\t xrated.addActionListener(btListener);\n\t\t plat.addActionListener(btListener);\n \t\t txtImport.addActionListener(btListener);\n\t\t conIP.addActionListener(btListener);\n\t\t serverLaunch.addActionListener(btListener);\n\t}\n\t\n\tpublic void outPut(String s)\n\t{\n\t\toutPutWin.append("\\n" + s);\n\t}\n\n\t//Recieves a file and outputs its contents to the input window\n\tprivate void outPutFile (File f)\n\t{\n\t\tString line;\n\t\tinPutWin.setText("");\n\t\ttry\n\t\t{\n\t\t\tFileReader theFile = new FileReader(f);\n\t\t\tBufferedReader readIn = new BufferedReader(theFile);\n\t\t\twhile ((line = readIn.readLine()) != null)\n\t\t\t{\n\t\t\t\toutPutWin.append(line + " ");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tSystem.out.println( e );\n\t\t}\n\t}\n\n//\t**** ACTION EVENT CLASS****************************************\n\tclass ButtonListener implements ActionListener\n\t{\n  \t\tpublic void actionPerformed(ActionEvent e)\n \t \t{\n    \t\tif (e.getActionCommand().equals("Launch Server"))\n    \t\t{\n     \t\t   new EncryptServer();\n    \t\t}\n\t\t\telse if (e.getActionCommand().equals("Basic"))\n\t\t\t{\n\t\t\t\ten1 = new Encryptor();\n\t\t\t\toutPut("Basic Encryptor selected");\n\t\t\t}\n\t\t\telse if (e.getActionCommand().equals("Fibonacci"))\n\t\t\t{\n\t\t\t\ten1 = new Fibonacci();\n\t\t\t\toutPut("Fibonacci selected");\n\t\t\t}\n\t\t\telse if (e.getActionCommand().equals("X-Rated"))\n\t\t\t{\n\t\t\t\ten1 = new XratedEncrypt();\n\t\t\t\toutPut("X-rated selected");\n\t\t\t}\n\t\t\telse if (e.getActionCommand().equals("Platinum"))\n\t\t\t{\n\t\t\t\ten1 = new Platinum();\n\t\t\t\toutPut("Platinum selected");\n\t\t\t}\n\t\t\telse if (e.getActionCommand().equals("Import .txt File"))\n\t\t\t{\n\t\t\t\toutPut("Import chosen");\n\t\t\t\tFile file = new File("ExampleText.txt");\n\t\t\t\tJFileChooser chooser = new JFileChooser();\n\t\t\t\t\t int retval = chooser.showOpenDialog(null);\n\t\t\t\t\t if (retval == JFileChooser.APPROVE_OPTION)\n\t\t\t\t\t {\t\n\t\t\t\t\t \tfile = chooser.getSelectedFile();\n\t\t\t\t\t\toutPutFile(file);\n\t\t\t\t\t }\n\t\t\t}\n\t\t\telse if (e.getActionCommand().equals("Connect to Server"))\n\t\t\t{\n\t\t\t\tnew connectionFrame();\n\t\t\t}\n \t   }// end actionPerformed\n\t}// end ButtonListner\n\n// *** CONNECTION WINDOW CLASS **************************\t\n   class connectionFrame extends JFrame\n\t{\n\t\tJLabel user = new JLabel("User Name:");\n\t\tJLabel ip = new JLabel("Enter IP:");\n\t\tJLabel sock = new JLabel("Enter Socket:");\n\t\tJTextField userName = new JTextField("Anonymous");\n\t\tJTextField ipIn = new JTextField("");\n\t\tJTextField sockIn = new JTextField("8000");\n\t\tJButton conn = new JButton("Connect");\n\t\tJButton clrTxt = new JButton("Clear");\n\t\t\n\tpublic connectionFrame()\n\t{\n\t\n\t\t//Create connection panel\n\t\tJPanel p = new JPanel();\n\t\tp.setLayout(new GridLayout(4,2));\n\t\tp.add(ip); //Label\n\t\tp.add(ipIn);//Textfield\n\t\tp.add(sock); //Label\n\t\tp.add(sockIn);//Textfield\n\t\tp.add(user); //Label\n\t\tp.add(userName);//Textfield\n\t\tp.add(conn); //Connect Button\n\t\tp.add(clrTxt); //Clear Button\n\t\t\n\t\t//Add listener for connect button\n\t\tconn.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\t//Creates the encryptorClient from text field info\n\t\t\t\tec = new encryptorClient(userName.getText(), \n\t\t\t\t\t\t\t\t\t\t\t\t ipIn.getText(), \n\t\t\t\t\t\t\t\t\t\t\t\t Integer.parseInt(sockIn.getText()));\n\t\t\t\t\n\t\t\t\t//Sets the users name\t\t\t\t\t\t\t\t \n\t\t\t\tclientList[numClients] = userName.getText();\n\t\t\t\tnumClients++; //Increment number of current users on server\n\t\t\t\tupdateClients(); //Update display in 'Client' window\n\t\t\t\tnew Thread(ec).start(); //Start client thread\n\t\t\t}});\n\t\t\n\t\t//Add listener for the clear button\n\t\tclrTxt.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e)\n\t\t\t{\n\t\t\t\t//Clears txt in the connection frame\n\t\t\t\tipIn.setText("");\n\t\t\t\tsockIn.setText("");\n\t\t\t\tuserName.setText("");\n\t\t\t}});\n\t\t\t\t\t\n\t\tadd(p); //Adds the panel to the layout\n\t\t\n\t\tsetTitle("Connection Data"); //Title of the connection frame\n      setSize(250,200);\n      setVisible(true);\n\t}//end connectionFrame()\n}//end connectionFrame class\n\n// ***** CLIENT CLASS **********************************\n\tclass encryptorClient implements Runnable\n\t{\n\t\tprivate String USER_NAME; //User name for the local client\n\t\n\t\tpublic encryptorClient(String UN, String ip, int sock)\n \t   {\n\t\t\tUSER_NAME = UN;\n\t\t\ttry\n\t\t\t{\n\t\t\n\t\t\t//Establish connection to server\n\t\t\tconnectToServer = new Socket(ip,sock);\n\t\t\n\t\t\t//Establish input from server\n\t\t\tfromServer = new BufferedReader(new InputStreamReader\n                  (connectToServer.getInputStream()));\n\t\t\t//Establish output to server\n\t\t\ttoServer = new PrintWriter\n\t\t\t\t\t  (connectToServer.getOutputStream(), true);\n\t\t\n\t\t\t//Sends USER_NAME to the server upon connection\n\t\t\tsendUserName();\n\t\t\n\t\t\t}//End try\n  \t\t\t catch(IOException e1)\n   \t\t{\n     \t\t\t System.err.println("Client died with exception: " + e1.toString());\n      \t\t System.exit(0);\n   \t\t}\n\n\t}//E - CalcClient()\n\t\n\t//Thread method run() for the client\n\tpublic void run()\n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tString inline = ""; //From server\n\t\t\tString temp[]; //Splitter variable for inline\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\tinline = fromServer.readLine();\n\t\t\t}\n\t\t\tcatch(IOException e)\n\t\t\t{\n\t\t\t\tSystem.err.println("Client died with exception: " + e.toString());\n\t\t\t}\n\t\t\t\n\t\t\ttemp = inline.split(" ");\n\n\t\t\t//Uses the user connection update to generate client list\n\t\t\t//When a new client connects it uses the server line to update clientList\n\t\t\t\tif(temp[0].equals("User") && temp[2].equals("connected."))\n\t\t\t\t{\n\t\t\t\t\taddNewClient(temp[1]);\n\t\t\t\t}\n\t\t\t\tif(temp[0].equals("User") && temp[2].equals("disconnected."))\n\t\t\t\t{\n\t\t\t\t\tremoveClient(temp[1]);\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\toutPut(inline); //Writes line from server to window\n\t\t}//E - while()\n\t}//E - run()\n\t\n\t//Sends UserName to server on connection\n\t//Receives confirmation greeting from server\n\tprivate void sendUserName()\n\t{\n\t\ttoServer.println(USER_NAME);\n\t}\n\t\n\t//Closes the connection\n\tpublic void close()\n\t{\n\t\ttry\n\t\t{\n\t\t\ttoServer.close();    //Close output stream\n\t\t\tfromServer.close();  // Close input stream\n\t\t   connectToServer.close(); //Close socket\n\t\t} \n      catch (IOException ioException)\n      {\n\t\t\tioException.printStackTrace();\n\t   }\n\t}\t\n}//E - CalcClient Class\n\t\n\t//Passes a string to the server\n\tpublic void setCalcLine ( String s )\n\t{\n\t\ttoServer.println(s);\n\t\ttoServer.flush();\n\t}\n\t\n\t//Clears clientlist window and reprints\n\tpublic void updateClients (  )\n\t{\n\t\tclientListWin.setText("");\n\t\tfor(int i = 0; i < numClients; i++)\n\t\t{\n\t\t\tclientListWin.append(clientList[i] + "\\n");\n\t\t}\n\t}\n\n\t//Adds a new client to the list and updates the display\n\tprivate void addNewClient(String s)\n\t{\n\t\tclientList[numClients] = s; //Adds client\n\t\tnumClients++;\t\t//increment no. of clients connected\t\n\t\tupdateClients();\t//updates display\n\t}\n\t\n\t//Removes a client from the list\n\tprivate void removeClient(String s)\n\t{\n\t\t//Loop through all clients\n\t\tfor(int i = 0; i < numClients; i++)\n\t\t{\n\t\t\t//When the client is found, remove it\n\t\t\tif(clientList[i].equals(s))\n\t\t\t{\n\t\t\t\tclientList[i] = "";\n\t\t\t\tString t;\n\t\t\t\t\n\t\t\t\t//This loop repacks the list\n\t\t\t\tfor(int j = i; j < numClients - 1; j++)\n\t\t\t\t{\n\t\t\t\t\tclientList[j] = clientList[j + 1];\n\t\t\t\t}\n\t\t\t}//E - if{}\n\t\t}//E - for{}\n\t\t\n\t\tnumClients--;\n\t\tupdateClients();\n\t}//E - removeClient{}\n\t\n\tprivate Action send = new AbstractAction("Send")\n\t{\n\t\tpublic void actionPerformed(ActionEvent e)\n\t\t{\n\t\t\tsetCalcLine(inPutWin.getText());\n\t\t\tinPutWin.setText("");\t\t\t\n\t\t}\n\t};\n\t\t\n}// end EncryptorFrame()	B:\\Portfolio\\Encryptor	18	2
46	2014-11-29 13:24:34	2011-07-23 19:02:44	encryptorMain.java	Starts the Encryptor application	/*\n<package>\n\tEncryptor\n<.package>\n<description>\n    Starts the Encryptor application\n<.description>\n<keywords>\n    driver, swing, frame\n<.keywords>\n*/\n\nimport java.awt.*;\nimport javax.swing.*;\n\nclass encryptorMain{\t\n\t\n\tpublic static void main (String[] args) {\n\t EncryptorFrame frame = new EncryptorFrame();\n    frame.setTitle("Encryptor by Stephen Brewster");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(700,400);\n    frame.setVisible(true);\n\t}\n}\n\t	B:\\Portfolio\\Encryptor	18	2
47	2014-11-29 13:25:47	2011-07-23 19:02:44	EncryptServer.java	Starts the server for the Encrypted chat application	/*\n<package>\n    Encryptor\n<.package>\n<description>\n    Starts the server for the Encrypted chat application\n<.description>\n<keywords>\n    socket, io, server, threads\n<.keywords>\n*/\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class EncryptServer extends JFrame\n{\n   private Socket connectToClient;\n\tprivate BufferedReader fromClient[] = new BufferedReader[10];\n\tprivate PrintWriter toClient[] = new PrintWriter[10];\n\tprivate JTextArea servWin = new JTextArea();\n\tprivate String clientList[] = new String[10];\n\tprivate int numClients = 0, temp;\n\tprivate boolean clientIDs[] = new boolean[10];\n\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tnew EncryptServer();\n\t}\n\t\t\n\tpublic EncryptServer()\n\t{\n\t\t//Create GUI\n\t\tsetLayout(new BorderLayout());\n      add(new JScrollPane(servWin), BorderLayout.CENTER);\n      setTitle("Server");\n      setSize(500, 300);\n      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      setVisible(true);\n\t\t\n\t\ttry\n\t\t{\n\t\t\t//Create socket for connection\n\t\t\tServerSocket socket = new ServerSocket(8000);\n\t\t\tservWin.append("Encryptor Server started at " + new Date() + '\\n');\n\t\t\t\n   \t\t//Primary loop for input/output      \n\t\t\tboolean cont = true;\n         while(cont == true)\n         {\t\n\t   \t\t//Listen for client connection\n\t\t\t\tconnectToClient = socket.accept();\n\t\t\t\t\n\t\t\t\ttemp = getID();\n\t\t\t\t\n\t\t\t\t//I/O stream\n\t\t\t\tfromClient[temp] = new BufferedReader(new InputStreamReader(\n\t\t\t\t\t\t\t  \t\t\tconnectToClient.getInputStream()));\n\t\t\t\ttoClient[temp] = new PrintWriter(\n   \t\t               \t     connectToClient.getOutputStream(), true);\t\n\t\t\t\t\n\t\t\t\t//Set client username recieved from client\t\t\t\t\t\t  \t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\tclientList[temp] = fromClient[temp].readLine();\n\t\t\t\t\n\t\t\t\t//Confirm client username sent to users\n\t\t\t\tfor(int i = 0; i < numClients; i++)\n\t\t\t\t{\n\t\t\t\t\ttoClient[i].println("User " + clientList[numClients] + " connected.");\n\t\t\t\t\ttoClient[numClients].println("User " + clientList[i] + " connected.");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Output connection information in server GUI\n\t\t\t\tservWin.append("\\nNew connection established at " + new Date() +\n\t\t\t\t\t\t\t\t"\\nUser UserID: " + clientList[temp] +\n\t\t\t\t\t\t\t\t"\\nUser IP: " + connectToClient.getInetAddress());\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t//Create new thread\n\t\t\t\tProcessNewTask newTask = new ProcessNewTask(temp);\n\t\t\t\t\n\t\t\t\t//Start new thread\n\t\t\t\tnew Thread(newTask).start();\n\t\t\t\t\n\t\t\t\tnumClients++;\n\n\t\t\t}//E - while{}\n\t\t}//E - try{}\n\t   catch(IOException ex)\n\t\t{\n  \t\t    System.err.println(ex);\n      }\t\n\t}//E - CalcServer\t\n\t\n//THREAD task method, establishes/processes each client\t\nclass ProcessNewTask implements Runnable\n{\n\tprivate int ID;\n\tprivate String lineIn, lineOut;\n\t\n\t//Constructor for the thread task\n\tpublic ProcessNewTask(int n)\n\t{\n\t\tID = n;\n\t}\n\t\n\t//Contains connectivity and processing code\n\tpublic void run()\n\t{\n\t\ttry\n\t\t{\n\t\t\ttoClient[ID].println("Connection accepted!");\n\t\t\ttoClient[ID].println("Welcome " + clientList[ID]);\t\t\t\t\t\t\t\t\t\t  \n\t\t\n\t\t\t//Primary COMMUNICATION loop\n\t\t\twhile(true)\n\t\t\t{\t\n\t\t\t\t//Recieves input from client\n\t\t\t\tlineIn = fromClient[ID].readLine();\n\t\t\t\t\n\t\t\t\tprocessInput(lineIn);\n\t\t\t\n\t\t\t\t//Calculates result and sends to clients\t\t\t\n\t\t\t\tfor(int i = 0; i < numClients; i++)\n\t\t\t\t{\n\t\t\t\t\ttoClient[i].println(clientList[ID] + ": " + lineOut); \n\t\t\t\t\ttoClient[i].flush();\n\t\t\t\t}\n\t\t\t  \n\t\t\t \t//Output to server window  \n\t\t\t\tservWin.append("\\nMessage recieved from ClientID: " + clientList[ID] +\n\t\t\t\t\t\t\t\t\t"- " + lineIn);\n\t\t\t\tservWin.append("\\nResult returned to client " + clientList[ID] +\n\t\t\t\t\t\t\t\t\t"- " + lineOut); \n\t\t\t\t\n\t\t\t\tlineOut = "";\n\t\t\t\t\n\t\t\t}//E - while{}\n\t\t\t\n\t\t}//E - try[]\n      catch(IOException e) \n\t\t{\n        servWin.append("\\nConnection Error: ClientID = " + clientList[ID]);\n\t\t  close();\n\t\t}\n\t\n\t}//E - run()\n\t\t\n\t\t//Disconnects the client\n\t\tprivate void close()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t for(int i = 0; i < numClients; i++)\n\t\t\t\t {\n\t\t\t\t\ttoClient[i].println("User " + clientList[ID] + " disconnected.");\n\t\t\t\t }\n\t\t\t\t \n\t\t \t\t toClient[ID].close();\n\t\t  \t\t fromClient[ID].close();\n\t\t  \t\t servWin.append("\\nConnection to " + clientList[ID] + " closed");\n\t\t\t\t clientIDs[ID] = false;\n\t\t\t\t clientList[ID] = "";\n\t\t\t\t numClients--;\n\t\t\t\t \n\t\t\t}catch (IOException e){\n\t\t\t\t servWin.append("\\nError closing connection");\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t//Method for processing fraction result\n\t\tprivate String processInput( String s)\n\t\t{\n\t\t\tlineOut = s;\n\t\t\treturn lineOut;\n\t\t}//E - processInput()\t\n\t}//E - ProcessNewTask{}\n\t\n\t\tprivate int getID( )\n\t\t{\n\t\t\tfor(int i = 0; i < 10; i++)\n\t\t\t{\n\t\t\t\tif(!clientIDs[i])\n\t\t\t\t{\n\t\t\t\t\tclientIDs[i] = true;\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n}//End Class\t\t\t  \t\t\t\t	B:\\Portfolio\\Encryptor	18	2
48	2014-11-29 13:26:53	2011-07-23 19:02:44	Fibonacci.java	Encrypts and decrypts text using a fibonacci sequence shift cypher	/*\n<package>\n    Encryptor\n<.package>\n<description>\n    Encrypts and decrypts text using a fibonacci sequence shift cypher\n<.description>\n<keywords>\n    shift cyper, fibonacci, encryption\n<.keywords>\n*/\n\npublic class Fibonacci extends Encryptor{\n\tint[] sequence = new int[12];\n\t\n\tpublic Fibonacci ( )\n\t{\n\t\tsequence[0] = 0;\n\t\tsequence[1] = 1;\n\t\tfor (int i = 2; i < sequence.length; i++)\n\t\t{\n\t\t\tsequence[i] = sequence[i - 2] + sequence[i - 1];\n\t\t}\n\t}\n\t\n\tpublic String encrypt (String s)\n\t{\n\t\tString temp = "";\n\t\tint x = 0;\n\t\tfor (int i = 0; i < s.length(); i++)\n\t\t{\n\t\t\ttemp = temp + (char)((int)s.charAt(i) + sequence[x]);\n\t\t\tx++;\n\t\t\tif (x > sequence.length - 1)\n\t\t\t\tx = 0;\n\t\t}\n\t\treturn temp;\n\t}\n\t\n\tpublic String decrypt (String s)\n\t{\n\t\tString temp = "";\n\t\tint x = 0;\n\t\tfor (int i = 0; i < s.length(); i++)\n\t\t{\n\t\t\ttemp = temp + (char)((int)s.charAt(i) - sequence[x]);\n\t\t\tx++;\n\t\t\tif (x > sequence.length - 1)\n\t\t\t\tx = 0;\n\t\t}\n\t\treturn temp;\n\t}\n}\n\t\t\t	B:\\Portfolio\\Encryptor	18	2
49	2014-11-29 13:27:44	2011-07-23 19:02:44	Platinum.java	Encrypts and decrypts text using a custom shift cypher	/*\n<package>\n    Encryptor\n<.package>\n<description>\n    Encrypts and decrypts text using a custom shift cypher\n<.description>\n<keywords>\n    shift cypher, encryption\n<.keywords>\n*/\n\npublic class Platinum extends Encryptor{\n\tprivate int[] intForm;\n\t\t\n\tpublic String encrypt (String s)\n\t{\n\t\tString temp = "";\n\t\tintForm = new int[s.length()];\n\t\n\t\t//Convert string to ASCII values\n\t\tfor (int i = 0; i < s.length(); i++)\n\t\t{\n\t\t\tintForm[i] = s.charAt(i);\n\t\t}\n\t\t\n\t\t//Call series of encryption algorithms\n\t\tencryptShift();\n\t\t\n\t\t//Set temp string\n\t\tfor (int i = 0; i < s.length(); i++)\n\t\t{\t\n\t\t\ttemp += intForm[i];\n\t\t\t\n\t\t\tif (i != s.length() - 1)\n\t\t\t  \ttemp += "-";\t\n\t\t}\n\t\treturn temp;\n\t}\n\t\n\tpublic String decrypt (String s)\n\t{\n\t\tString temp = "";\n\t\t\n\t\t//Convert string to ASCII values\n\t\tfor (int i = 0; i < s.length(); i++)\n\t\t{\n\t\t\tintForm[i] = s.charAt(i);\n\t\t}\n\t\t\n\t\tremoveDashes(s);\n\t\tdecryptShift();\n\t\t\n\t\t//Set temp to string\n\t\tfor (int i = 0; i < s.length(); i++)\n\t\t{\t\t\n\t   \ttemp += (char)intForm[i];\t\n\t\t}\n\t\n\t\treturn temp;\n\t}\n\t\n\tprivate void encryptShift ( )\n\t{\n\t\tboolean switcher = true;\n\t\t\n\t\tfor (int i = 0; i < intForm.length; i++)\n\t\t{\n\t\t\tif (switcher){\n\t\t\t\tintForm[i]++;\n\t\t\t}else{\n\t\t\t \tintForm[i]--;\n\t\t\t}\n\t\t\tswitcher = !switcher;\n\t\t}\n\t} \n\t\n\tprivate void decryptShift ( )\n\t{\n\t\tboolean switcher = true;\n\t\t\n\t\tfor (int i = 0; i < intForm.length; i++)\n\t\t{\n\t\t\tif (switcher){\n\t\t\t\tintForm[i]--;\n\t\t\t}else{\n\t\t\t \tintForm[i]++;\n\t\t\t}\n\t\t\tswitcher = !switcher;\n\t\t}\n\t} \n\t\n\tprivate void removeDashes ( String s )\n\t{\n\t\tString[] splitter;\n\t\tsplitter = s.split("-");\n\t\t\n\t\tfor (int i = 0; i < splitter.length; i++)\n\t\t{\n\t\t\tintForm[i] = (int)splitter[i].charAt(0);\n\t\t}\n\t}\n\t\t\t\t\n}	B:\\Portfolio\\Encryptor	18	2
50	2014-11-29 13:28:42	2011-07-23 19:02:44	VignereEncoder.java	Uses a passphrase to encrypt text	/*\n<package>\n    Encryptor\n<.package>\n<description>\n    Uses a passphrase to encrypt text\n<.description>\n<keywords>\n    passphrase, shift cypher, encryption\n<.keywords>\n*/\n\nclass VignereEncoder{\n\tint[] encoderArray;\n\tint[] phraseArray;\n\tchar[] encodedPhrase;\n\tchar[] decodedPhrase;\n\t\n\tpublic void getEncoderArray(String s, int[] keyArray){\n\tint length = s.length();\n\tencoderArray = new int[length];  \n\tint j = 0;\n\t\tfor (int i = 0; i <= length - 1; i++){\n\t\t\t encoderArray[i] = keyArray[j];\n\t\tj++;\n\t\tif (j > 5){\n\t\t\tj = 0;\t\n\t\t}\t\n\t\n\t}\n\t\n\t}\t\n\t\n\tpublic void setPhraseArray(String s){\n\tint length = s.length();\n\tphraseArray = new int[length];\n\t\n\t\tfor (int i = 0; i <= length - 1; i++){\n\t\t\tphraseArray[i] = (int)s.charAt(i);\n\t\t}\t\n\t\n\t}\n\t\n\tpublic char[] getEncodedPhrase(String s){\n\tencodedPhrase = new char[s.length()];\n\t\tfor (int i = 0; i <= s.length() - 1; i++){\n\t\t\tencodedPhrase[i] = (char)(phraseArray[i] + encoderArray[i]);\n\t\t\t//System.out.print(encodedPhrase[i]);\n\t\t}\n\treturn encodedPhrase;\n\t}\n\t\n\tpublic char[] getDecodedPhrase(String s){\n\tdecodedPhrase = new char[s.length()];\n\t\tfor (int i = 0; i <= s.length() - 1; i++){\n\t\t\tdecodedPhrase[i] = (char)((int)encodedPhrase[i] - encoderArray[i]);\n\t\t\t//System.out.print(decodedPhrase[i]);\n\t\t}\n\treturn decodedPhrase;\n\t}\n\t\n\t\t\t\n\t\n}\t\n\t\n	B:\\Portfolio\\Encryptor	18	2
51	2014-11-29 13:58:01	2014-11-29 13:49:06	factorial.rb	Computes factorials	# <package>\n#     Factorials in ruby\n# <.package>\n# <description>\n#     Computes factorials\n# <.description>\n# <keywords>\n#     exceptions\n# <.keywords>\n\n# factorial(n) is defined as n*n-1*n-2..1 for n > 0\n# factorial(n) is 1 for n=0\n# Let's raise an exception if factorial is negative\n# Let's raise an exception if factorial is anything but an integer\n\n# Compute the value of a factorial\ndef factorial(n)\n  # Raise errors on strings and negative numbers\n  if n.is_a? String then raise "String Argument not allowed!" end\n  if n < 0 then raise "Negative Argument not allowed!" end\n\n  # Compute factorial\n  (1..n).inject(1) { |product,num| product * num }\nend\n	B:\\Portfolio\\Factorial	19	5
52	2014-11-29 13:56:58	2014-11-29 13:49:06	factorial_test.rb	Tests the factorial methods	# <package>\n#     Factorials in ruby\n# <.package>\n# <description>\n#     Tests the factorial methods\n# <.description>\n# <keywords>\n#     unit test\n# <.keywords>\n\n# Test suite for factorial.rb\n\nrequire_relative 'factorial' #We need to access our code to test\nrequire 'test/unit'          #We need Ruby's unit testing library\n\nclass FactorialTest < Test::Unit::TestCase\n\n  #Test methods MUST start with test_\n  def test_normal\n    assert_equal 24, factorial(4),"4! should be 24"\n  end\n\n  # Add many other test methods here\n  def test_another_normal\n    assert_equal 120, factorial(5), "5! should be 120"\n  end\n\n  # Test 0! boundary\n  def test_zero\n    assert_equal 1, factorial(0), "0! should be 1"\n  end\n\n  # Test -x! boundary\n  def test_negative\n    assert_raise(RuntimeError) { factorial(-1)}\n  end\n\n  # Test for string argument\n  def test_string\n    assert_raise(RuntimeError) { factorial("HelloWorld") }\n  end\nend\n	B:\\Portfolio\\Factorial	19	5
53	2014-12-07 13:03:27	2014-11-29 13:49:06	FizzBuzz.py	Simple python exercise	# <package>\n#     Fizz Buzz\n# <.package>\n# <description>\n#     Simple python exercise\n# <.description>\n# <keywords>\n#     trivial\n# <.keywords>\n\n#Iterate over the integers 1-100 and Print 'Fizz' when\n#the number is divisible by 5, 'Buzz' when it is divisible\n#by 7, and 'FizzBuzz' when divisible by both, and the\n#number itself for all other cases \nfor num in range(1, 101):\n\tif num%5 == 0:\n\t\tprint('Fizz')\n\telif num%7 == 0:\n\t\tprint('Buzz')\n\telif num%7 == 0 and num%5 == 0:\n\t\tprint('FizzBuzz')\n\telse:\n\t\tprint(num)\n	B:\\Portfolio\\FizzBuzz	20	1
54	2014-11-29 14:00:36	2014-11-29 13:49:06	git_metrics.rb	Perform metric analysis on a git log file	# <package>\n#     Git Metrics\n# <.package>\n# <description>\n#     Perform metric analysis on a git log file\n# <.description>\n# <keywords>\n#     git, metric analysis\n# <.keywords>\n\n# Script that obtains various git metrics from a basic git log file\nrequire "date"\n\n# Given an array of git log lines, count the number of commits in the log\ndef num_commits(lines)\n  commits = 0\n  lines.each do |l|\n    if l.start_with?("commit") then commits += 1 end\n  end\n  commits\nend\n\n# Given an array of git log lines, count the number of different authors\n#   (Don't double-count!)\ndef num_developers(lines)\n  authors = []\n  lines.each { |l| authors.push(l.scan(/<.*>/)) if l.start_with?("Author:") }\n  authors.uniq!\n  authors.size\nend\n\n# Given an array of Git log lines, compute the number of days this was in development\n# Note: you cannot assume any order of commits (e.g. you cannot assume that the newest commit is first).\ndef days_of_development(lines)\n  dates = []\n  lines.each do |l|\n    dates.push Date.parse(l.gsub(/Date: +/,"")) if l.start_with?("Date:")\n  end\n  dates.sort!\n  (dates.last - dates.first).to_i\nend\n\n# This is ruby idiom that allows us to use both unit testing and command line processing\n# Does not get run when we use unit testing, e.g. ruby phonetic_test.rb\n# These commands will invoke this code with our test data: \n#    ruby git_metrics.rb < ruby-progressbar-short.txt\n#    ruby git_metrics.rb < ruby-progressbar-full.txt\nif __FILE__ == $PROGRAM_NAME\n  lines = []\n  $stdin.each { |line| lines << line }\n  puts "Number of commits: #{num_commits lines}"\n  puts "Number of developers: #{num_developers lines}"\n  puts "Number of days in development: #{days_of_development lines}"\nend\n\n	B:\\Portfolio\\GitMetrics	21	5
55	2014-11-29 14:01:15	2014-11-29 13:49:06	test_git_metrics.rb	Tests the git metric functions	# <package>\n#     Git Metrics\n# <.package>\n# <description>\n#     Tests the git metric functions\n# <.description>\n# <keywords>\n#     unit test\n# <.keywords>\n\nrequire_relative 'git_metrics'\nrequire 'test/unit'\n\nclass TestGitMetrics < Test::Unit::TestCase\n\n  def test_commit_example\n    assert_equal 2, num_commits(["commit abc", "commit 123"]), "Should have counted two commits"\n  end\n\n  def test_dates_with_three_days\n    exp = [ "Date:  Sun Jan 26 21:25:22 2014 -0600",\n            "Date:  Sun Jan 23 21:25:22 2014 -0600",\n            "Date:  Sun Jan 25 21:25:22 2014 -0600"]\n    assert_equal 3, days_of_development(exp), "Should have been a 3 days difference"\n\n    # Another simple test\n    exp.push "Date: Sun Jan 10 21:24:22 2014 -0600"\n    assert_equal 16, days_of_development(exp), "Should have been 16 days"\n\n    # Test year/month bridge\n    exp.push "Date: Sun Dec 5 21:24:22 2013 -0600"\n    assert_equal 52, days_of_development(exp), "Should be 52"\n  end\n\n  #Add more tests here\n  def test_2_authors\n    authors = ["<thehulk@angry.rawr>", "<thor@hammertime.asgard>"]\n    assert_equal 2, num_developers(authors)\n  end\nend\n	B:\\Portfolio\\GitMetrics	21	5
56	2014-11-29 14:48:01	2014-11-29 14:46:09	AgeGroup.java	Stores information for and Age Group, used in the histogram	/*\n<package>\n\tJava GUI Histogram\n<.package>\n<description>\n    Stores information for and Age Group, used in the histogram\n<.description>\n<keywords><.keywords>\n*/\n\nimport java.text.*;\n\nclass AgeGroup\n{\n\tprivate String ageGroup;\n\tprivate int maleNum, femaleNum;\n\tprivate double malePerc, femalePerc;\n\t\n\tpublic AgeGroup()\n\t{\n\t\tageGroup = "NA";\n\t\tmaleNum = 0;\n\t\tfemaleNum = 0;\n\t}\n\t\n\tpublic AgeGroup(String g, int fNum, int mNum)\n\t{\n\t\tageGroup = g;\n\t\tmaleNum = mNum;\n\t\tfemaleNum = fNum;\n\t}\n\t\n\t//Sets the percentage for the agegroup within the total population\n\tpublic void setPercent(int tot)\n\t{\n\t\tDecimalFormat df = new DecimalFormat("#.####");\n\t\tfemalePerc = Double.valueOf(df.format(((double)femaleNum/(double)tot) * 100));\n\t\tmalePerc = Double.valueOf(df.format(((double)maleNum/(double)tot) * 100));\n\t}\n\t\n\tpublic String getGroup()\n\t{\n\t\treturn ageGroup;\n\t}\n\t\n\tpublic int getFemaleNum()\n\t{\n\t\treturn femaleNum;\n\t}\n\t\n\tpublic int getMaleNum()\n\t{\n\t\treturn maleNum;\n\t}\n\t\n\tpublic double getMalePerc()\n\t{\n\t\treturn malePerc;\n\t}\n\t\n\tpublic double getFemalePerc()\n\t{\n\t\treturn femalePerc;\n\t}\n\n}//E - AgeGroup{}	B:\\Portfolio\\Java GUI Histogram	22	2
57	2014-11-29 14:45:50	2014-11-29 14:46:09	DistributionMain.java	Displays Histogram information for a list of years	/*\n<package>\n\tGraphical Histogram\n<.package>\n<description>\n    Displays Histogram information for a list of years\n<.description>\n<keywords>\n    swing, frame, histogram\n<.keywords>\n*/\n\nimport java.awt.*;\nimport javax.swing.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport java.util.*;\n\npublic class DistributionMain extends JFrame{\n\t\tprivate JTextArea win = new JTextArea();\n\t\tprivate JTextField year[] = new JTextField[6];\n\t\tprivate JScrollPane scroller = new JScrollPane(win);\n\t\tprivate JButton graph = new JButton("Graph");\n\t\tprivate JButton data = new JButton("Data");\n\t\tprivate JButton next = new JButton("Next >>");\n\t\tprivate JButton prev = new JButton("<< Previous");\n\t\tprivate Color DEFAULT = new Color(0,0,0);\n\t\tprivate String avail_years[] = {"2011",\n\t\t\t\t\t\t\t\t\t\t\t\t  "2020",\n\t\t\t\t\t\t\t\t\t\t\t\t  "2030",\n\t\t\t\t\t\t\t\t\t\t\t\t  "2040",\n\t\t\t\t\t\t\t\t\t\t\t\t  "2050",\n\t\t\t\t\t\t\t\t\t\t\t\t  "2060"};\n\t\tprivate int navTrack = 0;\n\t\tprivate Color highlight = new Color(210,255,210);\t\n\t\tprivate Color text = new Color(10,10,255);\t\n\t\t\n\tpublic static void main(String[] args)\n\t{\n  \t\t DistributionMain frame = new DistributionMain();\n   \t frame.setTitle("Population Distribution Graph by Stephen Brewster");\n   \t frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n   \t frame.setSize(800,600);\n   \t frame.setVisible(true);\n\t}//E - main\n\t\n\tpublic DistributionMain()\n\t{\n\t\tDEFAULT = graph.getBackground();\t//Creates the default color for buttons\n\t\t\n\t\t//Initialize year labels\n\t\tfor (int i = 0; i < 6; i++)\n\t\t{\n\t\t\tyear[i] = new JTextField(avail_years[i]);\n\t\t\tyear[i].setEditable(false);\n\t\t\tyear[i].setFont(new Font("Courier New", Font.BOLD, 20));\n\t\t\tyear[i].setHorizontalAlignment(JTextField.CENTER);\n\t\t\tyear[i].setBackground(Color.white);\n\t\t\tyear[i].setBorder(BorderFactory.createBevelBorder(1));\n\t\t}\n \n \t\tyear[0].setBackground(highlight);\n\t\tyear[0].setForeground(text);\n//---------------------------------------------------------------------------\n\n//Creates navigation button panes\n\t\tJPanel next_pane = new JPanel();\n\t\tnext_pane.setLayout(new GridLayout(1,1));\n\t\tnext_pane.setBorder(BorderFactory.createBevelBorder(1));\n\t\t\tnext_pane.add(next);\n\t\t//Previous\t\n\t\tJPanel prev_pane = new JPanel();\n\t\tprev_pane.setLayout(new GridLayout(1,1));\n\t\tprev_pane.setBorder(BorderFactory.createBevelBorder(1));\n\t\t\tprev_pane.add(prev);\n\t\t//Next\t\n\t\tJPanel nav_pane = new JPanel();\n\t\tnav_pane.setLayout(new GridLayout(1,2));\n\t\tnav_pane.setBorder(BorderFactory.createCompoundBorder(\n\t\t\t\t\t\t\t\t BorderFactory.createTitledBorder("Navigation Options"),\n\t\t\t\t\t\t\t\t BorderFactory.createBevelBorder(1)));\n\t\t\t\t\t\t\t\t \n\t\tnav_pane.setBackground(Color.white);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tnav_pane.add(prev_pane);\n\t\t\tnav_pane.add(next_pane);\n//--------------------------------------------------------------------------\t\t\t\t\t\n\n//Creates the Graph/Data panes\n\t\tJPanel button_pane = new JPanel();\n\t\tbutton_pane.setLayout(new GridLayout(1,2));\n\t\tbutton_pane.setBorder(BorderFactory.createCompoundBorder(\n\t\t\t\t\t\t\t\t\t BorderFactory.createTitledBorder("Display Options"),\n\t\t\t\t\t\t\t\t\t BorderFactory.createBevelBorder(1)));\n\n\t\tbutton_pane.setBackground(Color.white);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t//Graph\n\t\t\tJPanel graph_pane = new JPanel();\n\t\t\tgraph_pane.setLayout(new GridLayout(1,1));\n\t\t\tgraph_pane.setBorder(BorderFactory.createBevelBorder(1));\n\t\t\t\tgraph_pane.add(graph);\n\t\t\t//Data\n\t\t\tJPanel data_pane = new JPanel();\n\t\t\tdata_pane.setLayout(new GridLayout(1,1));\n\t\t\tdata_pane.setBorder(BorderFactory.createBevelBorder(1));\n\t\t\t\tdata_pane.add(data);\t\t\t\n\t\t\tbutton_pane.add(graph_pane);\n\t\t\tbutton_pane.add(data_pane);\n//--------------------------------------------------------------------------\n\n//Constructs full left side pane\n\t\tJPanel control_pane = new JPanel();\n\t\tcontrol_pane.setLayout(new GridLayout(8,1));\n\t\tcontrol_pane.setBorder(BorderFactory.createBevelBorder(1));\n\t\tcontrol_pane.setBackground(Color.white);\t\t\n\t\t\tcontrol_pane.add(nav_pane);\n\t\t\tcontrol_pane.add(button_pane);\n\t\tfor (int i = 0; i < 6; i++)\n\t\t{\n\t\t\tyear[i].setBorder(BorderFactory.createEmptyBorder(10,0,10,0));\n\t\t\tcontrol_pane.add(year[i]);\n\t\t}\t\t\t\t\n\t\tcontrol_pane.setPreferredSize(new Dimension(230,0));\n//--------------------------------------------------------------------------\n\n\t\t//OUTPUT WINDOW PANE\n\t\tJPanel win_panel = new JPanel();\n\t\twin.setFont(new Font("courier new", Font.PLAIN, 16));\n\t\twin_panel.setLayout(new GridLayout(1,1));\n\t\twin_panel.setBorder(BorderFactory.createTitledBorder("Display"));\n\t\t\twin.setLineWrap(true);\n\t\t\twin.setWrapStyleWord(true);\n\t\twin_panel.add(scroller);\n\t\n\t\t//Create listeners\n\t\tButtonListener btListener = new ButtonListener();\n\t\t\tgraph.addActionListener(btListener);\n\t\t\tdata.addActionListener(btListener);\n\t\t\tnext.addActionListener(btListener);\n\t\t\tprev.addActionListener(btListener);\n\t\t\n\t\tadd(control_pane, BorderLayout.WEST);\t\t\n\t\tadd(win_panel, BorderLayout.CENTER);\n\n\t}//E - Distribution constructor\n\t\n\tclass ButtonListener implements ActionListener\n\t{\n  \t\tpublic void actionPerformed(ActionEvent e)\n \t \t{\n   \t\t//Displays distribution graph \t\t\n\t\t\tif (e.getActionCommand().equals("Graph"))\n    \t\t{\n\t\t\t\tdisplayGraph();\n\t\t\t\t\t\t\t\t\n\t\t\t\t//Alternate color on buttons\n\t\t\t\tgraph.setBackground(Color.white);\n\t\t\t\tdata.setBackground(DEFAULT);\n    \t\t}\n\t\t\t\n\t\t\t//Displays the raw data from file\n\t\t\tif (e.getActionCommand().equals("Data"))\n\t\t\t{\n\t\t\t\tdisplayData();\n\t\t\t\t\t\t\t\t\n\t\t\t\t//Alternate color on buttons\n\t\t\t\tdata.setBackground(Color.white);\n\t\t\t\tgraph.setBackground(DEFAULT);\n\t\t\t}\n\t\t\t\n\t\t\t//Moves to next available year\n\t\t\tif (e.getActionCommand().equals("Next >>"))\n\t\t\t{\n\t\t\t\tyear[navTrack].setBackground(Color.white);\n\t\t\t\tyear[navTrack].setForeground(Color.black);\n\t\t\t\tnavTrack++;\n\t\t\t\t\n\t\t\t\tif(navTrack > 5)\n\t\t\t\t\t\tnavTrack = 0;\n\t\t\t\t\t\t\n\t\t\t\tyear[navTrack].setBackground(highlight);\n\t\t\t\tyear[navTrack].setForeground(text);\n\t\t\t\t\n\t\t\t\t//Automatically displays the selected option\n\t\t\t\tif (graph.getBackground() == Color.white)\n\t\t\t\t\tdisplayGraph();\n\t\t\t\telse if(data.getBackground() == Color.white)\n\t\t\t\t\tdisplayData();\n\t\t\t}//Next >>\n\t\t\t\n\t\t\tif (e.getActionCommand().equals("<< Previous"))\n\t\t\t{\n\t\t\t\tyear[navTrack].setBackground(Color.white);\t\t\t\t\n\t\t\t\tyear[navTrack].setForeground(Color.black);\n\t\t\t\tnavTrack--;\n\t\t\t\t\n\t\t\t\tif(navTrack < 0)\n\t\t\t\t\t\tnavTrack = 5;\n\t\t\t\t\n\t\t\t\tyear[navTrack].setBackground(highlight);\n\t\t\t\tyear[navTrack].setForeground(text);\t\t\t\t\n\t\t\t\t\n\t\t\t\t//Automatically displays the selected option\n\t\t\t\tif (graph.getBackground() == Color.white)\n\t\t\t\t\tdisplayGraph();\n\t\t\t\telse if(data.getBackground() == Color.white)\n\t\t\t\t\tdisplayData();\n\t\t\t}\n\t\t}\n\t}//E - ButtonListener{}\n\t\n\t//Displays the currently loaded dispersion graph\n\tprivate void displayGraph()\n\t{\n\t\twin.setText("");\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\tYear y = new Year(year[navTrack].getText() + ".txt");\n  \t\t\t\twin.setText(y.printGraph(year[navTrack].getText()));\n\t\t\t}\n\t\t\tcatch(IOException err)\n\t\t\t{\n\t\t\t\twin.setText("File, " + year[navTrack].getText() + ".txt, not found");\n\t\t\t}\t\t\n\t}//displayGraph()\n\t\n\t//Displays the currently loaded data\n\tprivate void displayData()\n\t{\n\t\twin.setText("");\n\t\t\ttry\n\t\t\t{\n\t\t\t\tYear y = new Year(year[navTrack].getText() + ".txt");\n\t\t\t\twin.setText(y.printYear(year[navTrack].getText()));\n\t\t\t}\n\t\t\tcatch(IOException err)\n\t\t\t{\n\t\t\t\twin.setText("File, " + year[navTrack].getText() + ".txt, not found");\n\t\t\t}\n\t}//displayData()\n}//E - DistributionMain	B:\\Portfolio\\Java GUI Histogram	23	2
58	2014-11-29 14:49:08	2014-11-29 14:46:09	Year.java	Utility functions for displaying the histogram	/*\n<package>\n\tJava GUI Histogram\n<.package>\n<description>\n    Utility functions for displaying the histogram\n<.description>\n<keywords>\n    file, parser\n<.keywords>\n*/\n\n\nimport java.io.*;\n\nclass Year\n{\n\tprivate AgeGroup fullYear[];\n\tprivate int Year_Total_Pop = 0;\n\tprivate String groupLabels[] = {"  0-4",\n\t\t\t\t\t\t\t\t\t\t\t  "  5-9",\n\t\t\t\t\t\t\t\t\t\t\t  "10-14",\n\t\t\t\t\t\t\t\t\t\t\t  "15-19",\n\t\t\t\t\t\t\t\t\t\t\t  "20-24",\n\t\t\t\t\t\t\t\t\t\t\t  "25-29",\n\t\t\t\t\t\t\t\t\t\t\t  "30-34",\n\t\t\t\t\t\t\t\t\t\t\t  "35-39",\n\t\t\t\t\t\t\t\t\t\t\t  "40-44",\n\t\t\t\t\t\t\t\t\t\t\t  "45-49",\n\t\t\t\t\t\t\t\t\t\t\t  "50-54",\n\t\t\t\t\t\t\t\t\t\t\t  "55-59",\n\t\t\t\t\t\t\t\t\t\t\t  "60-64",\n\t\t\t\t\t\t\t\t\t\t\t  "65-69",\n\t\t\t\t\t\t\t\t\t\t\t  "70-74",\n\t\t\t\t\t\t\t\t\t\t\t  "75-79",\n\t\t\t\t\t\t\t\t\t\t\t  "  80+",\n\t\t\t\t\t\t\t\t\t\t\t  "80-84",\n\t\t\t\t\t\t\t\t\t\t\t  "85-89",\n\t\t\t\t\t\t\t\t\t\t\t  "90-94",\n\t\t\t\t\t\t\t\t\t\t\t  "95-99",\n\t\t\t\t\t\t\t\t\t\t\t  " 100+"};\n\t\n\tpublic Year(String yr) throws IOException\n\t{\n\t\tString femaleline, maleline;\n\n\t\t\tFileReader theFile = new FileReader(yr);\n\t\t\tBufferedReader readIn = new BufferedReader(theFile);\n\t\t\t\n\t\t\tfemaleline = readIn.readLine();\n\t\t\tmaleline = readIn.readLine();\n\t\t\t\n\t\t\tString femSplit[] = femaleline.split("\\\\s");\n\t\t\tString maleSplit[] = maleline.split("\\\\s");\n\t\t\t\n\t\t\tfullYear = new AgeGroup[femSplit.length];\n\t\t\t\n\t\t\tfor(int i = 0; i < femSplit.length; i++)\n\t\t\t{\n\t\t\t\tfullYear[i] = new AgeGroup(groupLabels[i], \n\t\t\t\t\t\t\t\t\t\t\t\t\tInteger.parseInt(femSplit[i]),\n\t\t\t\t\t\t\t\t\t\t\t\t\tInteger.parseInt(maleSplit[i]));\n\t\t\t\t\n\t\t\t\tYear_Total_Pop += fullYear[i].getMaleNum() + \n\t\t\t\t\t\t\t\t\t\tfullYear[i].getFemaleNum();\n\n\t\t\t}\n\t\t\tcalcPercent();\n\t}//E - Year()\n\t\n   //Generates full graph for the year\n\tpublic String printGraph(String year)\n\t{\n\t\t//Print hearding\n\t\tString ftemp = "", mtemp = "", fullgraph = "";\n\t\tfullgraph += ("   +++++ Census data processed from: " + year + ".txt" + " +++++\\n\\n");\n\t\tfullgraph += ("\\t\\t  Female | Male\\n");\n\t\t\n\t\tfor(int i = 0; i < 22; i++)\n\t\t{\n\t\t\tfullgraph += (groupLabels[i]); //Prints age bracket\n\t\t\t\n\t\t\t//Loops through percentage range and builds % bars for both genders\n\t\t\tfor(double x = 4.0; x > 0.0; x -= 0.2)\n\t\t\t{\n\t\t\t\tif(fullYear[i].getFemalePerc() > (x - .2))\t//female\n\t\t\t\t\tftemp += "*";\n\t\t\t\telse\n\t\t\t\t\tftemp += " ";\t\n\t\t\t\t\t\n\t\t\t\tif(fullYear[i].getMalePerc() > (4.0 - x)) //male\n\t\t\t\t\tmtemp += "*";\n\t\t\t\telse\n\t\t\t\t\tmtemp += " ";\t\n\t\t\t}//E - for(x)\n\n\t\t\tfullgraph += (ftemp + "|" + mtemp + "\\n"); //Print bars for both genders\n\t\t\t\n\t\t\t//Reset bar strings for both genders\n\t\t\tftemp = "";\n\t\t\tmtemp = "";\t\n\t\t}//for(i)\n\t\t\n\t\t//Print bottom scale\n\t\tfullgraph += ("     ");\n\t\n\t\tfor(int i = 0; i < 4; i++) //Female side\n\t\t\tfullgraph += ("+----");\n\t\t\n\t\tfullgraph += ("+"); //0 marker\n\t\t\t\n\t\tfor(int i = 0; i < 4; i++) //Male side\n\t\t\tfullgraph += ("----+");\n\t\t\t\n\t\tfullgraph += ("\\n  %  "); //Axis Label\n\t\t\t\t\n\t\tfor(int i = 4; i > -5; i--) //Numerical Label\n\t\t\tfullgraph += (Math.abs(i) + "    "); \n\t\t\n\t\treturn fullgraph;\n\t}//printGraph()\n\t\n\t//Generates a pure data printout of the year\n\tpublic String printYear(String yr)\n\t{\n\t\tString fullgraph = "";\n\t\tfullgraph += "\\t+++++ Data extracted from: " + yr + ".txt" + " +++++\\n\\n";\n\t\tint temp = 0;\n\t\tfor(int i = 0; i < fullYear.length; i++)\n\t\t{\n\t\t\ttemp = fullgraph.length(); //Used in aligning female column\n\n\t\t\t//Adds male stats to String\n\t\t\tfullgraph += (fullYear[i].getGroup() + " " + \n\t\t\t\t\t\t\t  "Male = " + fullYear[i].getMaleNum() + ", " +\n\t\t\t\t\t\t\t  fullYear[i].getMalePerc() + "%");\n\t\n\t\t\t\t//Alligns Female column left justified\n\t\t\t\tfor(int j = 0; j < (29 - ((fullgraph.length() - j) - temp)); j++)\n\t\t\t\t{\n\t\t\t\t\tfullgraph += " ";\n\t\t\t\t}\n\n\t\t\t//Adds female stats to String\n\t\t\tfullgraph += ("Female = " + fullYear[i].getFemaleNum() + ", " + \n\t\t\t\t\t\t\t  fullYear[i].getFemalePerc() + "%\\n");\n\t\t\t\t\t\t\t  \n\t\t}//for(i)\n\t\t\n\t\tfullgraph += ("\\nTotal Pop = " + Year_Total_Pop + " (thousands)");\n\t\t\n\t\treturn fullgraph;\n\t}//E - printYear()\n\t\n\t//Calculates and sets the percentage of that group within the total population\n\tpublic void calcPercent()\n\t{\n\t\tfor(int i = 0; i < 22; i++)\n\t\t{\n\t\t\tfullYear[i].setPercent(Year_Total_Pop);\n\t\t}\t\n\t}//calcPercent()\n\t\n\n}//Year{}	B:\\Portfolio\\Java GUI Histogram	22	2
59	2014-12-07 15:15:21	2014-10-17 13:57:51	rebuild_db.py	Main module for the LessonsLearned application	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Main module for the LessonsLearned application\n# <.description>\n# <keywords>\n#     driver\n# <.keywords>\n\nimport util.initialize_new_database as initerizer\nimport util.debug as debug\n\ndb_name = "portfolio"\nportfolio_root = "B:\\Portfolio"\n\n# Clear log file\ndebug.clear()\n\nif initerizer.make_new(db_name):\n    initerizer.scan_file_system(portfolio_root);\n	B:\\Portfolio\\LessonsLearned	24	1
60	2014-12-06 22:24:00	2014-11-12 22:36:46	search_interface.py	Provides cmd line interface to portfolio database	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#    Provides cmd line interface to portfolio database\n# <.description>\n# <keywords>\n#     command line interface\n# <.keywords>\n\nimport db.query as query\nimport util.debug as debug\nimport util.statistics as statistics\n\ndef display_menu():\n    print "Commands and syntax\\n"\n    print "-- Simple Searching --"\n    print "To search for substrings within the script text, readme file, module description or by keyword use 'search TARGET SUBSTRING'"\n    print "TARGET can be one of: keyword, code, language"\n    print "SUBSTRING is the search term of your choice\\n"\n    print "Syntax:"\n    print "search keyword|code|language searchString\\n"\n    print "Other commands:"\n    print "query - execute direct SQL queries"\n    print "exit - leave the application"\n    print "keywords - view list of keywords"\n    print "languages - view list of programming languages"\n    print "packages - view list of all software packages"\n    print "stats - view all stats over the database"\n    \n\ndef parse_command(command):\n    try:\n        splitter = command.split(' ')\n        cmd = splitter[0]\n        \n        if cmd == 'search':\n            search(splitter[1], splitter[2])\n        elif cmd == 'keywords':\n            display_all_keywords()\n        elif cmd == 'packages':\n            display_all_packages()\n        elif cmd == 'languages':\n            display_all_languages()\n        elif cmd == 'help':\n            display_menu()\n        elif cmd == 'query':\n            execute_sql_query()\n        elif cmd == 'stats':\n            statistics.generate_all_stats()\n        else:\n            debug.error("Command not recognized: " + cmd)\n    except Exception, err:\n        debug.error("Invalid command or syntax: " + err.message)\n        print err\n    \ndef exiting():\n    print "Exiting...\\n"\n\ndef display_all_keywords():\n    results = query.get_all_keywords()\n    display(results)\n\ndef display_all_languages():\n    results = query.get_all_languages()\n    display(results)\n\ndef display_all_packages():\n    results = query.get_all_packages()\n    display(results)\n    \ndef search(search_on, search_term):\n    if search_on == "keyword":\n        results = query.find_by_keyword(search_term)\n    if search_on == "code":\n        results = query.find_in_code(search_term)\n    if search_on == "language":\n        results = query.find_by_language(search_term)        \n\n    display(results)\n\ndef execute_sql_query():\n    sql = ''\n    while True:\n        print "Type quit to leave the query tool"\n        sql = raw_input("SQL> ")\n\n        if sql == 'quit':\n            break\n        \n        results = query.sql_query(sql, None)\n        display(results)        \n        \ndef display(results):\n    for result in results:\n        line = ''\n        for index in range(len(result)):\n            line += str(result[index]) + " "\n        print line\n\ncmd = ''\n\nprint "Type help"\n\nwhile cmd != "exit":\n    cmd = raw_input(">> ")\n    parse_command(cmd)    \n        \n    \n	B:\\Portfolio\\LessonsLearned	24	1
61	2014-12-07 15:16:13	2014-12-07 14:19:35	update_db.py	Scans file system to find any updated files	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Scans file system to find any updated files\n# <.description>\n# <keywords>\n#     driver\n# <.keywords>\n\nimport util.initialize_new_database as initerizer\nimport util.debug as debug\n\ndb_name = "portfolio"\nportfolio_root = "B:\\Portfolio"\n\n# Clear log file\ndebug.clear()\n\niniterizer.run_update(portfolio_root)\n	B:\\Portfolio\\LessonsLearned	24	1
62	2014-12-08 16:59:19	2014-12-06 16:11:49	alter_tables.py	Module to set the constraints, permissions and any other features of the portfolio database	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Module to set the constraints, permissions and any other features of the portfolio database\n# <.description>\n# <keywords>\n#     dml, alter tables, permissions, constraints, database\n# <.keywords>\n\nimport pg_get_connection\nimport util.debug as debug\n\ndef set_permissions():\n    cur, conn = pg_get_connection.create_conn("portfolio")\n    \n    try:\n        cur.execute("GRANT SELECT ON ALL TABLES IN SCHEMA public TO visitor;")\n        conn.commit()\n    except Exception, err:\n        debug.error(err.message)\n\n    cur.close()\n    conn.close()\n\ndef create_roles():\n    cur, conn = pg_get_connection.create_conn("portfolio")\n    \n    try:\n        cur.execute("CREATE ROLE visitor;")\n        conn.commit()\n    except Exception, err:\n        debug.error(err.message)\n\n    cur.close()\n    conn.close()\n\ndef set_constraints():\n    cur, conn = pg_get_connection.create_conn("portfolio")\n    \n    try:\n        # Script Constraints ---\n        # Language foreign key\n        cur.execute("ALTER TABLE script ADD CONSTRAINT fk_language FOREIGN KEY (languageid) REFERENCES language(id);")\n        # Package foreign key\n        cur.execute("ALTER TABLE script ADD CONSTRAINT fk_package FOREIGN KEY (packageid) REFERENCES package(id);")\n\n        # Haskeyword Constraints ---\n        # Script and Keyword foreign keys\n        cur.execute("ALTER TABLE haskeyword ADD CONSTRAINT fk_keyword FOREIGN KEY (keywordid) REFERENCES keyword(id) ON DELETE CASCADE;")\n        cur.execute("ALTER TABLE haskeyword ADD CONSTRAINT fk_script FOREIGN KEY (scriptid) REFERENCES script(id) ON DELETE CASCADE;")\n\n        # Hasreadme Constraints ---\n        cur.execute("ALTER TABLE hasreadme ADD CONSTRAINT fk_package FOREIGN KEY (packageid) REFERENCES package(id) ON DELETE CASCADE;")\n        \n        conn.commit()\n    except Exception, err:\n        debug.error(err.message)\n\n    cur.close()\n    conn.close()\n	B:\\Portfolio\\LessonsLearned\\db	24	1
63	2014-12-08 16:58:08	2014-10-17 13:11:36	create_tables.py	Module to create all tables in the LessonsLearned application database	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Module to create all tables in the LessonsLearned application database\n# <.description>\n# <keywords>\n#     sql, try, except, tuple\n# <.keywords>\n\nimport pg_get_connection\nimport util.debug as debug\n\ndef create(dbName):\n    cur, conn = pg_get_connection.create_conn(dbName)\n\n    cur.execute("CREATE TABLE script(id serial NOT NULL, last_modified timestamp NOT NULL, created_on timestamp NOT NULL, name character varying NOT NULL, description character varying, content character varying NOT NULL, path character varying NOT NULL, packageid integer NOT NULL, languageid integer NOT NULL, primary key(id))")\n    cur.execute("CREATE TABLE keyword(id serial NOT NULL, keyword character varying UNIQUE NOT NULL, primary key(id))")\n    cur.execute("CREATE TABLE haskeyword(scriptId integer NOT NULL, keywordId integer NOT NULL, primary key(scriptId, keywordId))")\n    cur.execute("CREATE TABLE package(id serial NOT NULL, name character varying NOT NULL, primary key(id))")\n    cur.execute("CREATE TABLE unsorted(id serial NOT NULL, file character varying NOT NULL, primary key(id))")\n    cur.execute("CREATE TABLE readme(id serial NOT NULL, path character varying NOT NULL, content character varying, primary key(id))")\n    cur.execute("CREATE TABLE hasreadme(readmeid integer NOT NULL, packageid integer NOT NULL, primary key(readmeid, packageid))")\n    cur.execute("CREATE TABLE language(id serial NOT NULL, name character varying NOT NULL, primary key(id))")\n    \n    conn.commit()\n    cur.close()\n    conn.close()\n\n\n\n\n\n    \n	B:\\Portfolio\\LessonsLearned\\db	24	1
64	2014-12-07 12:50:48	2014-10-17 13:54:28	drop_tables.py	Module to drop all tables in the LessonsLearned application database	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Module to drop all tables in the LessonsLearned application database\n# <.description>\n# <keywords>\n#     sql, try, except, tuples\n# <.keywords>\n\nimport pg_get_connection\nimport util.debug as debug\n\ndef drop(dbName):\n    cur, conn = pg_get_connection.create_conn(dbName)\n\n    cur.execute("DROP TABLE package CASCADE;")\n    cur.execute("DROP TABLE language CASCADE;")\n    cur.execute("DROP TABLE script CASCADE;")\n    cur.execute("DROP TABLE keyword CASCADE;")\n    cur.execute("DROP TABLE haskeyword CASCADE;")\n    cur.execute("DROP TABLE unsorted CASCADE;")\n    cur.execute("DROP TABLE readme CASCADE;")\n    cur.execute("DROP TABLE hasreadme CASCADE;")\n    \n    conn.commit()\n    cur.close()\n    conn.close()\n	B:\\Portfolio\\LessonsLearned\\db	24	1
65	2014-12-08 17:15:44	2014-10-17 15:58:31	ll_db_io.py	Module to handle SQL transactions with the database for the LessonsLearned application	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Module to handle SQL transactions with the database for the LessonsLearned application\n# <.description>\n# <keywords>\n#     psycopg2, postgresql, database, try, except, sql\n# <.keywords>\n\nimport pg_get_connection\nimport util.debug as debug\n\ndef insert_new_script(values):\n    if values["package"] == None:\n        return\n    \n    cur, conn = pg_get_connection.create_conn("portfolio")\n    new_id = None;\n    \n    # insert to script table\n    try:\n        # Execute Script insert\n        cur.execute("INSERT INTO script (name, content, path, description, packageid, last_modified, created_on, languageid) VALUES(%s, %s, %s, %s, %s, %s, %s, %s) RETURNING id;",\n            (values["name"], values["content"], values["path"], values["description"], values["packageId"], values["lastModified"], values["createdOn"], values["languageId"]))\n        new_id = cur.fetchone()[0]\n        \n        conn.commit()\n        \n        debug.normal("Inserted new script with id: " + str(new_id))\n    except Exception, err:\n        debug.error("Failed to insert file " + values["path"] + "\\\\" + values["name"])\n        debug.error(err.message)\n\n    cur.close()\n    conn.close()\n    \n    return new_id\n\ndef insert_package(values):\n    if values["package"] == None:\n        return None\n    \n    cur, conn = pg_get_connection.create_conn("portfolio")\n    exists = 0\n    \n    # Check for package existence\n    try:\n        cur.execute("SELECT id FROM package WHERE name = %s", [values["package"]])\n        exists = cur.fetchone()\n    except Exception, err:\n        debug.error("Failed to lookup package.")\n        debug.error(err.message)\n\n    if exists > 0:\n        return exists[0]\n    \n    # Doesn't exist yet so insert\n    try:\n        cur.execute("INSERT INTO package (name) VALUES(%s) RETURNING id", [values["package"]])\n        package_id = cur.fetchone()\n        conn.commit()\n        debug.normal("Inserted new package " + str(values["package"]))\n    except Exception, err:\n        debug.error("Failed to insert package.")\n        debug.error(err.message)\n    \n    cur.close()\n    conn.close()\n    \n    return package_id[0]\n\ndef insert_language(values):\n    cur, conn = pg_get_connection.create_conn("portfolio")\n    exists = 0\n    \n    # Check for package existence\n    try:\n        cur.execute("SELECT id FROM language WHERE name = %s", [values["language"]])\n        exists = cur.fetchone()\n    except Exception, err:\n        debug.error("Failed to lookup package.")\n        debug.error(err.message)\n\n    if exists > 0:\n        return exists[0]\n    \n    # Doesn't exist yet so insert\n    try:\n        cur.execute("INSERT INTO language (name) VALUES(%s) RETURNING id", [values["language"]])\n        language_id = cur.fetchone()\n        conn.commit()\n        debug.normal("Inserted new language " + str(values["language"]))\n    except Exception, err:\n        debug.error("Failed to insert language.")\n        debug.error(err.message)\n    \n    cur.close()\n    conn.close()\n    \n    return language_id[0]\n            \ndef insert_new_keywords(values, script_id):\n    # don't insert null\n    if values["keywords"] == None:\n        return;\n\n    cur, conn = pg_get_connection.create_conn("portfolio")\n    keyword_ids = []\n    word_clean = '';\n    keywords = values["keywords"].split(",")\n\n    # Iterate through keywords and add insert them if they don't exist\n    # Retrieve the id of the keyword if it exists\n    # Returns the list of keyword id(s) that goes to the script\n    for word in keywords:\n        word_clean = word.strip()\n        exists = ''\n\n        # First see if the keyword already exists\n        try:\n            cur.execute("""SELECT * FROM keyword WHERE keyword = %s;""", [word_clean])\n            exists = cur.fetchone()\n        except Exception, err:\n            debug.error("Lookup failed: " + word_clean)\n            debug.error(err.message)\n\n        # Doesn't exist yet so insert\n        if exists == None:\n            try:\n                cur.execute("INSERT INTO keyword (keyword) VALUES(%s) RETURNING id;", [word_clean])\n                keyword_id = cur.fetchone()[0] # get the id of the new keyword\n                \n                conn.commit()\n                \n                keyword_ids.append(keyword_id)\n                debug.normal("Inserted new keyword: " + word_clean + " with id: " + str(keyword_id))\n            except Exception, err:\n                debug.error("Failed to insert keyword: " + word_clean)\n                debug.error(err.message)\n        else:\n            keyword_ids.append(exists[0]) # It already exists so add existing id to the list\n            debug.normal("Keyword " + word_clean + " already exists, id: " + str(exists[0]))\n    \n    cur.close()\n    conn.close()\n\n    return keyword_ids\n\ndef insert_new_key_script_rel(script_id, keyword_id):\n    cur, conn = pg_get_connection.create_conn("portfolio")\n\n    try:\n        cur.execute("INSERT INTO haskeyword (scriptid, keywordid) VALUES(%s, %s)",\n                    (script_id, keyword_id))\n        conn.commit()\n        debug.normal("Insert successful. scriptid: " + str(script_id) + ", keywordid: " + str(keyword_id))\n    except Exception, err:\n        debug.error("Failed to insert relation for scriptid: " + str(script_id) + ", keywordid: " + str(keyword_id))\n        debug.error(err.message)\n\n    cur.close()\n    conn.close()\n\ndef insert_readme(readme):\n    cur, conn = pg_get_connection.create_conn("portfolio")\n\n    try:\n        cur.execute("INSERT INTO readme (path, content) VALUES(%s, %s) RETURNING id;",\n                    (readme['path'], readme['content']))\n        readme_id = cur.fetchone()\n        conn.commit()\n        debug.normal('Inserted readme at path ' + readme['path'])\n    except Exception, err:\n        debug.error('Failed to insert README' + readme['path'])\n        debug.error(err.message)\n\n    cur.close()\n    conn.close()\n\n    return readme_id\n\ndef insert_hasreadme(readmeId, packageId):\n    cur, conn = pg_get_connection.create_conn("portfolio")\n\n    try:\n        cur.execute("INSERT INTO hasreadme (readmeid, packageid) VALUES(%s, %s);",\n                    (readmeId, packageId))\n        conn.commit()\n        debug.normal('Inserted hasreadme relation, readmeId:' + str(readmeId) + ', packageId: ' + str(packageId))\n    except Exception, err:\n        debug.error('Failed to insert README relation, readmeId: ' + str(readmeId) + ', packageId: ' + str(packageId))\n        debug.error(err.message)\n\n    cur.close()\n    conn.close()\n\ndef insert_unsorted(values):\n    cur, conn = pg_get_connection.create_conn("portfolio")\n    path_file = [values["path"] + "\\\\" + values["name"]]\n\n    try:\n        cur.execute("INSERT INTO unsorted (file) VALUES(%s)",\n                    path_file)\n        conn.commit()                \n        debug.normal("Inserted unsorted script to " + path_file[0])\n    except Exception, err:\n        debug.error("Failed to insert relation for scriptid: " + str(script_id) + ", keywordid: " + str(keyword_id))\n        debug.error(err.message)\n\n    cur.close()\n    conn.close()\n\n# args is the tuple argument list\ndef sql_update(query, args):\n    cur, conn = pg_get_connection.create_conn("portfolio")\n    \n    try:\n        cur.execute(query, args)\n        conn.commit()\n    except Exception, err:\n        debug.error("Query failed: " + err.message)\n\n    cur.close()\n    conn.close()\n\n	B:\\Portfolio\\LessonsLearned\\db	24	1
66	2014-12-06 16:59:55	2014-10-17 13:11:00	pg_get_connection.py	Module to create all tables for the LessonsLearned application database	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Module to create all tables for the LessonsLearned application database\n# <.description>\n# <keywords>\n#     psycopg2, postgres, connect to database, try, except\n# <.keywords>\n\nimport psycopg2\nimport util.debug as debug\n\ndef create_conn(dbName):\n    try:\n        # Admin connection\n        conn = psycopg2.connect("dbname='"+dbName+"' user='postgres' host='localhost' password='create'")\n    except Exception, err:\n        debug.error("Unable to establish connection")\n        debug.error(err.message)\n\n    cur = conn.cursor()\n    return cur, conn\n\ndef get_visitor_conn(dbName):\n    try:\n        # Visitor connection\n        conn = psycopg2.connect("dbname='"+dbName+"' user='visitor' host='localhost' password='visitor'")\n    except Exception, err:\n        debug.error("Unable to establish connection")\n        debug.error(err.message)\n\n    cur = conn.cursor()\n    return cur, conn\n	B:\\Portfolio\\LessonsLearned\\db	24	1
67	2014-12-06 22:20:13	2014-12-06 15:01:32	query.py	Module to query the database for content	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Module to query the database for content\n# <.description>\n# <keywords>\n#     psycopg2, postgresql, database, try, except, sql\n# <.keywords>\n\nimport pg_get_connection\nimport util.debug as debug\n\ndef find_by_keyword(search):\n    cur, conn = pg_get_connection.get_visitor_conn("portfolio")\n    search = '%'+search+'%'\n\n    try:\n        cur.execute("SELECT s.path||'\\\\'||s.name FROM script as s, keyword as k, haskeyword as hk WHERE k.keyword ILIKE %s AND k.id = hk.keywordid AND s.id = hk.scriptid;",\n                    [search])\n        results = cur.fetchall()\n    except Exception, err:\n        debug.error("Keyword lookup failed: " + err.message)\n\n    cur.close()\n    conn.close()\n\n    return results\n\ndef get_all_keywords():\n    cur, conn = pg_get_connection.get_visitor_conn("portfolio")\n\n    try:\n        cur.execute("SELECT keyword FROM keyword;")\n        results = cur.fetchall()\n    except Exception, err:\n        debug.error("All keywords lookup failed: " + err.message)\n\n    cur.close()\n    conn.close()\n\n    return results\n\ndef find_by_language(search):\n    cur, conn = pg_get_connection.get_visitor_conn("portfolio")\n    \n    try:\n        cur.execute("SELECT s.path||'\\\\'||s.name FROM script as s, language as l WHERE l.name ILIKE %s AND l.id = s.languageid;",\n                    [search])\n        results = cur.fetchall()\n    except Exception, err:\n        debug.error("Language lookup failed: " + err.message)\n\n    cur.close()\n    conn.close()\n\n    return results\n\ndef get_all_languages():\n    cur, conn = pg_get_connection.get_visitor_conn("portfolio")\n\n    try:\n        cur.execute("SELECT name FROM language;")\n        results = cur.fetchall()\n    except Exception, err:\n        debug.error("All languages lookup failed: " + err.message)\n\n    cur.close()\n    conn.close()\n\n    return results\n\ndef get_all_packages():\n    cur, conn = pg_get_connection.get_visitor_conn("portfolio")\n\n    try:\n        cur.execute("SELECT name FROM package;")\n        results = cur.fetchall()\n    except Exception, err:\n        debug.error("All packages lookup failed: " + err.message)\n\n    cur.close()\n    conn.close()\n\n    return results\n\ndef find_in_code(search):\n    cur, conn = pg_get_connection.get_visitor_conn("portfolio")\n    search = '%'+search+'%'\n    \n    try:\n        cur.execute("SELECT s.path||'\\\\'||s.name FROM script as s WHERE s.content ILIKE %s;",\n                    [search])\n        results = cur.fetchall()\n    except Exception, err:\n        debug.error("Code lookup failed: " + err.message)\n\n    cur.close()\n    conn.close()\n\n    return results\n\n# args is the tuple argument list\ndef sql_query(query, args):\n    cur, conn = pg_get_connection.get_visitor_conn("portfolio")\n    \n    try:\n        cur.execute(query, args)\n        results = cur.fetchall()\n    except Exception, err:\n        debug.error("Query failed: " + err.message)\n\n    cur.close()\n    conn.close()\n\n    return results\n    \n	B:\\Portfolio\\LessonsLearned\\db	24	1
68	2014-12-06 16:08:34	2014-10-17 16:07:00	debug.py	Debugging module for Python, prints various debug statements	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Debugging module for Python, prints various debug statements\n# <.description>\n# <keywords>\n#     debug, ouput manager\n# <.keywords>\n\nimport datetime\nimport time\n\ndef normal(arg1):\n    ts = time.time()\n    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')\n    \n    with open("log\\log.txt", "a") as l:\n        l.write(st + "\\t" + arg1+"\\n")\n\n    print st + "\\t" + arg1\n        \ndef error(arg1):\n    ts = time.time()\n    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')\n      \n    with open("log\\log.txt", "a") as l:\n        l.write("\\n" + st + "\\t ERROR " + arg1+"\\n\\n")\n\n    print st + "\\t" + arg1\n\ndef clear():\n    with open("log\\log.txt", "w") as l:\n        return\n	B:\\Portfolio\\LessonsLearned\\util	24	1
69	2014-12-08 17:14:43	2014-10-17 14:01:25	initialize_new_database.py	Set of database initialization tools for the LessonsLearned application	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Set of database initialization tools for the LessonsLearned application\n# <.description>\n# <keywords>\n#     search folder, search file system, tuples\n# <.keywords>\n\nimport db.drop_tables as drop_tables\nimport db.ll_db_io as ll_db_io\nimport db.query as query\nimport db.create_tables as create_tables\nimport db.alter_tables as alter_tables\nimport datetime\n\nimport ll_toolkit\nimport debug\n\nimport os, time\nimport re\n\n# Rebuild the database from scratch\ndef make_new(dbName):\n    try:\n        drop_tables.drop(dbName)\n        create_tables.create(dbName)\n        alter_tables.create_roles()\n        alter_tables.set_permissions()\n        alter_tables.set_constraints()\n    except Exception, err:\n        debug.error("Failed to rebuild database: " + err.message)\n        return False\n\n    return True\n\n# Scans a given directory for valid software files\n# Saves valid files into the portfolio database\ndef scan_file_system(root):\n    \n    # Recursively walk the filesystem using the given root directory\n    for path, directories, files in os.walk(root):\n        for f in files:\n            rootname = ''\n            extension = ''\n            \n            # Check the file extension\n            try:\n                splitted = f.split(".")\n                extension = splitted[1]\n                rootname = splitted[0]\n            except:\n                debug.normal("Invalid file, skipping: " + f)\n                \n            if extension in ll_toolkit.get_supported_types():\n                fname = os.path.join(path, f)\n                debug.normal("Processing file " + fname)\n\n                # Read in the content\n                # Beware! Changing the second arg of open() can delete your portfolio!\n                with open(fname, "r") as content_f:\n                    content = content_f.read()              \n\n                # Build the dictionary of values needed for the db tables\n                values = {}\n                values["description"] = ll_toolkit.get_description(content)\n                values["keywords"] = ll_toolkit.get_keywords(content)\n                values["package"] = ll_toolkit.get_package(content)\n                values["name"] = f\n                values["content"] = content\n                values["path"] = path\n                values["lastModified"] = time.ctime(os.path.getmtime(fname))\n                values["createdOn"] = time.ctime(os.path.getctime(fname))\n                values["language"] = ll_toolkit.get_language(extension)\n\n                # if the 1 required tag is present, save the script and it's related data\n                # else save the full path and filename to the unsorted table\n                if values["package"] != None:\n                    # Insert package or get existing id\n                    values["packageId"] = ll_db_io.insert_package(values)\n\n                    # Insert language or get existing id\n                    values["languageId"] = ll_db_io.insert_language(values)\n\n                    # Insert script\n                    script_id = ll_db_io.insert_new_script(values)\n\n                    # Insert keywords\n                    key_ids = ll_db_io.insert_new_keywords(values, script_id)\n\n                    # Insert keyword script relation\n                    if key_ids != None:\n                        for key_id in key_ids:\n                            ll_db_io.insert_new_key_script_rel(script_id, key_id)\n                else:\n                    ll_db_io.insert_unsorted(values)\n\n            # if this is a readme then insert\n            if rootname.lower() == 'readme':\n                fullname = os.path.join(path, f)\n                \n                with open(fullname, 'r') as readme_f:\n                    readme_content = readme_f.read()\n\n                readme = {\n                    'content' : readme_content,\n                    'path' : path,\n                    'package' : ll_toolkit.get_package(readme_content)\n                }\n\n                # Insert/Get package id\n                package_id = ll_db_io.insert_package(readme)\n                # Insert and get readme id\n                readme_id = ll_db_io.insert_readme(readme)\n                # Insert relation\n                ll_db_io.insert_hasreadme(readme_id, package_id)\n     \ndef run_update(root):\n    # Recursively walk the filesystem using the given root directory\n    for path, directories, files in os.walk(root):\n        for f in files:\n            fullname = os.path.join(path, f)\n\n            existing_rec = query.sql_query("SELECT last_modified FROM script WHERE path||'\\\\'||name = %s", [fullname])\n            if len(existing_rec) > 0:\n                # Existing last_modified in db\n                existing_last_mod = existing_rec[0][0]\n                d1 = datetime.datetime.strptime(str(existing_last_mod), "%Y-%m-%d %H:%M:%S")\n\n                # Current last_modified on file\n                curr_last_mod = time.ctime(os.path.getmtime(fullname))\n                d2 = datetime.datetime.strptime(curr_last_mod, "%a %b %d %H:%M:%S %Y")\n                \n                # Update content if changed\n                if d2 > d1:\n                    with open(fullname, 'r') as the_file:\n                        content = the_file.read()\n                        \n                    ll_db_io.sql_update("UPDATE script SET last_modified = %s,content = %s WHERE path||'\\\\'||name = %s", (curr_last_mod, content, fullname))\n                    debug.normal(fullname + " updated.")\n\n    # Scan files and make sure all files still exist in file system\n    existing_files = query.sql_query("SELECT path||'\\\\'||name FROM script", None)\n    for f in existing_files:\n        fullname = f[0]\n        try:\n            open(fullname, 'r')\n        except Exception, err:\n            debug.normal('Deleting missing file' + fullname)\n            ll_db_io.sql_update("DELETE FROM script WHERE path||'\\\\'||name = %s", [fullname])\n        \n        \n            \n\n    \n	B:\\Portfolio\\LessonsLearned\\util	24	1
70	2014-12-05 17:41:31	2014-10-17 14:57:00	ll_toolkit.py	Set of database initialization tools for the LessonsLearned application	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Set of database initialization tools for the LessonsLearned application\n# <.description>\n# <keywords>\n#     regex, open file, read file\n# <.keywords>\n\nimport re\nimport debug\n\nsupported_types = ["py", "c", "rb", "java", "cpp"]\next_language = {\n    "py" : "python",\n    "cpp" : "c++",\n    "c" : "c",\n    "rb" : "ruby",\n    "java" : "java"\n}\n\n# Add an arbitrary string to prevent the string from being matched\n# when this file is processed by LL\ndesc_tag_s = "<description@>"\ndesc_tag_e = "<.description@>"\ndesc_tag_s = re.sub("@", "", desc_tag_s)\ndesc_tag_e = re.sub("@", "", desc_tag_e)\n\nkeyword_tag_s = "<keywords@>"\nkeyword_tag_e = "<.keywords@>"\nkeyword_tag_s = re.sub("@", "", keyword_tag_s)\nkeyword_tag_e = re.sub("@", "", keyword_tag_e)\n\npackage_tag_s = "<package@>"\npackage_tag_e = "<.package@>"\npackage_tag_s = re.sub("@", "", package_tag_s)\npackage_tag_e = re.sub("@", "", package_tag_e)\n\ndef get_description(content):\n    description_patt = re.compile(desc_tag_s+".*"+desc_tag_e, re.DOTALL)\n    result_string = description_patt.search(content)\n    the_description = None\n    \n    if result_string != None:\n        the_description = result_string.group(0)\n        the_description = re.sub(desc_tag_s + "|" + desc_tag_e, "", the_description)\n        the_description = re.sub("#", "", the_description).strip()\n\n    return the_description\n\ndef get_keywords(content):\n    keyword_patt = re.compile(keyword_tag_s+".*"+keyword_tag_e, re.DOTALL)\n    result_string = keyword_patt.search(content)\n    keywords = None\n    \n    if result_string != None:\n        keywords = result_string.group(0)\n        keywords = re.sub(keyword_tag_s + "|" + keyword_tag_e, "", keywords)\n        keywords = re.sub("#", "", keywords).strip()\n\n    return keywords\n\ndef get_package(content):\n    package_patt = re.compile(package_tag_s+".*"+package_tag_e, re.DOTALL)\n    result_string = package_patt.search(content)\n    package = None\n    \n    if result_string != None:\n        package = result_string.group(0)\n        package = re.sub(package_tag_s + "|" + package_tag_e, "", package)\n        package = re.sub("#", "", package).strip()\n\n    return package\n    \ndef get_supported_types():\n    global supported_types\n    return supported_types\n\ndef get_language(extension):\n    global ext_language\n    return ext_language[extension]\n    \n	B:\\Portfolio\\LessonsLearned\\util	24	1
71	2014-12-06 23:26:55	2014-12-06 21:16:41	statistics.py	Module to generate statistics over the portfolio database	# <package>\n#     LessonsLearned\n# <.package>\n# <description>\n#     Module to generate statistics over the portfolio database\n# <.description>\n# <keywords>\n#     statistics\n# <.keywords>\n\nimport util.debug as debug\nimport db.query as query\n\ndef generate_all_stats():\n    total_lines = 0\n    \n    # Language stats\n    languages = query.sql_query("SELECT name FROM language;", None)\n\n    for l in languages:\n        lang = l[0]\n        print "--", lang, " -- "\n\n        files_for_lang = query.sql_query("SELECT s.path||'\\\\'||s.name FROM script as s,language as l WHERE s.languageid = l.id AND l.name = %s;", [lang])\n        print "File count: ", len(files_for_lang)\n\n        line_count = 0    # reset line count\n        for f in files_for_lang:\n            lines_ = len(open(f[0], "r").readlines())\n            line_count += lines_\n            total_lines += lines_\n\n        print "Total lines: ", line_count\n        print "Avg. lines per file: ", line_count / len(files_for_lang)\n        print\n\n    print '++ Overall ++'\n    # Package stats\n    pkgs = query.sql_query("SELECT count(*) FROM package;", None)\n    print 'Package count: ', pkgs[0][0]\n\n    # Gather stats on the unsorted files\n    files_unsorted = query.sql_query("SELECT file FROM unsorted;", None)\n    unsorted_lines = 0\n    for f in files_unsorted:\n        lines_ = len(open(f[0], "r").readlines())\n        unsorted_lines += lines_\n        total_lines += lines_\n        \n    print 'Unsorted lines of code: ', unsorted_lines\n\n\n    # LOC stats\n    print 'Total lines of code: ', total_lines\n\n    \n    \n    \n\n\n	B:\\Portfolio\\LessonsLearned\\util	24	1
72	2014-11-29 14:36:49	2014-11-29 13:49:06	linked.c	Creates a Linked List data structure and tests it	/*\n<package>\n\tLinked List in C\n<.package>\n<description>\n    Creates a Linked List data structure and tests it\n<.description>\n<keywords>\n    linked list\n<.keywords>\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct node {\n  int data;\n  struct node* next;\n};\n\nstatic int length();\nstatic void push(int data);\nstatic int pop();\nstatic void appendNode(int data);\nstatic struct node *copyList();\nstatic void printList();\n\n\nstruct node *head;\t\t// pointer to head of linked list\n\t\t\t\t\t\t// head is visible to all functions in this file\n\n/************************************************************\n length - return length of a list\n ************************************************************/\nint length() {\n    int count = 0 ;\n    struct node *iter ;\n    iter = head ;\n\n    while(iter != NULL) {\n        count++ ;\n        iter = iter->next ;\n    }\n\n    free(iter) ;\n    return count ;\n}\n\n\n/************************************************************\n push - add new node at beginning of list\n ************************************************************/\nvoid push(int data) {\n    struct node *oldhead = head ;\n\n    struct node *newhead = (struct node*)malloc( sizeof( struct node) ) ;\n    newhead->data = data ;\n    newhead->next = oldhead ;\n\n    head = newhead ;\n}\n\n/************************************************************\n pop - delete node at beginning of non-empty list and return its data\n ************************************************************/\nint pop() {\n    if(length() > 0) {\n        int val = head->data ;\n        struct node *popped = head ;\n        free(head) ;\n        head = popped->next ;\n        //free(popped) ;\n        return val;\n    } else {\n        printf("No value to pop.\\n") ;\n        return -1 ;\n    }\n}\n\n/************************************************************\n appendNode - add new node at end of list\n ************************************************************/\nvoid appendNode(int data) {\n    // when the list is empty use the push method to avoid complicated logic\n    if(length() == 0) {\n        push(data) ;\n    } else {\n        struct node *new_node = (struct node*)malloc( sizeof( struct node ) ) ;\n        new_node->data = data ;\n        new_node->next = NULL ;\n\n        struct node *tail = head ;\n        while(tail->next != NULL) {\n            tail = tail->next ;\n        }\n\n        tail->next = new_node ;\n    }\n}\n\n/************************************************************\n copyList - return new copy of list\n ************************************************************/\nstruct node* copyList() {\n    struct node *copy = NULL ;\n    struct node *iter = head ;\n    struct node *prev = NULL ;\n\n    while(iter != NULL) {\n        struct node *c_node = (struct node*)malloc( sizeof( struct node ) ) ;\n        c_node->data = iter->data ;\n        c_node->next = NULL ;\n\n        if(copy == NULL) {\n            copy = c_node ;\n            prev = c_node ;\n        } else {\n            prev->next = c_node ;\n            prev = c_node ;\n        }\n        iter = iter->next ;\n    }\n\n    return copy ;\n}\n\n\n/************************************************************\n printList - print linked list as "List: < 2, 5, 6 >" (example)\n ************************************************************/\nvoid printList(struct node *list) {\n    struct node* current ;\n\n    printf("List: < ");\n    current = list ;\n    while(current != NULL) {\n        printf("%d", current->data);\n        current = current->next ;\n        if(current != NULL) {\n            printf(", ");\n        }\n    }\n    printf(" >\\n");\n    free(current) ;\n}\n\nvoid main() {\n    /* Initialize */\n    head = NULL ;\n\n    printList(head) ;\n    printf("Length of list = %d\\n", length(head)) ;\n\n    // test push\n    printf("Push(1), Push(2), Push(3)\\n") ;\n    push( 1 ) ;\n    push( 2 ) ;\n    push( 3 ) ;\n    printList(head) ;\n    printf("Length of list = %d\\n", length()) ;\n\n    // test append\n    printf("\\nAppend(2), Append(3)\\n") ;\n    appendNode( 2 ) ;\n    appendNode( 3 ) ;\n    printList(head) ;\n    printf("Length of list = %d\\n", length()) ;\n\n    // test pop\n    int pop1 = pop() ;\n    printf("\\nPopped %d\\n", pop1) ;\n    printList(head) ;\n\n    int pop2 = pop() ;\n    printf("Popped %d\\n", pop2) ;\n    printList(head) ;\n    printf("Length of list = %d\\n", length()) ;\n\n    int pop3 = pop() ;\n    printf("Popped %d\\n", pop3) ;\n    printList(head) ;\n\n    int pop4 = pop() ;\n    printf("Popped %d\\n", pop4) ;\n    printList(head) ;\n\n    int pop5 = pop() ;\n    printf("Popped %d\\n", pop5) ;\n    printList(head) ;\n\n    // test pop boundary\n    int pop6 = pop() ;\n    printf("Popped %d\\n", pop6) ;\n    printList(head) ;\n\n    // test appendNode boundary\n    appendNode( 4 ) ;\n    appendNode( 5 ) ;\n    appendNode( 6 ) ;\n\n    // test copy list\n    struct node *copy = copyList() ;\n    printf("\\nList copied\\n") ;\n    printf("Original:\\n") ;\n    printList(head) ;\n    printf("Copy:\\n") ;\n    printList(copy) ;\n\n    // ensure this is deep copy\n    printf("\\npop(), pop(), Append(7), Append(8) to original\\n") ;\n    pop();\n    pop();\n    appendNode( 7 ) ;\n    appendNode( 8 ) ;\n    printf("Original:\\n") ;\n    printList(head) ;\n    printf("Copy:\\n") ;\n    printList(copy) ;\n}\n	B:\\Portfolio\\LinkedList	25	4
73	2014-11-29 14:37:59	2014-11-29 13:49:06	longest.c	Scans text from stdin and prints the longest line found	/*\n<package>\n\tLongest Line\n<.package>\n<description>\n    Scans text from stdin and prints the longest line found\n<.description>\n<keywords>\n    stdin, strings\n<.keywords>\n*/\n\n#include <stdlib.h>\n#include <stdio.h>\n\n#define MAXLINE 80   /* maximum input line size */\n\n/* function declarations */\nint readline( char line[], int max );\nvoid copy( char to[], char from[] );\n\n/* variable declarations */\nint longest_len = 0 ;\nchar longest_line[MAXLINE] ;\n\n/* print longest input line */\nint main() {\n    int len;    /* current line length */\n    char line[MAXLINE];    /* current input line */\n\n    while ( (len = readline( line, MAXLINE )) > 0 ) {\n        //printf("%s\\n", line);\n        if( len > longest_len ) {\n            //printf("Longer string found { old: %d , new: %d }\\n", longest_len, len) ;\n            longest_len = len ;\n            copy(longest_line, line) ;\n        }\n    }\n    printf("%s\\n", longest_line) ;\n\n    return 0;\n}\n\n/* readline: read a line into s, return length */\nint readline( char s[], int lim ) {\n    int i = 0 ;\n    char ch = fgetc(stdin) ;\n\n    while ( ch != 10 && ch != EOF && i < MAXLINE ) {\n        s[i++] = ch ;\n        ch = fgetc(stdin) ;\n    }\n    s[i] = '\\0' ;\n\n    return i;\n}\n\n/* copy: copy 'from' into 'to'; assume to is big enough */\nvoid copy( char to[], char from[] ) {\n    int i ;\n\n    for(i = 0; i < longest_len; i++) {\n        to[i] = from[i] ;\n    }\n    to[longest_len] = '\\0' ;\n}\n\n\n\n	B:\\Portfolio\\LongestLine	26	4
74	2014-11-29 14:02:59	2014-11-29 13:49:06	palindrome.py	Tests a string coming from stdin to see if it is a palindrome	# <package>\n#     Palindrome Tester\n# <.package>\n# <description>\n#     Tests a string coming from stdin to see if it is a palindrome\n# <.description>\n# <keywords>\n#     stdin, text analysis\n# <.keywords>\n\n#Stephen Brewster\n#Palindrome tester\nimport sys\nimport re\n\nnotAlpha = re.compile("[a-zA-Z]")\n\n#Advances the index moving forward over the line\ndef advance(adv, line):\n\twhile(notAlpha.match(line[adv]) == None):\n\t\tadv += 1\n\treturn adv\n\n\n#Retreats the index moving right to left over the line\ndef retreat(ret, line):\n\twhile(notAlpha.match(line[ret]) == None):\n\t\tret -= 1\n\treturn ret\n\n#Return the result of character comparison\ndef is_palindrome(line):\n\tadv = 0\n\tret = len(line)-1\n\tisPalindrome = True\n\t\n\twhile(isPalindrome and adv < ret):\n\t\t#Move cursors to next alpha character\n\t\tadv = advance(adv, line)\n\t\tret = retreat(ret, line)\n\t\t#Test characters for equality\n\t\tisPalindrome  = line[adv].upper() in line[ret].upper()\n\t\t#Move cursor\n\t\tadv += 1\n\t\tret -= 1\n\t\n\treturn isPalindrome\n        \n\t\n#Read stdin lines to variable\nlines = sys.stdin.readlines()\n\n#Iterate lines from file/stdin\nfor line in lines:\n\tisPalindrome = is_palindrome(line)\n\n\t#Print results of the test\n\tif isPalindrome:\n\t\tprint(line, "Result: Pass")\n\telse:\n\t\tprint(line, "Result: Failed")\n	B:\\Portfolio\\Palindrome	27	1
75	2014-11-29 14:38:43	2014-11-29 13:49:06	main.c	Practice with C pointers	/*\n<package>\n\tPointer Activity\n<.package>\n<description>\n    Practice with C pointers\n<.description>\n<keywords>\n    pointers\n<.keywords>\n*/\n\n/*\n * Driver program for the activity.\n * \t1. Declares local variables for the character, integer, and\n * \t   double precision values returned by read_data.\n * \t2. Calls read_data with pointers to the variables so that\n * \t   the values read can be returned.\n * \t3. On return, prints the character, integer, and double\n * \t   precision number using the following format string for\n * \t   printf:\n * \t   \t"Character %c Integer %d Floating point %.4f\\n"\n * \t   Note: you must also, of course, provide the values to\n * \t   be printed.\n *      4. Return a 0 to the operating system.\n */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n#include "read_data.c"\n\nint main() {\n    char aChar = 'a';\n    int aInt = 255 ;\n    double aDouble = 25.5 ;\n\n    char *pChar = &aChar ;\n    int *pInt = &aInt ;\n    double *pDouble = &aDouble ;\n\n    read_data(pChar, pInt, pDouble) ;\n\n    printf("Character %c Integer %d Floating point %.4f\\n",\n            aChar, aInt, aDouble) ;\n\n    return 0 ;\n}\n	B:\\Portfolio\\PointerActivity	29	4
76	2014-11-29 14:39:19	2014-11-29 13:49:06	read_data.c	Reads data from pointers	/*\n<package>\n\tPointer Activity\n<.package>\n<description>\n    Reads data from pointers\n<.description>\n<keywords>\n    pointers\n<.keywords>\n*/\n\n/*\n * Implementation of the read_data module.\n *\n * See read_data.h for a description of the read_data function's\n * specification.\n *\n * Note that the parameter declarations in this module must be\n * compatible with those in the read_data.h header file.\n */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n#include "read_data.h"\n\nvoid read_data(char *aChar, int *aInt, double *aDouble) {\n    char intString[MAXDIGITS] ;\n    char doubleString[MAXDIGITS] ;\n    char ch ;\n    int index = 0 ;\n\n    //Get first character\n    *aChar = getchar() ;\n    getchar() ;\n\n    //Get integer\n    ch = getchar() ;\n    while(ch != 36) {\n        intString[index] = ch ;\n        ch = getchar() ;\n        index++ ;\n    }\n    intString[index] = '\\0' ;\n    *aInt = atoi(intString) ;\n\n    index = 0 ;\n\n    //Get double\n    ch = getchar() ;\n    while(ch != 36) {\n        doubleString[index] = ch ;\n        ch = getchar() ;\n        index++ ;\n    }\n    doubleString[index] = '\\0';\n    *aDouble = atof(doubleString) ;\n}\n	B:\\Portfolio\\PointerActivity	29	4
77	2014-11-29 14:05:25	2014-11-29 13:49:06	Bracket.py	Performs some basic text manipulation, written in a 50 minute practicum	# Transform the 'original' string into the 'bracketed' string by\n# surrounding all vowels - a, e, i, o, u in either case - by square\n# <package>\n#     Practicum 1 - swen250\n# <.package>\n# <description>\n#     Performs some basic text manipulation, written in a 50 minute practicum\n# <.description>\n# <keywords>\n#     text manipulation, practicum\n# <.keywords>\n\n# brackets ([]), any digit by angle brackets (<>), and copying all\n# other characters "as is".\n#\n# When done, return the 'bracketed' string.\n#\n# Example: bracket("I think February 29, 2024 will be sunny.")\n#    returns "[I] th[i]nk F[e]br[u][a]ry <2><9>, <2><0><2><4> w[i]ll b[e] s[u]nny."\n\nimport fileinput\nimport sys\n\nlines = sys.stdin.readlines()\nvowels = {"a", "e", "i", "o", "u"}\nintegers = {"1","2","3","4","5","6","7","8","9","0"}\n\ndef bracket(original):\n\t# The final bracketed string.\n\tbracketed = ''\n\tlength = len(original)\n\t\n\tfor index in range(0, length):\n\t\tch = original[index]\n\t\tif ch.lower() in vowels:\n\t\t\tbracketed += "["+ch+"]"\n\t\telif ch in integers:\n\t\t\tbracketed += "<"+ch+">"\n\t\telse:\n\t\t\tbracketed += ch\n\n\treturn bracketed\n\nif __name__ == '__main__':\n\tfor line in lines:\n\t\tline = line.replace("\\n", "")\n\t\tprint(bracket(line))\n\n\n\n\n	B:\\Portfolio\\Practicum-1	30	1
78	2014-11-29 14:06:33	2014-11-29 13:49:06	currency.rb	Converts currencies, written in a 50 minute practicum	# <package>\n#     Practicum 2 - swen250\n# <.package>\n# <description>\n#     Converts currencies, written in a 50 minute practicum\n# <.description>\n# <keywords>\n#     practicum, stdin\n# <.keywords>\n\n# Currency Calculator\n\n  # Currency conversion rates for one USD\n  RATES = Hash[\n             'GBP' => 1.674,\n             'CAN' => 0.861,\n             'CHF' => 1.137,\n             'EUR' => 1.38,\n             'SEK' => 0.156,\n             'USD' => 1.0\n             ]\n\n# Given a currency code and floating point units of that currency,\n# return the equivalent USD as a floating point value.\ndef convert( currency_code, value )\n  RATES[currency_code].to_f * value.to_i\nend\n\n# Return the floating point result of the given operation ('+'/'-') \n# using the two floating point value parameters. \ndef compute( operator, value_1, value_2 )\n  if operator == "+" then\n    (value_1.to_f + value_2.to_f).round(2)\n  elsif operator == "-" then\n    (value_1.to_f - value_2.to_f).round(2)\n  end\nend\n\n# Given an input string in CSV format, return an array\n# of values.\ndef parse_line( line )\n  line.chomp.split(",")\nend\n\n\n# This is a Ruby idiom that allows us to use both unit testing and command line processing\n# This gets run with ruby currency.rb\n# Does not get run when we use unit testing, e.g. ruby currency_test.rb\n\n# For each line of CSV input:\n# - parse the input line into appropriate fields\n# - convert the currencies to USD\n# - perform the computation requested\n# - output the result as "Result = xx.xx USD"\n#where xx.xx is USD rounded to the nearest cent\n\nif __FILE__ == $PROGRAM_NAME\n  $stdin.each do |line|\n    # Break apart line into variables\n    parsed = parse_line(line)\n    operator = parsed[0]\n    c_c1 = parsed[1]\n    v1 = parsed[2]\n    c_c2 = parsed[3]\n    v2 = parsed[4]\n\n    # Perform conversion and computation\n    usd1 = convert(c_c1,v1)\n    usd2 = convert(c_c2,v2)\n    result = compute(operator, usd1, usd2)\n\n    # Print results\n    print "#{line}"\n    print "Result = #{result}\\n"\n  end\nend\n	B:\\Portfolio\\Practicum-2	31	5
79	2014-11-29 14:07:16	2014-11-29 13:49:06	currency_test.rb	Tests the practicum 2 methods, written in a 50 minute practicum	# <package>\n#     Practicum 2 - swen250\n# <.package>\n# <description>\n#     Tests the practicum 2 methods, written in a 50 minute practicum\n# <.description>\n# <keywords>\n#     unit test, practicum\n# <.keywords>\n\nrequire_relative 'currency' \nrequire 'test/unit'          \n\nclass CurrencyTest < Test::Unit::TestCase \n\n  ### Add your tests here ###\n\n  # assert_in_delta() is used to compare two floating point\n  # values within a tolerance, or delta, to account for potential\n  # rounding errors when performing floating point computations.\n\n  def test_conversion_1\n    assert_in_delta 58.59, convert( 'GBP', 35.0 ), 0.01\n  end\n\n  def test_conversion_2\n    assert_in_delta 1.722, convert( 'CAN', 2.0 ), 0.01\n  end\n\n  def test_line_to_CSV\n    assert_equal ["+","GBP","35.0"], parse_line("+,GBP,35.0")\n    assert_equal ["-","CAN","33","EUR","78"], parse_line("-,CAN,33,EUR,78")\n  end\n\n  def test_compute\n    assert_equal 35.2, compute("+",20.0,15.2)\n    assert_equal 40.0, compute("-",67.78,27.78)\n  end\nend\n	B:\\Portfolio\\Practicum-2	31	5
80	2014-11-13 00:51:49	2014-10-03 19:38:07	prime_numbers.py	Computes prime number statistics	# <package>\n#     Prime Numbers\n# <.package>\n# <description>\n#     Computes prime number statistics\n# <.description>\n# <keywords>\n#     prime numbers, math\n# <.keywords>\n\nfrom math import *\n\nPRIMEGOAL=1000\nfinal_prime=2\nn=0\nproduct=0\n\ndef is_prime( cand ):\n    global n\n    i = cand-1\n    while( i > 1 ):\n        n += 1\n        if cand%i == 0:\n            return False\n        i -= 1\n    return True\n\nprime_count = 0\nprime_cand = 1\nwhile(prime_count < PRIMEGOAL): \n    n += 1\n    if is_prime( prime_cand ):\n        final_prime = prime_cand\n        if product == 0:\n            product = log(prime_cand)\n        else:\n            product = log(prime_cand) + product\n        prime_count += 1\n    prime_cand += 2\nprint PRIMEGOAL,"th prime",final_prime\nprint "Log sum",product\nprint "Log ratio",product/final_prime\nprint "In",n,"loops"\n	B:\\Portfolio\\Prime Numbers	32	1
81	2014-11-29 14:08:30	2014-11-29 13:49:06	grades.rb	Uses a CSV list to print and convert student GPAs	# <package>\n#     Project 1 - swen250\n# <.package>\n# <description>\n#     Uses a CSV list to print and convert student GPAs\n# <.description>\n# <keywords>\n#     stdin, csv\n# <.keywords>\n\nrequire_relative 'grades_util'\n\n# grades.rb Ruby Script\n#\n# Read the first row (column names) and second row (grade weights).\n# If the weights don't sum up to 100, print an error message and exit.\n# Otherwise print the column headers with their weights (empty weights simply don't print)\n#\n# For each student line, print the header and column for each field in the line.\n# The field could be identifying information (if the weight is blank) or numeric (if the\n# weight is non-negative). Grades can be numeric or letter (with optional +/-)\n# Also prints final weighted numeric grade and letter grade.\n#\n# At end, prints a summary showing the number students for each letter grade and\n# the class GPA.\n\n# Create the hash for counting the number of occurrences of each letter grade.\n\nlettercount = Hash.new(0)   # default count is 0.\n# Initialize letter grades to 0 count\nQUALITY_POINTS.each { |key,value| lettercount[key] += 0 }\n\n# Use get_CSV_line() to get the header and weight lines.\n# Each line should be "chomped" to eliminate the end of line character(s).\n# Create arrays for the headers and weights by splitting on commas.\n\nHEADER = get_CSV_line(STDIN.gets.chomp)\nWEIGHTS = get_CSV_line(STDIN.gets.chomp)\n\n# For each header, print the header and, if present, its weight.\nprint "Summary information for grades file\\n\\n"\n\nHEADER.each_with_index do |val,index|\n  if WEIGHTS[index] == "" then\n    puts "#{val}"\n  else\n    puts "#{val} #{WEIGHTS[index]}%"\n  end\nend\n\n# Use sum_weights() to check if the weights do not sum to 100, output the error message:\n# "Weights add up to #{sum}, not 100" - where sum is the sum of input weights\n\nSUM_WEIGHTS = sum_weights(HEADER,WEIGHTS)\nbegin\n  if SUM_WEIGHTS != 100 then\n    raise "\\nWeights add up to #{SUM_WEIGHTS}, not 100"\n  end\n  rescue => detail\n    puts detail.message\nend\n\n# Get each of the remaining lines, representing grade information for an individual student.\n# Print the header for each column and whatever is in that column on the student grade line.\n# Compute contribution of each weighted field to the overall grade using compute_grade(),\n# remember to skip fields that do not have weights associated with them.\n# Convert the numeric grade to a letter grade using numeric_to_letter().\n# Output the final numeric and letter grade for that student and update the \n# lettercount hash that is keeping track of the number of occurrences of each letter grade\n# for the class.\n\nwhile line = gets\n  # Print student information\n  puts #Margin\n  fields = get_CSV_line(line)\n  fields.each_with_index { |f,index| puts "#{HEADER[index]}: #{f}" }\n\n  # Compute final numeric grade\n  finalNumericGrade = 0;\n  fields.each_with_index do |f,index|\n    if WEIGHTS[index] != "" then\n      finalNumericGrade += compute_grade(WEIGHTS[index],f)\n    end\n  end\n\n  # Compute final letter grade and print\n  finalLetterGrade = numeric_to_letter(finalNumericGrade.to_i)\n  print "Final Numeric Grade = #{finalNumericGrade.to_i} Letter = #{finalLetterGrade}\\n"\n\n  # Add Grade to hash\n  lettercount[finalLetterGrade] += 1\nend\n\n# Now print the summary information - the number of students at each letter grade level\n# and the class GPA using print_summary(). \n\nputs\nclassGPA = 0.0\nstudents = 0\n# Print the grade count for the class and the class GPA\nlettercount.each do |key,value|\n  puts "#{key} = #{value}" # Grade counts\n  classGPA += QUALITY_POINTS[key] * value\n  students += value\nend\nputs "Class GPA = #{classGPA/students}" # Class GPA\n	B:\\Portfolio\\Project-1	33	5
82	2014-11-29 14:10:19	2014-11-29 13:49:06	grades_util.rb	Utility methods for Project 1 - swen250	# <package>\n#     Project 1 - swen250\n# <.package>\n# <description>\n#     Utility methods for Project 1 - swen250\n# <.description>\n# <keywords>\n#     stdin, csv, dictionary\n# <.keywords>\n\n# grades_util.rb Ruby Script\n#\n# Support methods used by grades.rb for reading CSV gradebook files\n# and producing reports\n#\n\n##### TRANSLATION HASH FOR LETTER GRADES TO NUMERIC #####\n\nLETTER_TO_NUMERIC = {\n  "A+" => 98, "A" => 95, "A-" => 92,\n  "B+" => 88, "B" => 85, "B-" => 82,\n  "C+" => 78, "C" => 75, "C-" => 72,\n  "D+" => 68, "D" => 65, "D-" => 62,\n  "F+" => 55, "F" => 40, "F-" => 25,\n}\n\n##### TRANSLATION OF LETTER GRADES TO QUALITY POINTS #####\n\nQUALITY_POINTS = { 'A' => 4, 'B' => 3, 'C' => 2, 'D' => 1, 'F' => 0 }\n\n##### TRANSLATION OF NUMBERS 0-100 TO WHOLE LETTER GRADES\n\nNUMERIC_TO_WHOLE_LETTER = [\n  [(0..59),"F"],\n  [(60..69),"D"],\n  [(70..79),"C"],\n  [(80..89),"B"],\n  [(90..100),"A"]\n]\n\n# sum_weights( headers, weights)\n# headers = array of header strings (1st line of input)\n# weights = array of weights strings (2nd line of input)\n# returns integer value equal to the sum of all weights\n#\n# Method to sum up the weights in the weight line. \n# Skips over empty fields.\n\ndef sum_weights(headers, weights)\n  raise "Headers and Weights must be equal lenghts" unless headers.size == weights.size\n  weights.inject(0) { |sum,w| sum += w.to_i }\nend\n\n# numeric_to_letter(numeric)\n# numeric =  integer value to convert to a whole letter grade\n# return letter grade as a string\n#\n# Method to convert a raw numeric grade to a whole letter A - F.\n# A (90-100), B (80-89), C (70-79), D (60-69), F (<60)\n\ndef numeric_to_letter(numeric)\n  raise "Invalid Input" unless  numeric.is_a? Integer and\n                                numeric >= 0 and\n                                numeric <= 100\n\n  NUMERIC_TO_WHOLE_LETTER.select do |k,v|\n    if k.to_a.include?(numeric) then return v end\n  end\nend\n\n  \n# get_CSV_line( line)\n# line = string of one line of input\n# returns array of strings representing fields in that line\n#\n# Get a CSV line for the header line, weight lines or field line\n# Each line should be "chomped" to eliminate the end of line character(s).\n# Create arrays for the headers, weights and fields by splitting on commas.\n\ndef get_CSV_line( line ) \n  line.chomp!\n  line.rstrip!\n  line.lstrip!\n  line.split(",")\nend\n\n# compute_grade( weight, field )\n# weight = string value representing weight of the graded item\n# field = string value representing value of graded item in numeric or letter grade format\n# returns floating point grade value\n#\n# Compute a numeric grade given the weight of the grade and either a numeric \n# score or letter score in the field. \n\ndef compute_grade( weight, field )\n  (LETTER_TO_NUMERIC.fetch(field.upcase, field).to_i * weight.to_i).to_f/100\nend\n\n# print_summary(lettercount)  - !!! DO NOT MODIFY !!!\n# lettercount = hash of letter grades => count of number of students\n#\n# Prints summary information. First the count of the number of students for each\n# letter grade and then the class GPA.\n\ndef print_summary(lettercount)\n  qualty_points = 0\n  grade_count = 0\n\n  ['A', 'B', 'C', 'D', 'F'].each do | letter |\n    puts "#{letter} = #{lettercount[letter]}"\n    qualty_points += QUALITY_POINTS[letter] * lettercount[letter]\n    grade_count += lettercount[letter]\n  end\n\n  printf "Class GPA = %1.2f", qualty_points.to_f / grade_count.to_f\n  puts\nend\n\n	B:\\Portfolio\\Project-1	33	5
83	2014-11-29 14:10:49	2014-11-29 13:49:06	test_grades.rb	Unit tests for Project 1 - swen250	# <package>\n#     Project 1 - swen250\n# <.package>\n# <description>\n#     Unit tests for Project 1 - swen250\n# <.description>\n# <keywords>\n#     unit test\n# <.keywords>\n\nrequire_relative 'grades_util'\nrequire 'test/unit'\n\n# TetsGrades\n#\n# Unit test suite for testing grades_util.rb support methods:\n# compute_grade()\n# get_CSV_line()\n# numeric_to_letter()\n# sum_weights()\n\nclass TestGrades < Test::Unit::TestCase\n\n  # Tests get_CSV_line to insure the entered input line\n  # is correctly be parsed to an array of string words\n  #\n  def test_header_line\n    headers = get_CSV_line("Name,ID,Grade")# pass in an input string \n    assert_equal headers, ["Name","ID","Grade"] # return an array of header words\n    assert_equal ["","","100"], get_CSV_line(",,100")\n  end\n  \n  ####  YOUR ADDITIONAL UNIT TESTS START HERE  ####\n  def test_numeric_to_letter\n    assert_equal "A", numeric_to_letter(90)\n    assert_equal "B", numeric_to_letter(89)\n    assert_equal "C", numeric_to_letter(79)\n    assert_equal "D", numeric_to_letter(69)\n    assert_equal "F", numeric_to_letter(59)\n    assert_raise(RuntimeError) { numeric_to_letter(101) }\n    assert_raise(RuntimeError) { numeric_to_letter(-1) }\n    assert_raise(RuntimeError) { numeric_to_letter("NaN") }\n  end\n\n  def test_sum_weights\n    assert_equal 100, sum_weights(["h1","h2","h3"],["50","30","20"])\n    assert_equal 100, sum_weights(["h1","h2","h3"],["","","100"])\n    # header.size != weight.size - these must be the same length\n    assert_raise(RuntimeError) { sum_weights(["h1","h2"],["100"]) }\n  end\n\n  def test_compute_grade\n    # Check letter grade provided\n    assert_equal 85, compute_grade("100","B")\n    assert_equal 98, compute_grade("100","A+")\n    assert_equal 21.6, compute_grade("30","C-")\n    assert_equal 45.5, compute_grade("70","D")\n    # Check numeric grade provided\n    assert_equal 21.6, compute_grade("30","72")\n    assert_equal 45.5, compute_grade("70","65")\n  end\nend\n  \n	B:\\Portfolio\\Project-1	33	5
84	2014-11-29 13:34:27	2014-09-15 20:48:28	pw_prot.py	Stores username password pairs for a site in a shift cypher encryption using a passphrase	# <package>\n#     Password Protector\n# <.package>\n# <description>\n#     Stores username password pairs for a site in a shift cypher encryption using a passphrase\n# <.description>\n# <keywords>\n#     shift cypher, passphrase, text file database, file\n# <.keywords>\n\nimport fileinput\nimport re\n\nCMDS = {".printall" : "Prints all stored passwords",\n        ".create"   : "Creates a new password entry",\n        ".find"     : "Searches for an entry",\n        ".quit"     : "Guess what this does?!",\n        ".newkey"   : "Enter new key",\n        ".delete"   : "Delete an entry"}\n\nPROMPTS = {"EnterLogin" : "Enter 'site,login,pw':",\n           "Header" : "\\n ********* PASSWORD LOCKER **********\\n"}\n\ndef en_de_crypt_pw(pw, action):\n    global KEY\n    shifted = ''\n    \n    for i in range(len(pw)):\n        ascii = ord(pw[i])\n        if (action == "decrypt"):\n            ascii -= ord(KEY[i%len(KEY)])\n        else:\n            ascii += ord(KEY[i%len(KEY)])\n\n        if ascii > 0:\n            shifted += chr(ascii)\n\n    return shifted\n\ndef create_new():\n    csv_info = raw_input(PROMPTS["EnterLogin"])\n    encrypted = en_de_crypt_pw(csv_info, "")\n    sorted_list = []\n    \n    for line in open("passwords.txt","r").readlines():\n        sorted_list.append(line)\n\n    sorted_list.append(encrypted + "\\n")\n    sorted_list.sort()\n        \n    with open("passwords.txt", "w") as pwfile:\n        for i in range(len(sorted_list)):\n            pwfile.write(sorted_list[i])\n\n    print "Saved."\n\ndef delete_entry():\n    lines = []\n    with open("passwords.txt", "r") as f:\n        lines = f.readlines()\n        for index in range(len(lines)):\n            print str(index+1) + ". " + en_de_crypt_pw(lines[index], "decrypt")\n        \n    id = input("Enter number to delete: ")\n    with open("passwords.txt", "w") as f:\n        for index in range(len(lines)):\n            if (index+1) != id:\n                f.write(lines[index])\n\n    print "Deleting " + str(id)\n    return  \n\ndef find_entry():\n    search = raw_input("Search: ")\n    for line in open("passwords.txt","r").readlines():\n        entry_list = []\n        entry_list.append(en_de_crypt_pw(line, "decrypt"))\n\n        entry_map = {}\n        for entry in entry_list:\n            entry.strip("\\n")\n            arr = entry.split(",")\n\n            a = re.compile(search)\n            if a.match(entry):\n                print entry\n    \n    return\n\ndef new_key():\n    global KEY\n    KEY = raw_input("New key: ")\n\ndef print_all():\n    i = 1\n    for line in open("passwords.txt","r").readlines():\n        print str(i+1) + ". " + en_de_crypt_pw(line, "decrypt")\n        i += 1\n           \ndef print_commands():\n    global CMDS\n    for key in CMDS:\n        print key + " -- " + CMDS[key]\n\nDISP = {".printall" : print_all,\n        ".create" : create_new,\n        ".find" : find_entry,\n        ".newkey" : new_key,\n        ".delete"  : delete_entry}\n\n\nKEY = raw_input("Enter Key: ")\ncmd = ''\nwhile cmd != ".quit":\n    print PROMPTS["Header"]\n    print_commands()\n    cmd = raw_input(">> ")\n    DISP[cmd]()\n    raw_input("ENTER...")\n	B:\\Portfolio\\PW Protector	34	1
85	2014-11-29 16:47:41	2014-11-29 16:41:55	client.py	Simple class for creating a server in Python	# <package>\n#     Python Client-Server\n# <.package>\n# <description>\n#     Simple class for creating a server in Python\n# <.description>\n# <keywords>\n#     server, socket\n# <.keywords>\n\n#!/usr/bin/python\n\nimport socket               # Import socket module\n\ns = socket.socket()         # Create a socket object\nhost = socket.gethostname() # Get local machine name\nport = 12345                # Reserve a port for your service.\n\ns.connect((host, port))\nprint(s.recv(1024))\ns.close                     # Close the socket when donei\n	B:\\Portfolio\\Python Server-Client	35	1
86	2014-11-29 16:48:05	2014-11-29 16:41:55	server.py	Simple class for creating a client in Python	# <package>\n#     Python Client-Server\n# <.package>\n# <description>\n#     Simple class for creating a client in Python\n# <.description>\n# <keywords>\n#     client, socket\n# <.keywords>\n\n#!/usr/bin/python           # This is server.py file\n\nimport socket               # Import socket module\n\ns = socket.socket()         # Create a socket object\nhost = socket.gethostname() # Get local machine name\nport = 12345                # Reserve a port for your service.\ns.bind((host, port))        # Bind to the port\n\ns.listen(5)                 # Now wait for client connection.\nwhile True:\n    (c, addr) = s.accept()     # Establish connection with client.\n    print('Got connection from', addr)\n    c.send(str.encode('Thank you for connecting'))\n    c.close()                # Close the connectioni\n	B:\\Portfolio\\Python Server-Client	35	1
87	2014-12-07 15:54:04	2014-12-07 15:54:04	freq_accuracy_test.c	Implemented on Freescale microcontroller	/*\n<package>\n\tFrequency Accuracy Test\n<.package>\n<description>\n    Implemented on Freescale microcontroller \n<.description>\n<keywords>\n\treal-time, histogram\n<.keywords>\n*/\n\n/******************************************************************************\n * Timer Output Compare Demo\n *\n * Description:\n *\n * This demo configures the timer to a rate of 1 MHz, and the Output Compare\n * Channel 1 to toggle PORT T, Bit 1 at rate of 10 Hz. \n *\n * The toggling of the PORT T, Bit 1 output is done via the Compare Result Output\n * Action bits.  \n * \n * The Output Compare Channel 1 Interrupt is used to refresh the Timer Compare\n * value at each interrupt\n * \n * Author:\n *  Jon Szymaniak (08/14/2009)\n *  Tom Bullinger (09/07/2011)\tAdded terminal framework\n *  Stephen Brewster (09/12/2014) Changed to Histogram \n *  Raj Muchhala\n *\n *****************************************************************************/\n\n\n// system includes\n#include <hidef.h>      /* common defines and macros */\n#include <stdio.h>      /* Standard I/O Library */\n\n// project includes\n#include "types.h"\n#include "derivative.h" /* derivative-specific definitions */\n\n// Definitions\n\n// Change this value to change the frequency of the output compare signal.\n// The value is in Hz.\n#define OC_FREQ_HZ    ((UINT16)10)\n\n// Macro definitions for determining the TC1 value for the desired frequency\n// in Hz (OC_FREQ_HZ). The formula is:\n//\n// TC1_VAL = ((Bus Clock Frequency / Prescaler value) / 2) / Desired Freq in Hz\n//\n// Where:\n//        Bus Clock Frequency     = 2 MHz\n//        Prescaler Value         = 2 (Effectively giving us a 1 MHz timer)\n//        2 --> Since we want to toggle the output at half of the period\n//        Desired Frequency in Hz = The value you put in OC_FREQ_HZ\n//\n#define BUS_CLK_FREQ  ((UINT32) 2000000)   \n#define PRESCALE      ((UINT16)  2)         \n#define TC1_VAL       ((UINT16)  (((BUS_CLK_FREQ / PRESCALE) / 2) / OC_FREQ_HZ))\n\n// Indexing variable for the raw_data\nUINT16 tcnt_count = 0;\n\n// Bounds for microseconds in histogram\nUINT16 lower_bound = 950;\nUINT16 upper_bound = 1051;\n\n// Array to hold raw timestamps\nUINT16 raw_data_bag[1001];\n\n// Histogram data\nUINT16 histogram_bag[100];\n\n// Initializes SCI0 for 8N1, 9600 baud, polled I/O\n// The value for the baud selection registers is determined\n// using the formula:\n//\n// SCI0 Baud Rate = ( 2 MHz Bus Clock ) / ( 16 * SCI0BD[12:0] )\n//--------------------------------------------------------------\nvoid InitializeSerialPort(void)\n{\n    // Set baud rate to ~9600 (See above formula)\n    SCI0BD = 13;          \n    \n    // 8N1 is default, so we don't have to touch SCI0CR1.\n    // Enable the transmitter and receiver.\n    SCI0CR2_TE = 1;\n    SCI0CR2_RE = 1;\n}\n\n\n// Initializes I/O and timer settings for the demo.\n//--------------------------------------------------------------       \nvoid InitializeTimer(void)\n{\n  // Set the timer prescaler to %2, since the bus clock is at 2 MHz,\n  // and we want the timer running at 1 MHz\n  TSCR2_PR0 = 1;\n  TSCR2_PR1 = 0;\n  TSCR2_PR2 = 0;\n    \n  // Set rising edge only \n  TCTL4_EDG1A = 1;\n  TCTL4_EDG1B = 0;\n  \n  // Set up timer compare value\n  //TC1 = TC1_VAL;\n  \n  // Clear the Output Compare Interrupt Flag (Channel 1) \n  TFLG1 = TFLG1_C1F_MASK;\n  \n  // Enable the output compare interrupt on Channel 1;\n  TIE_C1I = 1;  \n  \n  //\n  // Enable the timer\n  // \n  TSCR1_TEN = 1;\n}\n\n// Output Compare Channel 1 Interrupt Service Routine\n// Refreshes TC1 and clears the interrupt flag.\n//          \n// The first CODE_SEG pragma is needed to ensure that the ISR\n// is placed in non-banked memory. The following CODE_SEG\n// pragma returns to the default scheme. This is neccessary\n// when non-ISR code follows. \n//\n// The TRAP_PROC tells the compiler to implement an\n// interrupt funcion. Alternitively, one could use\n// the __interrupt keyword instead.\n// \n// The following line must be added to the Project.prm\n// file in order for this ISR to be placed in the correct\n// location:\n//\t\tVECTOR ADDRESS 0xFFEC OC1_isr \n#pragma push\n#pragma CODE_SEG __SHORT_SEG NON_BANKED\n//--------------------------------------------------------------       \nvoid interrupt 9 OC1_isr( void )\n{\n  raw_data_bag[tcnt_count] = TC1;\n  tcnt_count += 1;\n          \n  TFLG1   =   TFLG1_C1F_MASK;  \n}\n#pragma pop\n\n\n// This function is called by printf in order to\n// output data. Our implementation will use polled\n// serial I/O on SCI0 to output the character.\n//\n// Remember to call InitializeSerialPort() before using printf!\n//\n// Parameters: character to output\n//--------------------------------------------------------------       \nvoid TERMIO_PutChar(INT8 ch)\n{\n    // Poll for the last transmit to be complete\n    do\n    {\n      // Nothing  \n    } while (SCI0SR1_TC == 0);\n    \n    // write the data to the output shift register\n    SCI0DRL = ch;\n}\n\n\n// Polls for a character on the serial port.\n//\n// Returns: Received character\n//--------------------------------------------------------------       \nUINT8 GetChar(void)\n{ \n  // Poll for data\n  do\n  {\n    // Nothing\n  } while(SCI0SR1_RDRF == 0);\n   \n  // Fetch and return data from SCI0\n  return SCI0DRL;\n}\n\n\n// Entry point of our application code\n//--------------------------------------------------------------       \nvoid main(void)\n{\n  char pointless;\n  int i, temp_int;\n  \n  InitializeSerialPort();\n  InitializeTimer();\n\n  // Infinite loop to perform tests \n  for(;;) {\n      // Reset data point counter and prompt user\n      tcnt_count = 0;\n      (void)printf("Hit any key to gather data...\\n\\r");\n      pointless = GetChar();\n  \n      // Set bag to default\n      for(i = 0; i < 1001; i++) {\n          raw_data_bag[i] = 0;  \n      }\n      \n      // Set histogram data to default\n      for(i = 0; i < 100; i++) {\n          histogram_bag[i] = 0; \n      }\n        \n      EnableInterrupts;\n      \n      // Wait for 1001 data points to be collected\n      while(raw_data_bag[1000] == 0) {}\n      \n      DisableInterrupts;\n      \n      // Process data and store as histogram count\n      for(i = 0; i < 1001; i++) {\n          temp_int = raw_data_bag[i+1] - raw_data_bag[i];\n          histogram_bag[temp_int - lower_bound]++;     \n      }\n      \n      // Print histogram data\n      for(i = 0; i < 100; i++) {\n          if(histogram_bag[i] != 0) {\n              (void)printf("Microseconds = %u, count = %u\\n\\r", \n                  i + lower_bound, \n                  histogram_bag[i]\n               );\n          }\n      }\n  }\n}	B:\\Portfolio\\Real-time	36	4
88	2014-12-07 15:56:04	2014-12-07 15:45:22	Lab2b.c	Concurrently controls 2 servos using the QNX operating system	/*\n<package>\n\tServo Control in QNX\n<.package>\n<description>\n    Concurrently controls 2 servos using the QNX operating system \n<.description>\n<keywords>\n\tthreads, concurrency, mutex, blob class, real-time, servo\n<.keywords>\n*/\n\n\n/*\n  Servo: Futaba s3003\n    50Hz\n    20ms duty cycle\n    1-3ms pulse width\n*/\n#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <unistd.h>       /* for sleep() */\n#include <stdint.h>       /* for uintptr_t */\n#include <hw/inout.h>     /* for in*() and out*() functions */\n#include <sys/neutrino.h> /* for ThreadCtl() */\n#include <pthread.h>\n#include <sys/mman.h>     /* for mmap_device_io() */\n#include <assert.h>\n#include <sys/netmgr.h>\n#include <sys/syspage.h>\n#include <time.h>\n\n#define MOV (0x20)\n#define WAIT (0x40)\n#define START_LOOP (0x80)\n#define END_LOOP (0xa0)\n#define END_RECIPE (0x00)\n#define CENTRE (0xE0)     //Graduate Extension (Moves the servo to the Centre Position)(Parameter=0)\n\n#define LOOP_ERROR (0x01)\n#define INVALID_OPCODE (0x02)\n\n#define elapsed = 0;\n#define recipe_size = 20;\n\n// holds user input for command override\nchar ovr_cmd[2];\nint ovr_index = 0;\n\n/* The Neutrino IO port used here corresponds to a single register, which is\n * one byte long */\n#define PORT_LENGTH 1\n\n// Address for Input port A\n#define DATA_ADDRESS_A 0x288\n// Address for Output port B\n#define DATA_ADDRESS_B 0x289\n// Address for Control Register\n#define CTRL_ADDRESS 0x28B\n\n// Initialize B as the input\n// A is output\n#define INIT_BIT 0x00\n\n// Low/High signal values\n#define LOW 0\n#define HIGH 1\n\nstruct _clockperiod clk;\n\npthread_t *servo_1_control ;\npthread_t *servo_2_control ;\npthread_t *servo_1_pwm ;\npthread_t *servo_2_pwm ;\npthread_t *input_detection ;\n\ntypedef enum {\n  RUN, BEGIN, PAUSE, END, ERROR\n} servo_state;\n\ntypedef struct {\n  int id;\n  unsigned char *p_recipe;  // recipe under execution\n  int index;  // index of current recipe commmand\n  int waiting;  // currently waiting state variable\n  int loop_start; // start,end index of the loop\n  int looping; // track loops to execute\n  int position;\n  servo_state state; //state\n  int error_code;\n  uintptr_t data_handle;\n} servo;\n\nservo servo_1;\nservo servo_2;\n\nunsigned char nested_loop_recipe[] = {\n  MOV+5,\n  MOV+4,\n  START_LOOP+2,\n  MOV+0,\n  MOV+1,\n  START_LOOP+2,\n  MOV+2,\n  MOV+3,\n  END_LOOP,\n  END_LOOP,\n  0x00\n};\n\nunsigned char bad_opcode_recipe[] = {\n  MOV+0,\n  MOV+1,\n  0x75,\n  0x00\n};\n\nunsigned char required[] = {\n  MOV+0,\n  MOV+5,\n  MOV+0,\n  MOV+3,\n  START_LOOP+0,\n  MOV+1,\n  MOV+4,\n  END_LOOP,\n  MOV+0,\n  MOV+2,\n  WAIT+0,\n  MOV+3,\n  MOV+2,\n  MOV+3,\n  WAIT+31,\n  WAIT+31,\n  WAIT+31,\n  MOV+4,\n  CENTRE       //Graduate extension with opcode 111 and parameter 0\n};\n\nunsigned char recipe1[] = {\n  START_LOOP+2,\n  MOV+0,\n  MOV+1,\n  MOV+2,\n  MOV+3,\n  MOV+4,\n  MOV+5,\n  MOV+4,\n  MOV+3,\n  MOV+2,\n  MOV+1,\n  MOV+0,\n  END_LOOP,\n  END_RECIPE\n};\n\nunsigned char recipe2[] = {\n  START_LOOP+2,\n  MOV+0, WAIT+5,\n  MOV+2, WAIT+5,\n  MOV+1, WAIT+5,\n  MOV+3, WAIT+5,\n  MOV+5, WAIT+5,\n  MOV+4, WAIT+5,\n  MOV+2, WAIT+5,\n  MOV+1, WAIT+5,\n  MOV+5, WAIT+5,\n  MOV+2, WAIT+5,\n  MOV+0, WAIT+5,\n  END_LOOP,\n  END_RECIPE\n};\n\nvoid InitializeServoState(servo *servo_x, int id);\nvoid SwitchCmd(servo *servo_x);\nvoid SwitchServoState(servo *servo_x);\nvoid CheckOverrideCmd();\nvoid SwitchInputCmd(servo *servo_x, char *p_cmd);\nvoid Initialize();\nvoid RunServo(servo *myServo);\nvoid RunInputDetection();\nvoid GeneratePWM(servo *myServo);\n\nvoid Initialize() {\n\tuintptr_t data_handle_a, data_handle_b, ctrl_handle;\n\tint privity_err;\n\tpthread_attr_t threadAttributes ;\n\tint policy ;\n\tstruct sched_param parameters ;\n\n\t/* Give this thread root permissions to access the hardware */\n\tprivity_err = ThreadCtl( _NTO_TCTL_IO, NULL );\n\tif ( privity_err == -1 )\n\t\tfprintf( stderr, "can't get root permissions\\n" );\n\n\t// Set clock freq\n\tclk.fract = 0;\n\tclk.nsec = 50000;\n\tClockPeriod(CLOCK_REALTIME, &clk, NULL, 0);\n\n\t// Initialize handles to PWM ports and their CONTROL port\n\tctrl_handle = mmap_device_io(PORT_LENGTH, CTRL_ADDRESS);\n\tdata_handle_a = mmap_device_io(PORT_LENGTH, DATA_ADDRESS_A);\n\tdata_handle_b = mmap_device_io(PORT_LENGTH, DATA_ADDRESS_B);\n\tout8(ctrl_handle, INIT_BIT); // Set ports A and B to output\n\n\t// Create threads for both PWMs\n\tpthread_attr_init(&threadAttributes) ;\t\t// initialize thread attributes structure -- must do before any other activity on this struct\n\tpthread_getschedparam(pthread_self(), &policy, &parameters) ;\t// get this main thread's scheduler parameters\n\tpthread_attr_setschedparam(&threadAttributes, &parameters) ;\t// set up the pthread_attr struct with the updated priority\n\n\tInitializeServoState(&servo_1, 1);\n\tInitializeServoState(&servo_2, 2);\n\n\tservo_1.data_handle = data_handle_a;\n\tservo_1.p_recipe = recipe2;\n\tservo_2.data_handle = data_handle_b;\n\tservo_2.p_recipe = recipe2;\n\n\t// now create the threads and pass along its thread number from the loop counter.\n\tpthread_create( servo_1_control, &threadAttributes, (void *)RunServo, &servo_1 ) ;\n\tpthread_create( servo_1_pwm, &threadAttributes, (void *)GeneratePWM, &servo_1 ) ;\n\n\tpthread_create( servo_2_control, &threadAttributes, (void *)RunServo, &servo_2 ) ;\n\tpthread_create( servo_2_pwm, &threadAttributes, (void *)GeneratePWM, &servo_2 ) ;\n\n\tpthread_create( input_detection, &threadAttributes, (void *)RunInputDetection, NULL) ;\n}\n\nvoid RunServo(servo *myServo) {\n\tprintf("PWM %d Running.\\n", myServo->id);\n\n\tfor (;;) {\n\t\tswitch(myServo->state) {\n\t\t    case RUN:\n\t\t    \tSwitchCmd(myServo);\n\t\t      break;\n\t\t    case BEGIN:\n\n\t\t      break;\n\t\t    case END:\n\n\t\t      break;\n\t\t    case ERROR:\n\t\t      switch(myServo->error_code) {\n\t\t        // Loop error\n\t\t        case LOOP_ERROR:\n\n\t\t          break;\n\t\t        case INVALID_OPCODE:\n\n\t\t          break;\n\t\t      }\n\t\t      break;\n\t\t    case PAUSE:\n\n\t\t      break;\n\t\t  }\n\n\t\tusleep(100000);\n\t}\n\n\tprintf("PWM %d shutting down.\\n", myServo->id);\n}\n\nvoid GeneratePWM(servo *myServo) {\n\t// Execute the move\n\tfor(;;) {\n\t  out8( myServo->data_handle, HIGH );\n\n\t  usleep((myServo->position * 320) + 400);\n\n\t  out8( myServo->data_handle, LOW );\n\n\t  usleep((myServo->position * 320) + 400);\n\t}\n}\n\nvoid RunInputDetection () {\n\tchar input[2] ;\n\tprintf("Input detection is running.\\n");\n\n\tfor (;;) {\n\t\tprintf(">> ");\n\t\tscanf("%s", &input);\n\t\tSwitchInputCmd(&servo_1, &input[0]);\n\t\tSwitchInputCmd(&servo_2, &input[1]);\n\t}\n\n\tprintf("Input detection shutting down.\\n");\n}\n\nvoid SwitchCmd(servo *servo_x) {\n  int index = servo_x->index;\n  unsigned char command = servo_x->p_recipe[index];\n  unsigned char opcode = command & 0xe0;\n  unsigned char param = command & 0x1f;\n\n  if (servo_x->waiting) {\n\t  servo_x->waiting -= 1;\n\t  return;\n  }\n\n  // Validate param\n  if (param < 0 || param > 31) {\n    servo_x->state = ERROR;\n    return;\n  }\n\n  switch(opcode) {\n    // Move servo to new position\n    case MOV:\n      servo_x->waiting = abs(servo_x->position - param) * 2;\n      servo_x->position = param;\n\t  servo_x->index += 1;\n      break;\n    case WAIT:\n      servo_x->waiting = param;\n      servo_x->index += 1;\n      break;\n    case START_LOOP:\n      if (servo_x->looping) {\n        servo_x->state = ERROR;\n        servo_x->error_code = LOOP_ERROR;\n      }\n\n      servo_x->looping = param;\n      servo_x->loop_start = (index + 1);\n      servo_x->index += 1;\n      break;\n    case END_LOOP:\n      if (servo_x->looping) {\n        servo_x->looping -= 1;\n\n        // if still looping after decrement, restart loop\n        if (servo_x->looping) {\n          servo_x->index = servo_x->loop_start;\n        }\n      } else {\n        servo_x->index += 1; // leave loop portion of recipe\n      }\n      break;\n    case END_RECIPE:\n      servo_x->state = END;\n      break;\n    default:\n      servo_x->state = ERROR;\n      servo_x->error_code = INVALID_OPCODE;\n      break;\n  } // switch(cmd)\n}\n\nvoid SwitchInputCmd(servo *servo_x, char *p_cmd) {\n  //Ignore error servos\n  if(servo_x->state == ERROR) {\n    return;\n  }\n\n  switch(*p_cmd) {\n    case 80:\n    case 112:\n         //pause\n         servo_x->state = PAUSE;\n      break;\n    case 67:\n    case 99:\n    \t// continue\n        if (servo_x->state != END) {\n          servo_x->state = RUN;\n        }\n        break;\n    case 82:\n    case 114:\n        //Move to right if recipe is paused\n        if(servo_x->state == PAUSE && servo_x->position >= 1) {\n        \tservo_x->position -= 1;\n        }\n        break;\n    case 76:\n    case 108:\n        //Move to left if recipe is paused\n        if(servo_x->state == PAUSE && servo_x->position <= 4) {\n        \tservo_x->position += 1;\n        }\n        break;\n    case 78:\n    case 110:\n         //No operation performed\n         break;\n    case 66:\n    case 98:\n        //Restart the recipe\n        InitializeServoState(servo_x, servo_x->id);\n        servo_x->state = RUN;\n        break;\n  } // switch servo 1 command\n}\n\nvoid InitializeServoState(servo *servo_x, int id) {\n  servo_x->id = id;\n  servo_x->index = 0;\n  servo_x->waiting = 0;\n  servo_x->looping = 0;\n  servo_x->position = 0;\n  servo_x->error_code = 0;\n  servo_x->state = BEGIN;\n}\n\nvoid main(void) {\n  Initialize();\n\n  for(;;) {} /* loop forever */\n\n  printf("Exiting application...\\n");\n  sleep(3);\n}\n	B:\\Portfolio\\Real-time	37	4
89	2014-12-07 15:53:39	2014-12-07 15:53:39	servo_freescale.c	Executes concurrent servo control on freescale microcontroller	/*\n<package>\n\tServo Controller on Freescale\n<.package>\n<description>\n    Executes concurrent servo control on freescale microcontroller \n<.description>\n<keywords>\n\tservo, concurrency, blob class, real-time\n<.keywords>\n*/\n\n\n/*\n  Servo: Futaba s3003\n    50Hz\n    20ms duty cycle\n    1-3ms pulse width\n*/\nvoid InitializeServoState(struct servo *servo_x, int id, char *p_recipe);\nvoid SwitchCmd(struct servo *servo_x);\nvoid SwitchServoState(struct servo *servo_x);\nvoid CheckOverrideCmd();\nvoid SwitchInputCmd(struct servo *servo_x, char *p_cmd);\nvoid initialize_pwm_1();\nvoid initialize_pwm_2();\nvoid InitializeLeds();\nvoid UpdateServo1();\nvoid UpdateServo2();\n\n#include <hidef.h>      \n#include "derivative.h" \n#include <stdio.h>      \n#include "types.h"\n#include <math.h>\n\n#define MOV (0x20)\n#define WAIT (0x40)\n#define START_LOOP (0x80)\n#define END_LOOP (0xa0)\n#define END_RECIPE (0x00)\n\n#define LOOP_ERROR (0x01)\n#define INVALID_OPCODE (0x02)\n\nUINT16 elapsed = 0;\nUINT16 recipe_size = 20;\n\n// holds user input for command override\nchar ovr_cmd[2];\nint ovr_index = 0;\n\n\ntypedef enum {\n  RUN, BEGIN, PAUSE, END, ERROR\n} servo_state;\n\ntypedef struct {\n  int id;\n  char *p_recipe;  // recipe under execution\n  int index;  // index of current recipe commmand\n  int waiting;  // currently waiting state variable\n  int loop_start; // start,end index of the loop\n  int looping; // track loops to execute\n  int position;\n  servo_state state; //state\n  int error_code;\n} servo;\n\nservo servo_1;\nservo servo_2;\n\n\nunsigned char nested_loop_recipe[] = {\n  MOV+5,\n  MOV+4,\n  START_LOOP+2,\n  MOV+0,\n  MOV+1,\n  START_LOOP+2,\n  MOV+2,\n  MOV+3,\n  END_LOOP,\n  END_LOOP,\n  0x00 \n};\n\nunsigned char bad_opcode_recipe[] = {\n  MOV+0,\n  MOV+1,\n  0x75,\n  0x00  \n};\n\nunsigned char required[] = {\n  MOV+0,\n  MOV+5,\n  MOV+0,\n  MOV+3,\n  START_LOOP+0,\n  MOV+1,\n  MOV+4,\n  END_LOOP,\n  MOV+0,\n  MOV+2,\n  WAIT+0,\n  MOV+3,\n  MOV+2,\n  MOV+3,\n  WAIT+31,\n  WAIT+31,\n  WAIT+31,\n  MOV+4\n};\n\nunsigned char recipe1[] = {\n  START_LOOP+2,\n  MOV+0, WAIT+10,  \n  MOV+1, WAIT+10,\n  MOV+2, WAIT+10, \n  MOV+3, WAIT+10,\n  MOV+4, WAIT+10, \n  MOV+5, WAIT+10, \n  END_LOOP, END_RECIPE\n};\n\nunsigned char recipe2[] = {\n  START_LOOP+2,\n  MOV+5, WAIT+10,  \n  MOV+4, WAIT+10, \n  MOV+3, WAIT+10, \n  MOV+2, WAIT+10,\n  MOV+1, WAIT+10, \n  MOV+0, WAIT+10, \n  END_LOOP, END_RECIPE\n};\n\n\nvoid initialize_pwm_1() {\n  \n  //Scale clock to 50Hz\n  PWMPRCLK_PCKA0 = 0;\n  PWMPRCLK_PCKA1 = 0;\n  PWMPRCLK_PCKA2 = 1;\n  PWMSCLA = 8;\n  \n  PWMPOL_PPOL0 = 1;\n  \n  // Pulse Width channel 0 is enabled\n  PWME_PWME0 = 1;\n  \n  // Clock SA is the clock source for PWM channel 0\n  PWMCLK_PCLK0 = 1;\n  \n  // Gives us 125 microsecond DTY\n  // Set period\n  PWMPER0 = 160;              \n  // Duty cycle for channel 0\n  PWMDTY0 = 3;\n}\n\nvoid initialize_pwm_2() {\n      \n  // Scale clock by 16\n  PWMPRCLK_PCKB0 = 0;\n  PWMPRCLK_PCKB1 = 0;\n  PWMPRCLK_PCKB2 = 1;\n  PWMSCLB = 8;\n\n  // Set polarity  \n  PWMPOL_PPOL1 = 1;\n  \n  // Pulse Width channel 1 is enabled\n  PWME_PWME1 = 1;\n  \n  // Clock SA is the clock source for PWM channel 1\n  PWMCLK_PCLK1 = 1;\n  \n  // Gives us .0625 millisecond DTY\n  // Set period\n  PWMPER1 = 160;              \n  // Duty cycle for channel 1\n  PWMDTY1 = 3;\n}\n\nvoid initialize_timer() {\n  // Set the timer prescaler to %2, since the bus clock is at 2 MHz,\n  // and we want the timer running at 1 MHz\n  TSCR2_PR0 = 1;\n  TSCR2_PR1 = 1;\n  TSCR2_PR2 = 1;\n  \n    \n  // Enable output compare on Channel 1\n  TIOS_IOS1 = 1;\n  \n  // Set up output compare action to toggle Port T, bit 1\n  TCTL2_OM1 = 0;\n  TCTL2_OL1 = 1;\n  \n  // Set up timer compare value\n  TC1 = 1562;\n  \n  // Clear the Output Compare Interrupt Flag (Channel 1) \n  TFLG1 = TFLG1_C1F_MASK;\n  \n  // Enable the output compare interrupt on Channel 1;\n  TIE_C1I = 1;  \n  \n  //\n  // Enable the timer\n  // \n  TSCR1_TEN = 1;\n   \n  //\n  // Enable interrupts via macro provided by hidef.h\n  //\n  EnableInterrupts;\n}\n\n#pragma push\n#pragma CODE_SEG __SHORT_SEG NON_BANKED\n//--------------------------------------------------------------       \nvoid interrupt 9 OC1_isr( void )\n{\n  TC1 += 1562;\n  elapsed += 1;\n  TFLG1   =   TFLG1_C1F_MASK;  \n}\n#pragma pop\n\n// This function is called by printf in order to\n// output data. Our implementation will use polled\n// serial I/O on SCI0 to output the character.\n//\n// Remember to call InitializeSerialPort() before using printf!\n//\n// Parameters: character to output\n//--------------------------------------------------------------       \nvoid TERMIO_PutChar(INT8 ch)\n{\n    // Poll for the last transmit to be complete\n    do\n    {\n      // Nothing  \n    } while (SCI0SR1_TC == 0);\n    \n    // write the data to the output shift register\n    SCI0DRL = ch;\n}\n\n// Initializes SCI0 for 8N1, 9600 baud, polled I/O\n// The value for the baud selection registers is determined\n// using the formula:\n//\n// SCI0 Baud Rate = ( 2 MHz Bus Clock ) / ( 16 * SCI0BD[12:0] )\n//--------------------------------------------------------------\nvoid InitializeSerialPort(void)\n{\n    // Set baud rate to ~9600 (See above formula)\n    SCI0BD = 13;          \n    \n    // 8N1 is default, so we don't have to touch SCI0CR1.\n    // Enable the transmitter and receiver.\n    SCI0CR2_TE = 1;\n    SCI0CR2_RE = 1;\n}\n\nvoid UpdateServo1() {\n  SwitchServoState(&servo_1);\n}\n\nvoid UpdateServo2() {\n  SwitchServoState(&servo_2);\n}\n\nvoid SwitchCmd(servo *servo_x) {\n  int index = servo_x->index;\n  unsigned char command = servo_x->p_recipe[index];\n  unsigned char opcode = command & 0xe0;\n  unsigned char param = command & 0x1f;\n  \n  // Validate param\n  if (param < 0 || param > 31) {\n    servo_x->state = ERROR;\n    return;\n  }\n  \n  // In a waiting state so decrement and return\n  if (servo_x->waiting) {\n    servo_x->waiting -= 1;\n    return;\n  }\n  \n  switch(opcode) {\n    // Move servo to new position\n    case MOV:\n      // Use servo id to determine which pwm to change\n      if(servo_x->id == 1) {\n        PWMDTY0 = ((param + 3) + (param * 2));\n      } else if (servo_x->id == 2) {\n        PWMDTY1 = ((param + 3) + (param * 2));\n      }\n      \n      // Set a wait delay to allow servo to move to position\n      servo_x->waiting = abs(servo_x->position - param) * 2; \n      servo_x->position = param;\n      \n      // Move pointer to next opcode\n      servo_x->index += 1;\n      break;\n    case WAIT:\n      servo_x->waiting = param;\n      servo_x->index += 1;\n      break;\n    case START_LOOP:\n      if (servo_x->looping) {\n        servo_x->state = ERROR;\n        servo_x->error_code = LOOP_ERROR;\n      }\n        \n      servo_x->looping = param; \n      servo_x->loop_start = (index + 1);\n      servo_x->index += 1;\n      break;\n    case END_LOOP:\n      if (servo_x->looping) {\n        servo_x->looping -= 1;\n        \n        // if still looping after decrement, restart loop\n        if (servo_x->looping) {\n          servo_x->index = servo_x->loop_start;\n        }\n      } else {\n        servo_x->index += 1; // leave loop portion of recipe\n      }\n      break;\n    case END_RECIPE:\n      servo_x->state = END;\n      break;\n    default:\n      servo_x->state = ERROR;\n      servo_x->error_code = INVALID_OPCODE;\n      break;\n  } // switch(cmd)\n}\n\nvoid SwitchServoState(servo *servo_x) {\n  switch(servo_x->state) {\n    case RUN:\n      SwitchCmd(servo_x);\n      if (servo_x->id == 1) {\n        PORTB = PORTB & 0xf0;\n      } else if(servo_x->id == 2) {\n        PORTB = PORTB & 0x0f;\n      }\n      break;\n    case BEGIN:\n      \n      break;\n    case END:\n      // End of recipe led indicator\n      if (servo_x->id == 1) {\n        PORTB = PORTB & 0xf0;\n        PORTB = PORTB | 0x04;\n      } else if(servo_x->id == 2) {\n        PORTB = PORTB & 0x0f;\n        PORTB = PORTB | 0x40;\n      }\n      break;\n    case ERROR:\n      switch(servo_x->error_code) {\n        // Loop error\n        case LOOP_ERROR:\n          if (servo_x->id == 1) {\n            PORTB = PORTB & 0xf0;\n            PORTB = PORTB | 0x02;\n          } else if(servo_x->id == 2) {\n            PORTB = PORTB & 0x0f;\n            PORTB = PORTB | 0x20;\n          }\n          break;\n        case INVALID_OPCODE:\n          if (servo_x->id == 1) {\n            PORTB = PORTB & 0xf0;\n            PORTB = PORTB | 0x01;\n          } else if(servo_x->id == 2) {\n            PORTB = PORTB & 0x0f;\n            PORTB = PORTB | 0x10;\n          }\n          break;        \n      }\n      break;\n    case PAUSE:\n      if (servo_x->id == 1) {\n        PORTB = PORTB & 0xf0;\n        PORTB = PORTB | 0x08;\n      } else if(servo_x->id == 2) {\n        PORTB = PORTB & 0x0f;\n        PORTB = PORTB | 0x80;\n      }\n      break;\n  }\n}\n\nvoid CheckOverrideCmd() {\n  char input_char;  \n  \n  // if there is a keyboard input, store to array\n  if (SCI0SR1_RDRF != 0) {\n    input_char = SCI0DRL;\n    // when enter is pressed, process input\n    if (input_char == 13) {\n      SwitchInputCmd(&servo_1, &ovr_cmd[0]);  \n      SwitchInputCmd(&servo_2, &ovr_cmd[1]);  \n      \n      (void)printf("\\n\\r> ");\n      ovr_index = 0;\n    } else if (input_char == 8) {\n      // handle backspace\n      ovr_index--;\n    } else {\n      ovr_cmd[ovr_index] = input_char;\n      // just echo the char to console\n      (void)printf("%c", ovr_cmd[ovr_index]);\n      ovr_index++;\n    }\n  }  \n}\n\nvoid SwitchInputCmd(servo *servo_x, char *p_cmd) {\n  //Ignor error servos\n  if(servo_x->state == ERROR) {\n    return;\n  }\n    \n  switch(*p_cmd) {\n    case 80:\n    case 112:\n         //pause\n         servo_x->state = PAUSE; \n      break;\n    case 67:\n    case 99:\n        // continue\n        if (servo_x->state != END) {\n          servo_x->state = RUN;\n        }\n        break;\n    case 82:\n    case 114:\n        //Move to right if recipe is paused\n        if(servo_x->state == PAUSE) {\n          // set new position\n          if (servo_x->position >= 1) {\n            servo_x->position -= 1;\n          }\n          \n          // move servo\n          if(servo_x->id == 1) {\n            PWMDTY0 = (servo_x->position + 3) + (servo_x->position * 2);\n          } else if (servo_x->id == 2) {\n            PWMDTY1 = (servo_x->position + 3) + (servo_x->position * 2);\n          }\n          \n          // set wait\n          servo_x->waiting = 2;\n        }\n        break;\n    case 76:\n    case 108:\n        //Move to left if recipe is paused\n        if(servo_x->state == PAUSE) {\n          // set new position\n          if (servo_x->position <= 4) {\n            servo_x->position += 1;\n          }\n          \n          // move servo\n          if(servo_x->id == 1) {\n            PWMDTY0 = (servo_x->position + 3) + (servo_x->position * 2);\n          } else if (servo_x->id == 2) {\n            PWMDTY1 = (servo_x->position + 3) + (servo_x->position * 2);\n          }\n          \n          // set wait\n          servo_x->waiting = 2;\n        }\n        break;\n    case 78:\n    case 110:\n         //No operation performed\n         break;\n    case 66:\n    case 98:\n        //Restart the recipe\n        InitializeServoState(servo_x, servo_x->id, servo_x->p_recipe);\n        servo_x->state = RUN;\n        break;\n  } // switch servo 1 command\n}\n\nvoid InitializeServoState(servo *servo_x, int id, char *p_recipe) {\n  servo_x->id = id;\n  servo_x->p_recipe = p_recipe;\n  servo_x->index = 0;\n  servo_x->waiting = 0;\n  servo_x->looping = 0;\n  servo_x->position = 0;\n  servo_x->error_code = 0;\n  servo_x->state = BEGIN;\n}\n\nvoid InitializeLeds() {\n  DDRB = 0xFF;\n  PORTB = 0x00; \n}\n  \nvoid main(void) {\n  initialize_pwm_1();\n  initialize_pwm_2();\n  \n  InitializeServoState(&servo_1, 1, &recipe1);\n  InitializeServoState(&servo_2, 2, &recipe2);\n  \n  InitializeSerialPort();\n  initialize_timer();\n  \n  InitializeLeds();\n\n  (void)printf("> ");\n  for(;;) {\n    if (elapsed > 0) {\n      CheckOverrideCmd();\n      UpdateServo1();\n      UpdateServo2();\n      elapsed = 0; \n    }\n  } /* loop forever */\n}\n	B:\\Portfolio\\Real-time	39	4
90	2014-11-13 00:55:36	2014-10-03 19:38:05	Lab1_RobotPath.py	Uses a black and white map to calculate a path between two coordinates	# <package>\n#     Robot Path Planner\n# <.package>\n# <description>\n#     Uses a black and white map to calculate a path between two coordinates\n# <.description>\n# <keywords>\n#     PIL, Queue, time, math, image, A* search, DFS, depth-first search, AI\n# <.keywords>\n\n# Author : Stephen Brewster\n# Date : 9/21/2014\n# Description : Using a black and white map as a resource\n#    plot a path between 2 specified points using A*\n#    as a search algorithm and optimize the resulting path\n\nfrom PIL import Image, ImageDraw\nimport math\nimport time\nimport Queue\n\n#~~~~~~~~~+++ UTILITY +++~~~~~~~~~~~~@\n\ndef draw_circle( xy, r, color ):\n    global draw\n    draw.ellipse( ( xy[0]-r, xy[1]-r,\n                    xy[0]+r, xy[1]+r ),\n                    fill = color )\n\ndef draw_line( s, e, color ):\n    global draw\n    draw.line( ( s, e ), fill = color)\n\ndef draw_rectangle( xy, r, color):\n    global draw\n    draw.rectangle( ( ( xy[0]-term_rad,xy[1]-term_rad\n                     ),( xy[0]+term_rad,xy[1]+term_rad\n                      ) ), fill = color, outline = color )\n\ndef draw_path( path ):\n    for node in path:\n        draw_rectangle( node, 1, (255,0,0) )\n\n    save_map()\n\n# Ensures location is valid\ndef valid_location( xy ):\n    global pix_map\n    x = xy[0]\n    y = xy[1]\n    \n    for i in range( -1, 2 ):\n        for j in range( -1, 2 ):\n            if pix_map[x+i,y+j] == (0,0,0):\n                return False\n    return True\n\n# generates all successors of a pixel\ndef get_successors( xy, simplify ):\n    x = xy[0]\n    y = xy[1]\n    succ = []\n    #succ_range = 1\n    \n    #if simplify:\n    #    succ_range = 90\n\n    #x_succ = get_x_succ( xy, succ_range )\n    #for s in x_succ:\n    #    succ.append( s )\n    #    for t in get_y_succ( s, succ_range ):\n    #        succ.append( t )\n\n    #y_succ = get_y_succ( xy, succ_range )\n    #for s in y_succ:\n    #    succ.append( s )\n\n    for i in range( -1, 2 ):\n        for j in range( -1, 2 ):\n            succ.append( ( x + i, y + j ) )\n\n    return succ    \n\n#def get_x_succ( xy, r ):\n#    global expanded\n#    succ = []\n#    for i in range( 1, r+1 ):\n#        c = ( xy[0] + i, xy[1] )\n#        if not (c in expanded) and valid_location( c ):\n#            succ.append( c )\n#            expanded.append( c )\n#        else:\n#            break\n\n#    for i in range( 1, r+1 ):\n#        c = ( xy[0] - i, xy[1] )\n#        if not (c in expanded) and valid_location( c ):\n#            succ.append( c )\n#            expanded.append( c )\n#        else:\n#            break\n#    return succ\n\n#def get_y_succ( xy, r ):\n#    succ = []\n#    for i in range( 1, r+1 ):\n#        c = ( xy[0], xy[1] + i )\n#        if not (c in expanded) and valid_location( c ):\n#            succ.append( c )\n#            expanded.append( c )\n#        else:\n#            break\n\n#    for i in range( 1, r+1 ):\n#        c = ( xy[0], xy[1] - i )\n#        if not (c in expanded) and valid_location( c ):\n#            succ.append( c )\n#            expanded.append( c )\n#        else:\n#            break\n#    return succ\n\n# Prompt user for the robot's travel plans\ndef get_coordinates( ):\n    global s_term, e_term\n    coords = []\n    coords.append( input( "Starting X: " ) )\n    coords.append( input( "Starting Y: " ) )\n    coords.append( input( "Ending X: " ) )\n    coords.append( input( "Ending Y: " ) )\n\n    s_term = ( coords[0], coords[1] )\n    e_term = ( coords[2], coords[3] )\n\n# Simple heuristic of 1x 90 degree turn\ndef heuristic( s, e, simplify ):\n    global sqrt_2\n    dx = abs( s[0] - e[0] )\n    dy = abs( s[1] - e[1] )\n    \n    if simplify:\n        return ( dx + dy )  + ((sqrt_2 - 2) * min(dx, dy))\n    else:\n        return dx + dy\n    \n\ndef turn_penalty( parent, current, successor ):\n    back_2 = parent[ current ]\n    path = ( back_2, current, successor )\n    if back_2 != None:\n        return detect_turns( path, 0, 1)\n    return 0\n\ndef save_map():\n    global original, save_name\n    original.save(save_name)\n\n#~~~~~~~~~+++ SEARCH +++~~~~~~~~~~~~~@\n\n# Direct line search, ignores pixel color\n# Returns number of pixels traveled\ndef a_star_search( start, goal, simplify ):\n    global pix_map\n    frontier = Queue.PriorityQueue()\n    frontier.put((0, start))\n    nodes_visited = 0;\n\n    parent = {}\n    path_cost = {}\n\n    parent[start] = None\n    path_cost[start] = 0\n\n    while not frontier.empty():\n        nodes_visited += 1\n        current = frontier.get()[1]\n        if not valid_location( current ):\n            continue\n        \n        if current == goal:\n            break\n        \n        for successor in get_successors(current, simplify):\n            new_cost = path_cost[current] + heuristic( current, successor, simplify )\n\n            if simplify:\n               new_cost += turn_penalty( parent, current, successor )\n            \n            if successor not in path_cost or new_cost < path_cost[successor]:\n                path_cost[successor] = new_cost\n                priority = path_cost[successor] + heuristic( successor, goal, simplify )\n                frontier.put((priority, successor))\n                parent[successor] = current\n                #pix_map[current] = (200,200,200)\n\n    return parent, path_cost, nodes_visited\n\ndef derive_path(parent, start, goal):\n    temp = goal\n    path = []\n    while temp != start:\n        path.insert( 0, temp )\n        temp = parent[temp]\n\n    return path\n\ndef post_simplify_path( path ):\n    waypoints = []\n    max_steps = 90\n    steps = 1;\n    \n    for i in range( 0, len( path ) - 2 ):\n        if detect_turns( path, i, 1 ) == 1:\n            waypoints.append( path[i+1] )\n            steps = 1\n        if steps % max_steps == 0:\n            waypoints.append( path[i] )\n            steps = 1\n\n        steps += 1\n    waypoints.append( path[ len(path) - 1 ] )\n    return waypoints\n\n# Scans the path for turns and returns the number of turns in requested range i->look_f\ndef detect_turns( path, i, look_f ):\n    # determine direction\n    north_south = False\n    east_west = False\n    diagnol = False\n    turn_count = 0\n\n    for j in range( i, i + look_f ):\n        two_bx = path[j][0]\n        two_by = path[j][1]\n        one_bx = path[j+1][0]\n        one_by = path[j+1][1]\n        curr_x = path[j+2][0]\n        curr_y = path[j+2][1]\n        north_south = ( two_bx == one_bx )\n        east_west = (two_by == one_by )\n        diagnol = not( north_south or east_west )\n\n        # if the direction established has been altered, turn detected\n        if ( north_south and curr_x != one_bx ) or ( east_west and curr_y != one_by ) or ( diagnol and ( curr_x == one_bx or curr_y == one_by ) ):\n            turn_count += 1\n\n    return turn_count\n\n\n#~~~~~~~~~+++ DEFAULTS +++~~~~~~~~~~~@\n\noriginal = Image.open("robotMap.png")\nsave_name = "solution.png"\n\npix_map = original.load() # map of pixels in image\ndraw = ImageDraw.Draw( original ) # draw to image\n\neasy = [ ( 2100, 300 ), ( 2500, 1000 ) ]\nmedium = [ ( 1500, 275 ), ( 1500, 1000 ) ]\nhard = [ ( 1200, 800 ), ( 1200, 500 ) ]\nextreme = [ (352, 252 ), ( 3851, 1156 ) ]\n\npath_simp_series = [ \n                    [ ( 2500, 1000 ), ( 2450, 1200 ) ],\n                    [ ( 1500, 1060 ), ( 980, 1070 ) ]\n                   ]\n\ns_term = easy[0]  # Default Start\ne_term = easy[1]  # Default End\n\ns_term_c = ( 255, 0, 0 ) # start term color\ne_term_c = ( 0, 0, 255 ) # end term color\npath_c = ( 0, 255, 0 )   # path color\n\nterm_rad = 3             # radius of terminal markers\npixels_per_meter = 30    # scale of image\nrobot_width = 3          # in pixels\nsqrt_2 = math.sqrt(2)\n\nexpanded = []\n\n#~~~~~~~~~+++ MAIN +++~~~~~~~~~~~~~~~@    \n#g = get_successors( (2500, 1000), True )\n#for node in g:\n#    pix_map[node] = (250,0,0)\n#save_map()\n#cmd = raw_input(">>")\n\nwhile True:\n    cmd = raw_input("Simple Search (y/n)(q to quit):\\n>> ")\n    simplify = False\n    post_process = False\n    \n    if cmd == "n" or cmd == "N":\n        opt_choice = input("Enter:\\n\\t1 for post processing simplification\\n\\t2 for A* simplification\\n>> ")\n        if opt_choice == 1:\n            post_process = True\n        elif opt_choice == 2:\n            simplify = True\n        else:\n            continue\n    \n    get_coordinates()\n\n    start = time.time()\n    (parent, path_cost, nodes_visited) = a_star_search( s_term, e_term, simplify )\n    end = time.time()\n\n    path = derive_path(parent, s_term, e_term)\n    \n    if post_process:\n        path = post_simplify_path( path )\n        \n    draw_path(path)\n    print "Time: ", end - start\n    print "Heuristic Distance: ", heuristic( s_term, e_term, simplify )\n    print "Distance Traveled: ", len( path ) #path_cost[e_term]\n    print "Nodes Visited: ", nodes_visited\n    \n    cmd = raw_input("Print path (y/n)\\n>> ")\n    if cmd == "y" or cmd == "Y":\n        for node in path:\n            print node\n\n    # Draw terminals last to overlap path line\n    draw_circle( s_term, term_rad, s_term_c )\n    draw_circle( e_term, term_rad, e_term_c )\n\n    save_map()\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n	B:\\Portfolio\\RobotPathFinder	41	1
91	2014-11-29 14:16:38	2014-11-29 13:49:06	histogram.rb	Takes text from standard in and produces a histogram of word occurences	# <package>\n#     Word Histogram in ruby\n# <.package>\n# <description>\n#     Takes text from standard in and produces a histogram of word occurences\n# <.description>\n# <keywords>\n#     stdin, histogram\n# <.keywords>\n\n#Generates a histogram of word occurences using stdin\n#Author: Stephen Brewster\n#02/16/2014\n#\n\n#Formats a line from stdin\ndef prepareLine(line)\n  line = line.downcase\n              .chomp!\n              .gsub(/[^\\s0-9a-zA-Z']*/,"")\n              .sub(/^\\s*/, "")\n  puts "#{line}"\n  line\nend\n\n#Adds a line of words to the hash of word occurences\ndef hashLine(line, histogram)\n  words = line.split(/ +/)\n  words.each { |word|\n    #print "#{word} = #{histogram[word]+1}\\n"\n    if histogram.has_key?(word) then histogram[word] +=1\n      else histogram[word] = 1\n    end\n  }\n  histogram\nend\n\n#Returns an array of hashes based on a minimum value (word occurrence)\ndef getOccurencesWithMin(min,bag)\n  bag.select { |k,v| v >= min }\nend\n\n#Sorts the hash by values, then keys when values match\ndef sortArray(array)\n  #array.sort_by { |k,v| [v,k] } \n  array.sort { |k,v| \n  comparison = k.last <=> v.last\n  if comparison.zero?\n    k.first <=> v.first\n  else\n    comparison\n  end\n}\nend\n\n#Once a hash is fully generated from stdin, print results\ndef printWordOccurences(bag, title)\n  puts "\\n#{title}"\n  bag.each { |k,v| print "#{k} = #{v}\\n" }\nend\n\n#Print histogram where each * represents 1 occurence\ndef printHistogram(bag)\n  #Find the length of the longest word to format print\n  longestWordLen = bag.inject(0) { |c,(k,v)|\n    k.length > c ? k.length : c\n  }\n  #Print histogram\n  bag.each { |k,v|\n    printf("%-#{longestWordLen}.#{longestWordLen}s%s\\n", k, "*" * v)\n  }\nend\n\n#Main functions\nbag = Hash.new(0)\n\n#Use integer argument from CLI to set minimum occurrence for histogram\n#Default of 2\nif ARGV[0] != nil then occurMin = ARGV[0].to_i \n  else occurMin = 2\nend\n\n#Iterate through lines provided to stdin and process\n$stdin.each { |a|\n  a = prepareLine(a)\n  bag = hashLine(a, bag)\n}\n\n#printWordOccurences(bag, "Full list of word occurences")\nreducedBag = getOccurencesWithMin(occurMin, bag)\n#printWordOccurences(reducedBag, "Words with 2 or more occurences")\n\nsorted = sortArray(reducedBag)\n#printWordOccurences(sorted, "Sorted array")\nprintHistogram(sorted)\n\n	B:\\Portfolio\\RubyHistogram	42	5
92	2014-11-29 14:14:46	2014-11-29 13:49:06	phonetic.rb	Converts text to the NATO phonetic alphabet	# <package>\n#     Phonetic Alphabet\n# <.package>\n# <description>\n#     Converts text to the NATO phonetic alphabet\n# <.description>\n# <keywords>\n#     stdin\n# <.keywords>\n\n# Convert to/from phonetic alphabet\n# Author: Stephen Brewster\n# 02/17/2014\n\nclass Phonetic\n\n  Letters = [\n             ['A', 'ALPHA'],\n             ['B', 'BRAVO'],\n             ['C', 'CHARLIE'],\n             ['D', 'DELTA'],\n             ['E', 'ECHO'],\n             ['F', 'FOXTROT'],\n             ['G', 'GOLF'],\n             ['H', 'HOTEL'],\n             ['I', 'INDIA'],\n             ['J', 'JULIET'],\n             ['K', 'KILO'],\n             ['L', 'LIMA'],\n             ['M', 'MIKE'],\n             ['N', 'NOVEMBER'],\n             ['O', 'OSCAR'],\n             ['P', 'PAPA'],\n             ['Q', 'QUEBEC'],\n             ['R', 'ROMEO'],\n             ['S', 'SIERRA'],\n             ['T', 'TANGO'],\n             ['U', 'UNIFORM'],\n             ['V', 'VICTOR'],\n             ['W', 'WHISKEY'],\n             ['X', 'XRAY'],\n             ['Y', 'YANKEE'],\n             ['Z', 'ZULU'],\n             ]\n\n  # Translate a word to its phonetic alphabet equivalent\n  def self.to_phonetic(word)\n    word.gsub!(/[^a-zA-Z]/,"")\n    phonetic = ""\n\n    word.each_char do |c|\n      # For each letter in the word find the Alpha to NATO Phonetic\n      match =  (Letters.select { |k,v| k == c.upcase })\n      # Ensure a phonetic was found to match the character\n      if match.empty? then raise "Invalid character: #{c}" end\n      phonetic += match.pop[1] + " "\n    end\n\n    print "#{phonetic.rstrip!}\\n"\n    phonetic\n  end\n\n  # Translate a sequence of phonetic alphabet code words \n  # to their alphabetic equivalent\n  def self.from_phonetic(str)\n    lineAsArr = str.split(/ +/)\n    alpha = ""\n\n    lineAsArr.each do |w|\n      # For each word in the string find the NATO Phonetic to Alpha\n      match = (Letters.select { |k,v| v == w.upcase })\n      # Ensure an alpha character was found to match the given phonetic\n      if match.empty? then raise "Invalid phonetic: #{w}" end\n      alpha += match.pop[0]\n    end\n\n    print "#{alpha}\\n"\n    alpha\n  end\n\n  # Translates a string of plain text to the NATO Phonetic Alphabet if it\n  # starts with 'A2P' and the reverse translation for 'P2A'\n  def self.translate(trans_line)\n    lineAsArr = trans_line.split(/ +/) #Convert string to array of words\n    cmd = lineAsArr.shift.upcase       #Pop the command word out of the array\n\n    # Translate Alpha to Phonetic\n    if cmd == "A2P" then\n      return lineAsArr.inject("") { |result,w| result += Phonetic.to_phonetic(w) }\n\n    # Translate Phonetic to Alpha\n    elsif cmd == "P2A" then\n      return Phonetic.from_phonetic(lineAsArr.join(" "))\n\n    # First word not A2P or P2A\n    else\n      raise "Missing command word (A2P or P2A): #{trans_line}"\n    end\n\n  rescue => detail\n    print "#{detail.message}\\n"\n    return detail.message\n  end\nend\n\nif STDIN.tty? then\n  print "Not reading from STDIN\\n"\nelse\n  STDIN.each { |l| if !l.rstrip!.split(/ +/).empty? then Phonetic.translate(l) end }\nend\n\n	B:\\Portfolio\\RubyPhonetic	43	5
93	2014-11-29 14:15:19	2014-11-29 13:49:06	phonetic_test.rb	Unit tests for phonetic alphabet	# <package>\n#     Phonetic Alphabet\n# <.package>\n# <description>\n#     Unit tests for phonetic alphabet\n# <.description>\n# <keywords>\n#     unit test\n# <.keywords>\n\nrequire_relative 'phonetic'\nrequire 'test/unit'\n\nclass PhoneticTest < Test::Unit::TestCase\n\n  def test_rit_to_phonetic\n    assert_equal 'ROMEO INDIA TANGO', Phonetic.to_phonetic('RIT')\n  end\n\n  def test_line_rit_to_phonetic\n    assert_equal 'ROMEO INDIA TANGO', Phonetic.translate('A2P RIT')\n  end\n\n  #Remove this line and place more tests here\n\n  # Translation missing  command arg\n  def test_line_missing_cmd\n    alpha = 'RIT'\n    assert_equal "Missing command word (A2P or P2A): #{alpha}", Phonetic.translate(alpha)\n  end\n\n  # Invalid Phonetics are not recognized\n  def test_p2a_not_found\n    alpha = "FOXMART ALFA INDIGO LARGE"\n    assert_raise(RuntimeError) { Phonetic.from_phonetic(alpha) }\n    assert_equal "Invalid phonetic: FOXMART", Phonetic.translate("P2A " + alpha)\n  end\n\n  # Non-alpha characters are not processed\n  def test_non_alpha\n    assert_equal 'MIKE INDIA TANGO', Phonetic.to_phonetic('<~#~@MIT!~#~>')\n    assert_equal 'MIKE INDIA TANGO', Phonetic.translate('A2P &*(MIT)#@(#*@')\n  end\n\n  # Test case-sensitivity\n  def test_case_sensitive\n    assert_equal 'ASCEND', Phonetic.from_phonetic('alpha Sierra CHARliE eChO NoVemBer dELTa')\n    assert_equal 'ALPHA SIERRA CHARLIE ECHO NOVEMBER DELTA', Phonetic.to_phonetic('aScEnD')\n    assert_equal 'ASCEND', Phonetic.translate('p2a alpha Sierra CHARliE eChO NoVemBer dELTa')\n  end\nend\n	B:\\Portfolio\\RubyPhonetic	43	5
94	2014-12-06 23:08:04	2014-12-06 23:02:03	SimpleThread.java	A simple practice in java threads	/*\n<package>\n\tSimple Thread in Java\n<.package>\n<description>\n    A simple practice in java threads\n<.description>\n<keywords>\n    threads, concurrency\n<.keywords>\n*/\n\n/**\n * Author: Stephen Brewster \n * Date: 9/17/2014\n * Description: A simple thread that prints a provided string at a\n * random interval between 0-1000 ms\n */\n\n\nimport java.util.Random;\n\nclass SimpleThread implements Runnable{\n    private String print_stmt;\n\n    public SimpleThread(String stmt) {\n\tprint_stmt = stmt;\n    }\n\n    public void run() {\n\tint counter = 1;\n\twhile (counter <= 9) {\n   \t    System.out.println(counter + ". " + print_stmt);\n\t    counter++;\n\t    try {\n\t        sleeper();\n\t    } catch (InterruptedException err) {}\n\t} \n\tSystem.out.println("DONE! " + print_stmt);\n    }\n\n    private void sleeper() throws InterruptedException {\n\tRandom rand = new Random();\n        int randomNum = rand.nextInt((1000 - 0) + 1) + 0;\n\tThread.sleep(randomNum);\n    }\n}\n	B:\\Portfolio\\SimpleThread	44	2
95	2014-12-06 23:08:37	2014-12-06 23:02:03	TwoThreadTest.java	Displays Histogram information for a list of years	/*\n<package>\n\tSimple Thread in Java\n<.package>\n<description>\n    Displays Histogram information for a list of years\n<.description>\n<keywords>\n    driver, threads\n<.keywords>\n*/\n\n/**\n * Driver for simple threading example\n */\n\nclass TwoThreadTest {\n    public static void main(String args[]) {\n\tSimpleThread t1 = new SimpleThread("HI");\n\tSimpleThread t2 = new SimpleThread("HO");\n\tThread thr1 = new Thread(t1);\n\tThread thr2 = new Thread(t2);\n\tthr1.start();\n\tthr2.start();\n    }\n}\n	B:\\Portfolio\\SimpleThread	44	2
96	2014-12-07 15:37:04	2014-12-07 15:40:46	ConferenceRoom.java	Simulates the conference room component of the simulation	/*\n<package>\n\tConference Room Simulation\n<.package>\n<description>\n    Simulates the conference room component of the simulation \n<.description>\n<keywords>\n    explicit lock, concurrency\n<.keywords>\n*/\n\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n\npublic class ConferenceRoom {\n\t\n\tfinal Lock lock = new ReentrantLock();\n\tfinal Condition isAvailable = lock.newCondition();\n\t\n\tpublic Lock getLock() {\n\t\treturn this.lock;\n\t}\n\t\n\tpublic Condition getCondition() {\n\t\treturn this.isAvailable;\n\t}\n\n}\n	B:\\Portfolio\\SoftwareProjectDay\\src	45	2
97	2014-12-07 15:37:45	2014-12-07 15:40:46	Developer.java	Developer object for the simulation	/*\n<package>\n\tConference Room Simulation\n<.package>\n<description>\n \tDeveloper object for the simulation\n<.description>\n<keywords>\n    trivial\n<.keywords>\n*/\n\nimport java.util.concurrent.locks.Condition;\n\n\npublic class Developer extends Employee {\n\n    TeamLead boss;\n\n    public Developer(String name, TeamLead boss) {\n        super("developer", name);\n        this.boss = boss;\n        boss.addEmployee(this);\n    }\n    \n    public void attendTeamMeeting() {\n    \tlog(" attends team meeting.");\n    }\n    \n    public void returnToWork() {\n    \tlog(" returns to work");\n    }\n\n    @Override\n    protected void doMorningWork() {\n    \t\n    }\n\n    @Override\n    protected void doAfternoonWork() {\n\n    }\n}\n	B:\\Portfolio\\SoftwareProjectDay\\src	45	2
98	2014-12-07 15:38:15	2014-12-07 15:40:46	Employee.java	Employee interface for the simulation	/*\n<package>\n\tConference Room Simulation\n<.package>\n<description>\n \tEmployee interface for the simulation\n<.description>\n<keywords>\n    explicit lock, concurrency\n<.keywords>\n*/\n\nimport java.util.Random;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic abstract class Employee extends Thread {\n\n    private String jobTitle;\n    private SimulationClock.Stopwatch workWatch = new SimulationClock.Stopwatch();\n    private SimulationClock.Stopwatch lunchWatch = new SimulationClock.Stopwatch();\n    protected int lunchHour = 12;\n    protected int lunchMinute = 0;\n    protected int lunchDuration = 30;\n    protected int leavingHour = 16;\n    protected int leavingMinute = 30;\n    protected ReentrantLock busyLock = new ReentrantLock();\n\n    public Employee(String jobTitle, String name) {\n        super(name);\n        this.jobTitle = jobTitle;\n        this.start();\n    }\n\n    public void log(String actionName) {\n        Logger.logAction(jobTitle + " " + getName(), actionName);\n    }\n\n    public void run() {\n        // Clock in some time between 08:00 and 08:30.\n        int clockInLatenessMinutes = (int) (Math.random() * 31);\n        \n        // PM isn't late\n        if (this instanceof PM) {\n        \tclockInLatenessMinutes = 0;\n        }\n        \n        SimulationClock.waitUntil(8, clockInLatenessMinutes);\n        clockIn();\n\n        // Let the subclass conduct morning meetings\n        doMorningWork();\n        \n        askQuestions();\n\n        // Do lunch.\n        SimulationClock.waitUntil(lunchHour, lunchMinute);\n        clockOutForLunch();\n        SimulationClock.waitMinutes(lunchDuration);\n        clockInFromLunch();\n        \n        // Let the subclass do meetings or ask questions or whatever until the end of the day.\n        doAfternoonWork();\n\n        // Clock out at the clock-out time.\n        SimulationClock.waitUntil(leavingHour, leavingMinute);\n        clockOut();\n    }\n\n    private void clockIn() {\n    \tworkWatch.reset();\n        workWatch.start();\n        log("clocked in");\n    }\n\n    private void clockOutForLunch() {\n        busyLock.lock();\n        workWatch.pause();\n        lunchWatch.reset();\n        lunchWatch.start();\n        log("clocked out for lunch");\n    }\n\n    private void clockInFromLunch() {\n        lunchWatch.pause();\n        workWatch.start();\n        log("clocked in from lunch");\n    }\n\n    private void clockOut() {\n        busyLock.lock();\n        workWatch.pause();\n        log("clocked out");\n    }\n\n    private void askQuestions() {\n    \twhile(SimulationClock.currentSimulationDate().getTime().getHours() < lunchHour) {\n        \ttry {\n\t\t\t\tif( (int)Math.random() * 100 < 2) {\n\t\t\t\t\tlog(" asks a question!");\n\t\t\t\t}\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n        }\n    }\n    \n    public double getHoursWorked() {\n        int minutesWorked = workWatch.totalTimeElapsed();\n        return minutesWorked / 60;\n    }\n\n    protected abstract void doMorningWork();\n\n    protected abstract void doAfternoonWork();\n\n}\n	B:\\Portfolio\\SoftwareProjectDay\\src	45	2
99	2014-12-07 15:38:30	2014-12-07 15:40:46	Logger.java	Logging for the simulation	/*\n<package>\n\tConference Room Simulation\n<.package>\n<description>\n    Logging for the simulation \n<.description>\n<keywords>\n\tlogger\n<.keywords>\n*/\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class Logger {\n\n    /**\n     * Provides standardised logging for actions.\n     * @param actorName Who is doing the action?\n     * @param actionName What is the action?\n     */\n    public static void logAction(String actorName, String actionName) {\n        String timeOfDay = SimulationClock.currentTimeString();\n        String message = timeOfDay + " " + actorName + " " + actionName + ".";\n        System.out.println(message);\n    }\n\n}\n	B:\\Portfolio\\SoftwareProjectDay\\src	45	2
100	2014-12-07 15:38:48	2014-12-07 15:40:46	Main.java	Driver class for the simulation	/*\n<package>\n\tConference Room Simulation\n<.package>\n<description>\n    Driver class for the simulation \n<.description>\n<keywords>\n\tdriver\n<.keywords>\n*/\n\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        // 2014-08-06 06:00:00\n        Calendar startDate = new GregorianCalendar(2014, Calendar.AUGUST, 6, 6, 0, 0);\n        // one simulated minute per ten actual milliseconds\n        double speedFactor = 6000;\n        SimulationClock.start(startDate, speedFactor);\n\n        final int team_count = 3;\n        final int team_size = 4;\n        \n        ConferenceRoom confRoom = new ConferenceRoom();\n        \t\t\n        // Create a team hierarchy.\n        PM carmen = new PM("Carmen", confRoom, team_count);\n        \n        for(int i = 1; i <= team_count; i++) {\n        \tTeamLead leadObj = new TeamLead(String.valueOf(i), carmen);\n        \t\n        \tfor(int j = 1; j < team_size; j++) {\n        \t\tDeveloper devObj = new Developer(String.valueOf(i + "-" + j), leadObj);\n        \t}\n        }\n    }\n\n}\n	B:\\Portfolio\\SoftwareProjectDay\\src	45	2
101	2014-12-07 15:39:44	2014-12-07 15:40:46	PM.java	Project manager class for the simulation	/*\n<package>\n\tConference Room Simulation\n<.package>\n<description>\n    Project manager class for the simulation \n<.description>\n<keywords>\n    concurrency, synchronization\n<.keywords>\n*/\n\nimport java.util.*;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class PM extends Employee {\n\n    private SimulationClock.Stopwatch answeringQuestionsWatch = new SimulationClock.Stopwatch();\n    private List<Employee> waiting = Collections.synchronizedList(new ArrayList<Employee>());\n   \n    int team_count;\n    \n    final Lock lock = new ReentrantLock();\n    final Condition meetingReady = lock.newCondition();\n    final Condition meetingComplete = lock.newCondition();\n    \n    final ConferenceRoom confRoom;\n    \n    public PM(String name, ConferenceRoom confRoom, int team_count) {\n        super("PM", name);\n        this.confRoom = confRoom;\n        this.team_count = team_count;\n    }\n\n    public void askQuestion() {\n        synchronized (this) {\n            log("receives a question");\n            answeringQuestionsWatch.start();\n\n            // The buck stops here, but give it ten minutes.\n            SimulationClock.waitMinutes(10);\n\n            answeringQuestionsWatch.pause();\n            log("answers a question");\n        }\n    }\n\n    public int getTimeSpentAnsweringQuestions() {\n        return answeringQuestionsWatch.totalTimeElapsed();\n    }\n\n    public void goToMorningMeeting(TeamLead lead) {\n    \twaiting.add(lead);\n    \tlog(", Team lead " + lead.getName() +" arrives at my office");\n    \t\n    \tlock.lock();\n    \t\n    \ttry {\n    \t\t// Wait for all memebers to arrive\n    \t\twhile(waiting.size() < team_count) \n    \t\t\tmeetingReady.await();\n    \t\t\n    \t\tmeetingReady.signal(); // Alert the next thread it can go\n    \t\t\n    \t\t// Wait for meeting to complete\n    \t\tmeetingComplete.await();\n    \t\t\n    \t\tmeetingComplete.signal(); // Alert the next thread it can go\n\t    } catch (InterruptedException err) { \n\t    \t\n\t    } finally {\n\t    \tlock.unlock();\n    \t}\n    \t\n    \tSimulationClock.waitMinutes(1);\n    \tlog(", Team lead " + lead.getName() + " leaves my office.");\n    \twaiting.remove(lead);\n    }\n    \n    @Override\n    protected void doMorningWork() {\n    \tthis.conductMorningMeeting();\n    \tSimulationClock.waitUntil(10, 00);\n    \tlog(" attends executive meeting");\n    \tSimulationClock.waitMinutes(60);\n    \tlog(" returns to 'work'");\n    }\n    \n    private void conductMorningMeeting() {\n    \tlock.lock();\n    \t\n\t\ttry {\n\t    \tlog(" is doing administrative work, waiting for team leaders to arrive");\n\t    \twhile(waiting.size() < team_count)\n\t    \t\tmeetingReady.await();\n\t    \t\n\t    \t// Signal team lead that the meeting is beginning\n\t    \tmeetingReady.signal();\n\t    \n\t    \tlog(" starts the morning meeting with team leaders");\n\t    \tSimulationClock.waitMinutes(15); // Conduct meeting for 15 minutes\n\t    \tlog(" morning meeting is concluded");\n\t    \t\n\t    \t// Signal a team lead the meeting is complete\n\t    \tmeetingComplete.signal();\n\t\t} catch (InterruptedException err) {} \n\t\tfinally {\n\t\t\tlock.unlock();\n\t\t}\n    }\n\n    @Override\n    protected void doAfternoonWork() {\n    \tSimulationClock.waitUntil(14, 0);\n    \tlog(" attends afternoon executive meeting.");\n    \tSimulationClock.waitMinutes(60);\n    \tlog(" returns to 'work'.");\n    }\n    \n    public ConferenceRoom getConferenceRoom() {\n    \treturn this.confRoom;\n    }\n}\n	B:\\Portfolio\\SoftwareProjectDay\\src	45	2
102	2014-12-07 15:40:04	2014-12-07 15:40:46	SimulationClock.java	Controls time for the simulation	/*\n<package>\n\tConference Room Simulation\n<.package>\n<description>\n    Controls time for the simulation \n<.description>\n<keywords>\n\tsimulation clock, stopwatch\n<.keywords>\n*/\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\n\n/**\n * SimulationClock keeps track of a simulated timeline that starts at a given date and progresses at a given rate relative to real time.\n */\npublic class SimulationClock {\n\n    private static boolean started = false;\n    private static Calendar simulatedStartDate;\n    private static Calendar actualStartDate;\n    private static double speedMultiplier;\n\n    /**\n     * Starts the simulation clock at a given simulated Date, running at a given speed.\n     * @param startCal The date at which the clock starts according to the simulation.\n     * @param speedMultiplier How many milliseconds pass in the simulation for each real millisecond.\n     */\n    public synchronized static void start(Calendar startCal, double speedMultiplier) {\n        if (started)\n            throw new IllegalStateException("The SimulationClock was already running. It can only be start()ed once.");\n        started = true;\n        simulatedStartDate = startCal;\n        actualStartDate = GregorianCalendar.getInstance();\n        SimulationClock.speedMultiplier = speedMultiplier;\n    }\n\n    /**\n     * Pauses the current thread for the given number of simulated minutes.\n     * @param simulatedMinutes how many simulated minutes to wait\n     */\n    public static void waitMinutes(int simulatedMinutes) {\n        if (!started)\n            throw new IllegalStateException("The SimulationClock hasn't been started. Call start() first.");\n        long simulatedMilliseconds = simulatedMinutes * 60 * 1000;\n        long actualMilliseconds = actualDelay(simulatedMilliseconds);\n        if (actualMilliseconds > 0) {\n            try {\n                synchronized (Thread.currentThread()) {\n                    Thread.currentThread().wait(actualMilliseconds);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * Pauses the current thread until the simulated time specified.\n     * @param clockHour the hour of the simulated time until which to wait\n     * @param clockMinute the minute of the simulated time until which to wait\n     * @return the simulated duration of the wait in minutes\n     */\n    public static int waitUntil(int clockHour, int clockMinute) {\n        if (!started)\n            throw new IllegalStateException("The SimulationClock hasn't been started. Call start() first.");\n        Calendar until = getNext(clockHour, clockMinute);\n        long simulatedDelay = until.getTimeInMillis() - currentSimulationDate().getTimeInMillis();\n        long actualDelay = actualDelay(simulatedDelay);\n        if (actualDelay > 0) {\n            try {\n                synchronized (Thread.currentThread()) {\n                    Thread.currentThread().wait(actualDelay);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        return (int) (simulatedDelay / (60 * 1000));\n    }\n\n    /**\n     * Check how many simulated minutes (rounded down) remain until the given time.\n     * @param clockHour the hour of the simulated time to check\n     * @param clockMinute the minute of the simulated time to check\n     */\n    public int getMinutesUntil(int clockHour, int clockMinute) {\n        if (!started)\n            throw new IllegalStateException("The SimulationClock hasn't been started. Call start() first.");\n        Calendar until = getNext(clockHour, clockMinute);\n        long milliseconds = until.getTimeInMillis() - currentSimulationDate().getTimeInMillis();\n        int minutes = (int) (milliseconds / (60 * 1000));\n        return minutes;\n    }\n\n    /**\n     * Check the current simulated time.\n     * @return the current simulated time in a string of the format "HH:mm"\n     */\n    public static String currentTimeString() {\n        return new SimpleDateFormat("HH:mm").format(currentSimulationDate().getTime());\n    }\n\n    /**\n     * Stopwatch acts like, well, a stopwatch. It counts minutes on the SimulationClock.\n     */\n    public static class Stopwatch {\n\n        private Calendar startDate;\n        private long committedDuration = 0, lapTime = 0;\n\n        /**\n         * Check whether the watch is running.\n         * @return true if the watch is running, false otherwise\n         */\n        public boolean isRunning() {\n            return startDate != null;\n        }\n\n        /**\n         * Starts or resumes the watch.\n         */\n        public void start() {\n            if (isRunning())\n                throw new IllegalStateException("The Stopwatch was already running. It can only be start()ed when it is not running.");\n            startDate = GregorianCalendar.getInstance();\n            lapTime = 0;\n        }\n\n        /**\n         * Pauses the watch.\n         */\n        public void pause() {\n            if (!isRunning())\n                throw new IllegalStateException("The Stopwatch is not running. It can only be stop()ped when it is running.");\n\n            // Commit the lap time.\n            lapTime = currentSimulationDate().getTimeInMillis() - startDate.getTimeInMillis();\n            committedDuration += lapTime;\n            // Clear the running state.\n            startDate = null;\n        }\n\n        /**\n         * Sets the time elapsed to zero and pauses the watch.\n         */\n        public void reset() {\n            if (isRunning())\n                pause();\n            lapTime = 0;\n            committedDuration = 0;\n        }\n\n        /**\n         * @return how many simulated minutes have been counted since the last reset\n         */\n        public int totalTimeElapsed(){\n            long milliseconds = committedDuration;\n            if (isRunning())\n                milliseconds += currentSimulationDate().getTimeInMillis() - startDate.getTimeInMillis();\n            else\n                milliseconds += lapTime;\n            int minutes = (int) (milliseconds / (60 * 1000));\n            return minutes;\n        }\n\n        /**\n         * @return how many simulated minutes have been counted since the last start\n         */\n        public int lapTimeElapsed(){\n            long milliseconds;\n            if (isRunning())\n                milliseconds = currentSimulationDate().getTimeInMillis() - startDate.getTimeInMillis();\n            else\n                milliseconds = lapTime;\n            int minutes = (int) (milliseconds / (60 * 1000));\n            return minutes;\n        }\n\n    }\n\n    /**\n     * Takes a duration in actual milliseconds and returns the same duration in simulated milliseconds.\n     * @param actualMilliseconds a duration in actual milliseconds\n     * @return the same duration in simulated milliseconds\n     */\n    private static long simulatedDelay(long actualMilliseconds) {\n        if (!started)\n            throw new IllegalStateException("The SimulationClock hasn't been started. Call start() first.");\n        return (long) (actualMilliseconds * speedMultiplier);\n    }\n\n    /**\n     * Takes a duration in actual milliseconds and returns the same duration in simulated milliseconds.\n     * @param simulatedMilliseconds a duration in actual milliseconds\n     * @return the same duration in simulated milliseconds\n     */\n    private static long actualDelay(long simulatedMilliseconds) {\n        if (!started)\n            throw new IllegalStateException("The SimulationClock hasn't been started. Call start() first.");\n        return (long) (simulatedMilliseconds / speedMultiplier);\n    }\n\n    /**\n     * Gets the simulated date that has a given clock time on the same day as the start time.\n     * @param hour the hour, from 0 to 23\n     * @param minute the minute, from 0 to 60\n     * @return the Calendar corresponding to the next simulated date when it will be the given time\n     */\n    private static Calendar getNext(int hour, int minute) {\n        Calendar desiredDate = GregorianCalendar.getInstance();\n        desiredDate.setTimeInMillis(simulatedStartDate.getTimeInMillis());\n        desiredDate.set(Calendar.HOUR_OF_DAY, hour);\n        desiredDate.set(Calendar.MINUTE, minute);\n        desiredDate.set(Calendar.SECOND, 0);\n        desiredDate.set(Calendar.MILLISECOND, 0);\n        return desiredDate;\n    }\n\n    /**\n     * @return the current date, according to the simulation\n     */\n    public static Calendar currentSimulationDate() {\n        if (!started)\n            throw new IllegalStateException("The SimulationClock hasn't been started. Call start() first.");\n        Calendar actualNow = GregorianCalendar.getInstance();\n        long actualDifference = actualNow.getTimeInMillis() - actualStartDate.getTimeInMillis();\n        long simulatedDifference = simulatedDelay(actualDifference);\n        long simulatedStartTime = simulatedStartDate.getTimeInMillis();\n        Calendar simulatedNow = GregorianCalendar.getInstance();\n        simulatedNow.setTimeInMillis(simulatedStartTime + simulatedDifference);\n        return simulatedNow;\n    }\n\n}\n	B:\\Portfolio\\SoftwareProjectDay\\src	45	2
103	2014-12-07 15:40:28	2014-12-07 15:40:46	TeamLead.java	Simulates the team leader in the simulation	/*\n<package>\n\tConference Room Simulation\n<.package>\n<description>\n \tSimulates the team leader in the simulation\n<.description>\n<keywords>\n    explicit lock, concurrency\n<.keywords>\n*/\n\nimport java.util.*;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class TeamLead extends Employee {\n\n    private PM boss;\n    private List<Developer> developers = Collections.synchronizedList(new ArrayList<Developer>());\n\n    public TeamLead(String name, PM boss) {\n        super("team lead", name);\n        this.boss = boss;\n    }\n\n    /**\n     * Asks a question of this team lead. The team lead might answer it or might pass the buck to the boss.\n     */\n    public void askQuestion() {\n        busyLock.lock();\n        log("receives a question");\n\n        // Flip a coin.\n        boolean answerable = (Math.random() < 0.5);\n        if (!answerable) {\n            // Let's ask the PM.\n            log("takes a question to the head honcho");\n            boss.askQuestion();\n            log("gets an answer from the head honcho");\n        }\n\n        // Take your answer and go.\n        log("answers a question");\n        busyLock.unlock();\n    }\n\n    public void addEmployee(Developer dev) {\n    \tthis.developers.add(dev);\n    }\n    \n    @Override\n    protected void doMorningWork() {\n    \tthis.boss.goToMorningMeeting(this);\n    \tthis.conductTeamMeeting();\n    }\n    \n    public void conductTeamMeeting() {\n    \tConferenceRoom confRoom = this.boss.getConferenceRoom(); \n    \tconfRoom.getLock().lock();\n    \t\n    \tlog(" gains access to the conference room.");\n    \t\n    \tfor(Developer dev : developers) {\n    \t\tdev.attendTeamMeeting();\n    \t}\n\t\t\n    \tlog(" starts standup meeting.");\n    \tSimulationClock.waitMinutes(15);\n    \t\n    \tlog(" completes standup meeting.");\n    \tconfRoom.getLock().unlock();\n    \t\n    \tfor(Developer dev : developers) {\n    \t\tdev.returnToWork();\n    \t}\n\t}\n\n    @Override\n    protected void doAfternoonWork() {\n\n    }\n    \n    public List<Developer> getDevelopers() {\n    \treturn this.developers;\n    }\n}\n	B:\\Portfolio\\SoftwareProjectDay\\src	45	2
104	2014-11-29 13:31:06	2011-09-26 00:24:04	SpeedReader.java	Tests reading speed	/*\n<package>\n\tSpeed Reader\n<.package>\n<description>\n    Tests reading speed\n<.description>\n<keywords>\n    swing, frame\n<.keywords>\n*/\n\nimport java.awt.*;\nimport javax.swing.JFrame;\nimport javax.swing.JButton;\nimport javax.swing.JTextArea;\nimport javax.swing.JScrollPane;\nimport javax.swing.JPanel;\nimport javax.swing.BorderFactory;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport java.awt.event.*;\nimport java.io.*;\nimport java.util.*;\n\n\npublic class SpeedReader extends JFrame{\n\t\tprivate JTextArea io_win = new JTextArea();\n\t\tprivate JTextField wpm = new JTextField("200");\n\t\tprivate JScrollPane io_scroller = new JScrollPane(io_win);\n\t\tprivate JButton begin = new JButton("Begin");\n\t\tprivate JButton clear = new JButton("Clear");\n\t\tprivate String text;\n\t\tprivate String splitter[];\n\t\tprivate long delay, temp;\n\t\tprivate int inc;\n\t\tprivate Timer timer;\n\t\t\n// **** MAIN METHOD ********************************\npublic static void main (String[] args) {\n\t SpeedReader frame = new SpeedReader();\n    frame.setTitle("Speed-Reader by Stephen Brewster");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(700,400);\n    frame.setVisible(true);\n}\t\t\n\n\t// **** FRAME CREATION METHOD *******************\n\tpublic SpeedReader()\n\t{\n\t\t//OUTPUT WINDOW PANE\n\t\tJPanel io_win_panel = new JPanel();\n\t\tio_win_panel.setLayout(new GridLayout(1,1));\n\t\tio_win_panel.setBorder(BorderFactory.createTitledBorder("Display"));\n\t\t\tio_win.setLineWrap(true);\n\t\t\tio_win.setWrapStyleWord(true);\n\t\tio_win_panel.add(io_scroller);\n\t\t\n\t\t//CONTROL WINDOW PANE\n\t\tJPanel wpm_pane = new JPanel();\n\t\twpm_pane.setLayout(new GridLayout(1,2));\n\t\twpm_pane.setBorder(BorderFactory.createEmptyBorder(30,20,30,20));\n\t\twpm_pane.add(new JLabel("WPM"));\n\t\t\twpm_pane.add(wpm);\n\t\t\n\t\tJPanel begin_pane = new JPanel();\n\t\tbegin_pane.setLayout(new GridLayout(1,1));\n\t\tbegin_pane.setBorder(BorderFactory.createEmptyBorder(20,20,10,20));\n\t\t\tbegin_pane.add(begin);\n\n\t\t\n\t\tJPanel clear_pane = new JPanel();\n\t\tclear_pane.setLayout(new GridLayout(1,1));\n\t\tclear_pane.setBorder(BorderFactory.createEmptyBorder(10,20,20,20));\n\t\t\tclear_pane.add(clear);\n\t\t\t\n\t\tJPanel control_pane = new JPanel();\n\t\tcontrol_pane.setLayout(new GridLayout(4,1));\n\n\t\t\t//control_pane.add(begin);\n\t\t\tcontrol_pane.add(begin_pane);\n\t\t\tcontrol_pane.add(clear_pane);\n\t\t\tcontrol_pane.add(wpm_pane);\n\t\t\n\t\t//Create listeners\n\t\tButtonListener btListener = new ButtonListener();\n\t\t\tbegin.addActionListener(btListener);\n\t\t\tclear.addActionListener(btListener);\n\t\t\n\t\t\n\t\tadd(control_pane, BorderLayout.WEST);\t\t\n\t\tadd(io_win_panel, BorderLayout.CENTER);\n\t}\n\t\n\t//\t**** ACTION EVENT CLASS****************************************\n\tclass ButtonListener implements ActionListener\n\t{\n  \t\tpublic void actionPerformed(ActionEvent e)\n \t \t{\n    \t\tif (e.getActionCommand().equals("Begin"))\n    \t\t{\n\t\t\t\tbegin.setText("Stop");\n     \t\t   text = io_win.getText();\n\t\t\t\tio_win.setText("");\n\t\t\t\tsplitter = text.split(" ");\n\t\t\t\t\n\t\t\t\tinc = 0;\n\t\t\t\ttext = wpm.getText();\n\t\t\t\ttemp = Long.valueOf(text);\n\t\t\t\tdelay = 60000/temp;\n\t\t\t\t\n\t\t\t\tnew Printer(delay);\t\n    \t\t}\n\t\t\t\n\t\t\tif (e.getActionCommand().equals("Stop"))\n\t\t\t{\n\t\t\t\ttimer.cancel();\n\t\t\t\tbegin.setText("Begin");\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (e.getActionCommand().equals("Clear"))\n\t\t\t{\n\t\t\t\tio_win.setText("");\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Printer {\n\n   \tpublic Printer(long mili) {\n      \ttimer = new Timer();\n         timer.schedule(new PrintTask(), 0, mili);\n\t\t}\n\n    class PrintTask extends TimerTask {\n    \t\tpublic void run() {\n\t\t\t\t\tio_win.append(splitter[inc] + " ");\n\t\t\t\t\tinc++;\n\t\t\t\tif (inc == splitter.length)\n\t\t\t\t{\t\t\t\t\t\n\t\t\t\t\ttimer.cancel();\n\t\t\t\t\tbegin.setText("Begin");\n\t\t\t\t}\n        }\n    }\n\n\t}//End Printer class\n}//End SpeedReader class	B:\\Portfolio\\SpeedReader	46	2
105	2014-11-29 16:31:52	2014-11-29 13:49:06	chart1.c	Shows F to C conversion for temps between 0 and 300 F	/*\n<package>\n\tTemperature Conversion\n<.package>\n<description>\n    Shows F to C conversion for temps between 0 and 300 F\n<.description>\n<keywords>\n\ttemperature\n<.keywords>\n*/\n\n#include <stdio.h>\n#include "math.h"\nint main () {\n    int f;\n    int c;\n\n    printf("Fahrenheit-Celcius\\n");\n    for(f = 0; f <= 300; f += 20) {\n        c = (5.0/9.0)*(f-32);\n        printf("\\t%3d\\t\\%d\\n", f, c);\n    }\n}\n	B:\\Portfolio\\TempConvert	47	4
106	2014-11-29 16:32:21	2014-11-29 13:49:06	chart2.c	Shows F to C conversion for temps between 0 and 300 F	/*\n<package>\n\tTemperature Conversion\n<.package>\n<description>\n    Shows F to C conversion for temps between 0 and 300 F\n<.description>\n<keywords>\n\ttemperature\n<.keywords>\n*/\n\n#include <stdio.h>\n#include "math.h"\nint main () {\n    int f;\n    float c;\n\n    printf("Fahrenheit-Celcius\\n");\n    for(f = 0; f <= 300; f += 20) {\n        c = (5.0/9.0)*(f-32);\n        printf("\\t%3d\\t\\%6.1f\\n", f, c);\n    }\n}\n	B:\\Portfolio\\TempConvert	47	4
107	2014-11-29 16:39:13	2014-11-29 16:38:42	VocabExpander.java	Pops up an alert from a list of externally supplied strings, originally made as a type of vocabulary flash card	/*\n<package>\n\tVocab Expander\n<.package>\n<description>\n    Pops up an alert from a list of externally supplied strings, originally made as a type of vocabulary flash card\n<.description>\n<keywords>\n\tswing, gui, blob class\n<.keywords>\n*/\n\nimport java.awt.*;\nimport javax.swing.JFrame;\nimport javax.swing.JButton;\nimport javax.swing.JTextArea;\nimport javax.swing.JScrollPane;\nimport javax.swing.JPanel;\nimport javax.swing.BorderFactory;\nimport javax.swing.JLabel;\nimport javax.swing.JTextField;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport javax.swing.JCheckBox;\nimport java.awt.event.*;\nimport javax.swing.JFileChooser;\nimport java.io.*;\nimport java.util.*;\n\nclass VocabExpander extends JFrame{\n\tprivate JTextArea display_win = new JTextArea();\n\tprivate JButton start = new JButton("Start");\n\tprivate JTextField interval = new JTextField("5");\n\tprivate JMenu file = new JMenu("File");\n\tprivate JScrollPane scroller = new JScrollPane(display_win);\n\tprivate JPanel controls = new JPanel();\t\n\tprivate JPanel start_panel = new JPanel();\n\tprivate JPanel complete = new JPanel();\n\tprivate JCheckBox ckbx[] = new JCheckBox[20];\n\tprivate JLabel cklbl[] = new JLabel[20];\n\tprivate String text;\n\tprivate String splitter[];\n\tprivate long delay, temp;\n\tprivate int inc, instructions = 20;\n\tprivate Timer timer;\n\npublic static void main(String[] args)\n{\n\t VocabExpander frame = new VocabExpander();\n    frame.setTitle("Vocabulary Expander");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(700,400);\n    frame.setVisible(true);\n\t\n}\n\tpublic VocabExpander()\n\t{\n\t\t //Create Menu Bar\n\t\t JMenuBar menuBar = new JMenuBar();\n\t\t setJMenuBar(menuBar);\n\t\t \t menuBar.add(file);\n\t\t\n\t\t JMenuItem fileImport;\n\t\t \tfile.add(fileImport = new JMenuItem("Import File"));\n\t\t \n\t\t //Create Panels **************************\n\t\t \tcontrols.setLayout(new GridLayout(2,1));\n\t\t\tcontrols.setBorder(BorderFactory.createTitledBorder("Controls"));\n\t\t\t\n\t\t //Panel for START BUTTON\n\t\t \tstart_panel.setLayout(new GridLayout(1,1));\n\t\t\tstart_panel.setBorder(BorderFactory.createEmptyBorder(15,10,5,10));\n\t\t\tstart_panel.add(start);\n\n\t\t //Panel for INTERVAL\n\t\t JPanel interval_panel = new JPanel();\n\t\t \tinterval_panel.setLayout(new GridLayout(1,2));\n\t\t\tinterval_panel.setBorder(BorderFactory.createEmptyBorder(15,10,10,10));\n\t\t\tinterval_panel.add(new JLabel("Interval (s)  "));\n\t\t\tinterval_panel.add(interval);\n\n\t\t//Add sub panels to control panel\t\n\t\t\tcontrols.add(interval_panel);\n\t\t\tcontrols.add(start_panel);\t\t\t\n\n\t\t\n\t\t//Panel for WINDOW\t\n\t\t JPanel window = new JPanel();\n\t\t \twindow.setLayout(new GridLayout(1,1));\n\t\t\twindow.setBorder(BorderFactory.createTitledBorder("Display"));\n\t\t\tdisplay_win.setMargin(new Insets(10,10,10,10));\n\t\t\twindow.add(scroller);\n\t\t\n\t\t//Edit Complete panel\n\t\tJPanel com_win = new JPanel();\n\t\t\tcom_win.setBorder(BorderFactory.createTitledBorder("Complete"));\n\t\t\tcom_win.setLayout(new GridLayout(1,1));\n\t\t\tcomplete.setBorder(BorderFactory.createEmptyBorder(10,0,10,0));\n\t\t\tcomplete.setLayout(new GridLayout(20,2));\n\t\t\tfor(int i = 0; i < 20; i++)\n\t\t\t{\n\t\t\t\tckbx[i] = new JCheckBox();\n\t\t\t\tcklbl[i] = new JLabel("Complete");\n\t\t\t\tcomplete.add(ckbx[i]);\n\t\t\t\tcomplete.add(cklbl[i]);\n\t\t\t\tckbx[i].setVisible(false);\n\t\t\t\tcklbl[i].setVisible(false);\n\t\t\t}\n\n\t\t\tcom_win.add(complete);\n\t\t\t\n\t\t//Add panels to layout\n\t\tadd(controls, BorderLayout.WEST);\n\t\tadd(window, BorderLayout.CENTER);\n\t\tadd(com_win, BorderLayout.EAST);\n\t\t\n\t\t//Create LISTENERS\n\t\tButtonListener btListen = new ButtonListener();\n\t\t\tstart.addActionListener(btListen);\n\t\t\tfileImport.addActionListener(btListen);\n\t\t\t\n\t}// E - VocabExpander()\n\t\n\t//Recieves a file and outputs its contents to the input window\n\tprivate void outPutFile (File f)\n\t{\n\t\tString line;\n\t\tdisplay_win.setText("");\n\t\ttry\n\t\t{\n\t\t\tFileReader theFile = new FileReader(f);\n\t\t\tBufferedReader readIn = new BufferedReader(theFile);\n\t\t\twhile ((line = readIn.readLine()) != null)\n\t\t\t{\n\t\t\t\tdisplay_win.append(line + "\\n");\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tSystem.out.println( e );\n\t\t}\n\t}// E - outPutFile()\n\t\n\t//ActionListner class\n\tclass ButtonListener implements ActionListener \n\t{\n\t\tpublic void actionPerformed(ActionEvent e)\n\t\t{\n\t\t\tif (e.getActionCommand().equals("Import File"))\n\t\t\t{\n\t\t\t\tFile file = new File("ExampleText.txt");\n\t\t\t\tJFileChooser chooser = new JFileChooser();\n\t\t\t\t\t int retval = chooser.showOpenDialog(null);\n\t\t\t\t\t if (retval == JFileChooser.APPROVE_OPTION)\n\t\t\t\t\t {\t\n\t\t\t\t\t \tfile = chooser.getSelectedFile();\n\t\t\t\t\t\toutPutFile(file);\n\t\t\t\t\t }\n\t\t\t}\n\t\t\t\n\t\t\tif (e.getActionCommand().equals("Start"))\n\t\t\t{\n\t\t\t\tinc = 0; //Set Array increment to 0\n\t\t\t\ttext = display_win.getText(); //Set text in display_win to string\n\t\t\t\tsplitter = text.split("\\\\n"); //Split text by line break into array\n\t\t\t\tstart.setText("Stop"); //Change text on start button to "stop"\n\t\t\t\t\n\t\t\t\ttext = interval.getText(); //Obtain value from "interval" textfield\n\t\t\t\ttemp = Long.valueOf(text); //Convert interval from string to long\n\t\t\t\tdelay = temp * 1000; //Convert seconds to mili-seconds\n\t\t\t\t\n\t\t\t\tdisplay_win.setText("");\n\t\t\t\tdisplay_win.setEditable(false);\n\t\t\t\tinterval.setEditable(false);\n\t\t\n\t\t\t\tnew WordAlert(delay); //Begin displaying instructions on set interval\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (e.getActionCommand().equals("Stop"))\n\t\t\t{\n\t\t\t\ttimer.cancel();\n\t\t\t\tstart.setText("Start");\n\t\t\t\tdisplay_win.setEditable(true);\n\t\t\t\tinterval.setEditable(true);\t\n\t\t\t}\n\t\t\n\t\t}// E - actionPerformed()\n\t}// E - ButtonListener{}\n\t\n\tclass WordAlert {\n\n   \tpublic WordAlert(long mili) {\n      \ttimer = new Timer();\n         timer.schedule(new PrintTask(), mili, mili);\n\t\t}\n\n    class PrintTask extends TimerTask {\n    \t\tpublic void run() {\n\t\t\t\t   JOptionPane.showMessageDialog(null, splitter[inc]); //Give instruction as alert\n\t\t\t\t   display_win.append(splitter[inc] + "\\n"); //Display the instruction in the window\n\t\t\t\t   ckbx[inc].setVisible(true); //Display checkbox for the instruction\n\t\t\t\t\tinc++;\n\t\t\t\tif (inc == splitter.length)\n\t\t\t\t{\t\t\t\t\t\n\t\t\t\t\ttimer.cancel();\n\t\t\t\t\tstart.setText("Start");\n\t\t\t\t\tdisplay_win.setEditable(true);\n\t\t\t\t\tinterval.setEditable(true);\n\t\t\t\t}\n        }\n    }\n\n\t}//End Printer class\n\n\n}// E - VocabExpander{}	B:\\Portfolio\\VocabExpander	48	2
108	2014-12-06 23:10:20	2014-12-06 23:02:03	Bridge.java	Bridge component of the simulation	/*\n<package>\n\tWoolies\n<.package>\n<description>\n    Bridge component of the simulation\n<.description>\n<keywords>\n    concurrency, threads\n<.keywords>\n*/\n\npublic class Bridge {\n    private int CROSSING = 0;\n    private int CAP = 3;\n\n    public synchronized void enterBridge() throws InterruptedException {\n\twhile (CROSSING == CAP) {\n\t    wait();\n\t} \n\n        CROSSING++;\t\n    }\n\n    public synchronized void leaveBridge() {\n\tCROSSING--;\n        notify();\n    }\n}\n	B:\\Portfolio\\Woolies	49	2
109	2014-12-06 23:09:35	2014-12-06 23:02:03	Woolie.java	Woolie object, concurrently attempt to cross a bridge	/*\n<package>\n\tWoolies\n<.package>\n<description>\n    Woolie object, concurrently attempt to cross a bridge\n<.description>\n<keywords>\n    swing, frame, histogram\n<.keywords>\n*/\n\n/**\n * Author: Stephen Brewster\n * Date: 9/21/2014\n * Description: The Woolie class is part of the Woolie Lab\n * solution for SWEN342. It is an introduction to concurrency\n * and threading in Java\n */\n\nclass Woolie extends Thread {\n\n    private String name;\n    private int cross_time;\n    private String destination;\n    private Bridge bridge;\n\n    public Woolie(String name, int cross_time, String destination, Bridge bridge) {\n        this.name = name;\n\tthis.cross_time = cross_time;\n\tthis.destination = destination;\n\tthis.bridge = bridge;\n    }\n\n    /**\n     * Execute the bridge crossing action for the Woolie\n     */\n    public void run() {\n        System.out.println(this.name + " has arrived at the bridge.");\n\n\ttry {\n\t    bridge.enterBridge();\n\t} catch (InterruptedException err) {}\n\n\tSystem.out.println(this.name + " is starting to cross.\\n");\n\tfor (int i = cross_time; i > 0; i--) {\n\t    this.waitASec();\n\t    System.out.println("\\t" + this.name + " " + (cross_time - i + 1) + " seconds");\n\t}\n\n\tSystem.out.println(this.name + " arrives at " + this.destination);\n\tbridge.leaveBridge();\n    }\n\n    private void waitASec() {\n        try {\n\t    Thread.sleep(1000);\n\t} catch (Exception err) {}\n    }\n}\n	B:\\Portfolio\\Woolies	49	2
110	2014-12-06 23:10:16	2014-12-06 23:02:03	WoolieDriver.java	Driver program to run the Woolies concurrency simulation	/*\n<package>\n\tGraphical Histogram\n<.package>\n<description>\n    Driver program to run the Woolies concurrency simulation\n<.description>\n<keywords>\n\tdriver\n<.keywords>\n*/\n\nimport java.util.ArrayList;\nimport java.util.Random;\n\n/**\n * Author: Stephen Brewster\n * Date: 9/21/2014\n * Description: WoolieDriver uses the Woolie class to create\n * a simple threading and concurrency practice program\n */\n\npublic class WoolieDriver {\n    \n    private static ArrayList<Woolie> woolies = new ArrayList<Woolie>();\n\n    public static void main(String args[]) {\n\tdefineWoolies();\n\tRandom rand = new Random();\n\tfor(Woolie w : woolies) {\n\t    Thread t = new Thread(w);\n\t    t.start();\n\t}\n    }\n\n    /**\n     * Generate a list of woolies, their bridge crossing time in seconds,\n     * and their destination city (Merctan, or Scistine)\n     */\n    private static void defineWoolies() {\n\tBridge bridge = new Bridge();\n        Woolie w1 = new Woolie("Bixter", 10, "Merctan", bridge);\n\tWoolie w2 = new Woolie("Simpat", 15, "Sicstine", bridge);\n\tWoolie w3 = new Woolie("Numpy", 7, "Sicstine", bridge);\n\tWoolie w4 = new Woolie("IamNumber4", 9, "Merctan", bridge);\n\tWoolie w5 = new Woolie("Brugh", 11, "Sicstine", bridge);\n\tWoolie w6 = new Woolie("GrassyFace", 4, "Sicstine", bridge);\n\twoolies.add(w1);\n\twoolies.add(w2);\n\twoolies.add(w3);\n\twoolies.add(w4);\n\twoolies.add(w5);\n\twoolies.add(w6);\n    }\n\n}\n	B:\\Portfolio\\Woolies	23	2
111	2014-11-13 00:57:40	2014-10-03 19:38:05	Word Ladder.py	Generates a word ladder between two words if it exists	# <package>\n#     Word Ladder\n# <.package>\n# <description>\n#     Generates a word ladder between two words if it exists\n# <.description>\n# <keywords>\n#     BFS, breadth-first search, AI\n# <.keywords>\n\n# Date: 9/9/2014\n# Author: Stephen Brewster\n# Synopsis: Performs a breadth-first search to find the shortest path\n#     between two english words. \n# Rules:\n#   .Change one letter at a time\n#   .Each changed letter must produce a valid english word\n#\n\n# Open dictionary of american english words for validation\ndict = open("/usr/share/dict/american-english", "r").readlines()\nalpha = "a b c d e f g h i j k l m n o p q r s t u v w x y z".split();\ndict_map = {}\nexpanded = {}\n\nfor lines in dict:\n    dict_map[lines.lower().strip("\\n")] = True\n\n# Verify word is in the dicitionary\ndef is_word(test_word):\n    if dict_map.has_key(test_word):\n        return True\n    return False\n\ndef successors( state, target ):\n    bag = []\n    global expanded\n    # Find non-matching characters for mutation\n    for i in range ( len(state)+1 ):\n        # If the letter already coincides with target -> skip\n        if state[i-1:i] == target[i-1:i]:\n            continue\n        # Otherwise store all valid words generated from changing letter\n        else:\n            for lett in alpha:\n                test = state[:i-1] + lett + state[i:]\n                if test == state:\n                    continue\n                if is_word(test) and not expanded.has_key(test):\n                    bag.append(test)\n                    expanded[test] = True\n                    continue\n    \n    return bag\n\ndef bfs(start, target):\n    # sanity check\n    if not ( is_word(start) and is_word(target) ):\n        return "Invalid input"\n    \n    global expanded\n    expanded = {}\n    queue = [start]\n    expanded[start] = True\n    path_map = {}\n\n    # Perform BFS\n    while queue[0] != target:\n        state = queue.pop(0)\n        s = successors( state, target )\n        path_map[state] = s\n        for si in s:\n            if si not in queue:\n                queue.append(si)\n\n    # Extract path\n    path = [target]\n    while path[0] != start:\n        for key in path_map:\n            if path[0] in path_map[key]:\n                path.insert(0, key)\n        \n    return path\n\nprint bfs("cold", "warm")\nprint bfs("small", "short")\nprint bfs("gun", "rat")\nprint bfs("thorn", "gowns")\n	B:\\Portfolio\\Word Ladder	50	1
112	2014-11-29 14:12:36	2014-11-29 13:49:06	ritwc.py	Mimics the wc operation in Linux	# <package>\n#     Word Count in Python\n# <.package>\n# <description>\n#     Mimics the wc operation in Linux\n# <.description>\n# <keywords>\n#     stdin\n# <.keywords>\n\n#Mimmicks the CLI unix command 'wc' for a text file, using python\nimport sys #import sys module for reading stdin\n\ntext = sys.stdin.readlines()\nwordCount = 0;\ncharCount = 0;\n\n#iterate through the lines provided to the script via stdin\nfor line in text:\n\twordCount += len(line.split())\n\tcharCount += len(line)\n\t\nprint(len(text), wordCount, charCount)\n	B:\\Portfolio\\WordCount	51	1
\.


--
-- TOC entry 2043 (class 0 OID 0)
-- Dependencies: 170
-- Name: script_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('script_id_seq', 112, true);


--
-- TOC entry 2011 (class 0 OID 57748)
-- Dependencies: 178
-- Data for Name: unsorted; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY unsorted (id, file) FROM stdin;
1	B:\\Portfolio\\BMP_Art\\BMP_Art\\EasyBMP.cpp
2	B:\\Portfolio\\CIS225 - Project 1\\Project 1 ArrayList\\Bank.java
3	B:\\Portfolio\\CIS225 - Project 1\\Project 1 ArrayList\\BankArrayList.java
4	B:\\Portfolio\\CIS225 - Project 1\\Project 1 ArrayList\\bankTest.java
5	B:\\Portfolio\\CIS225 - Project 1\\Project 1 ArrayList\\bankTestUI.java
6	B:\\Portfolio\\CIS225 - Project 1\\Project 1 ArrayList\\checkingAcc.java
7	B:\\Portfolio\\CIS225 - Project 1\\Project 1 ArrayList\\Customer.java
8	B:\\Portfolio\\CIS225 - Project 1\\Project 1 ArrayList\\savingAcc.java
9	B:\\Portfolio\\CIS225 - Project 1\\Project 1 ArrayList\\Test.java
10	B:\\Portfolio\\CIS225 - Project 3\\TestDB.java
11	B:\\Portfolio\\CIS225 - Project 3\\TestDB1.java
12	B:\\Portfolio\\CIS225 - Project 3\\TestDB2_b.java
13	B:\\Portfolio\\CIS225 - Project 3\\TestDB3.java
14	B:\\Portfolio\\CIS225 - Project 3\\TestDB4.java
15	B:\\Portfolio\\CIS225 - Project 3\\TestDB5.java
16	B:\\Portfolio\\CSC103 - Project 1\\Lab1.java
17	B:\\Portfolio\\Encryptor\\Encryptor.java
18	B:\\Portfolio\\Java 101\\ArrayHandler.java
19	B:\\Portfolio\\Java 101\\ArrayPack.java
20	B:\\Portfolio\\Java 101\\BDNumber.java
21	B:\\Portfolio\\Java 101\\BDNumberMain.java
22	B:\\Portfolio\\Java 101\\FrameWindow.java
23	B:\\Portfolio\\Java 101\\LoopList.java
24	B:\\Portfolio\\Java 101\\LoopTutorial.java
25	B:\\Portfolio\\Java 101\\skeleton.java
26	B:\\Portfolio\\Java 101\\VignereCipher.java
27	B:\\Portfolio\\Java 101\\VignereEncoder.java
28	B:\\Portfolio\\Java 101\\Programs\\ATemperatureReading.java
29	B:\\Portfolio\\Java 101\\Programs\\Ch2Sample1.java
30	B:\\Portfolio\\Java 101\\Programs\\MultiplicationTable.java
31	B:\\Portfolio\\Java 101\\Programs\\QuestionSet.java
32	B:\\Portfolio\\Java 101\\Programs\\Quizmotron.java
33	B:\\Portfolio\\Java 101\\Programs\\RootCalculator.java
34	B:\\Portfolio\\Java 101\\Programs\\TemperatureDemo.java
35	B:\\Portfolio\\Java 101\\Programs\\TopLevelWindow.java
36	B:\\Portfolio\\Java 101\\Programs\\Functions\\AngleVectors.java
37	B:\\Portfolio\\Java 101\\Programs\\Functions\\EquationsDriver.java
38	B:\\Portfolio\\Java 101\\Programs\\Functions\\FunctionList.java
39	B:\\Portfolio\\LessonsLearned\\db\\__init__.py
40	B:\\Portfolio\\LessonsLearned\\util\\__init__.py
41	B:\\Portfolio\\Practicum-3\\book_list.c
42	B:\\Portfolio\\Real-time\\Lab3.c
43	B:\\Portfolio\\Ruby_Practice\\Animals.rb
44	B:\\Portfolio\\Ruby_Practice\\Basics.rb
45	B:\\Portfolio\\Ruby_Practice\\UnitTest\\simple_number.rb
46	B:\\Portfolio\\Ruby_Practice\\UnitTest\\simple_number_UT.rb
47	B:\\Portfolio\\Ruby_Practice\\WordCount\\WordCount.rb
\.


--
-- TOC entry 2044 (class 0 OID 0)
-- Dependencies: 177
-- Name: unsorted_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('unsorted_id_seq', 47, true);


--
-- TOC entry 1880 (class 2606 OID 57734)
-- Name: haskeyword_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY haskeyword
    ADD CONSTRAINT haskeyword_pkey PRIMARY KEY (scriptid, keywordid);


--
-- TOC entry 1888 (class 2606 OID 57772)
-- Name: hasreadme_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY hasreadme
    ADD CONSTRAINT hasreadme_pkey PRIMARY KEY (readmeid, packageid);


--
-- TOC entry 1876 (class 2606 OID 57729)
-- Name: keyword_keyword_key; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY keyword
    ADD CONSTRAINT keyword_keyword_key UNIQUE (keyword);


--
-- TOC entry 1878 (class 2606 OID 57727)
-- Name: keyword_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY keyword
    ADD CONSTRAINT keyword_pkey PRIMARY KEY (id);


--
-- TOC entry 1890 (class 2606 OID 57783)
-- Name: language_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY language
    ADD CONSTRAINT language_pkey PRIMARY KEY (id);


--
-- TOC entry 1882 (class 2606 OID 57745)
-- Name: package_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY package
    ADD CONSTRAINT package_pkey PRIMARY KEY (id);


--
-- TOC entry 1886 (class 2606 OID 57767)
-- Name: readme_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY readme
    ADD CONSTRAINT readme_pkey PRIMARY KEY (id);


--
-- TOC entry 1874 (class 2606 OID 57716)
-- Name: script_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY script
    ADD CONSTRAINT script_pkey PRIMARY KEY (id);


--
-- TOC entry 1884 (class 2606 OID 57756)
-- Name: unsorted_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY unsorted
    ADD CONSTRAINT unsorted_pkey PRIMARY KEY (id);


--
-- TOC entry 1893 (class 2606 OID 57794)
-- Name: fk_keyword; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY haskeyword
    ADD CONSTRAINT fk_keyword FOREIGN KEY (keywordid) REFERENCES keyword(id) ON DELETE CASCADE;


--
-- TOC entry 1891 (class 2606 OID 57784)
-- Name: fk_language; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY script
    ADD CONSTRAINT fk_language FOREIGN KEY (languageid) REFERENCES language(id);


--
-- TOC entry 1892 (class 2606 OID 57789)
-- Name: fk_package; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY script
    ADD CONSTRAINT fk_package FOREIGN KEY (packageid) REFERENCES package(id);


--
-- TOC entry 1895 (class 2606 OID 57804)
-- Name: fk_package; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY hasreadme
    ADD CONSTRAINT fk_package FOREIGN KEY (packageid) REFERENCES package(id) ON DELETE CASCADE;


--
-- TOC entry 1894 (class 2606 OID 57799)
-- Name: fk_script; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY haskeyword
    ADD CONSTRAINT fk_script FOREIGN KEY (scriptid) REFERENCES script(id) ON DELETE CASCADE;


--
-- TOC entry 2023 (class 0 OID 0)
-- Dependencies: 5
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- TOC entry 2025 (class 0 OID 0)
-- Dependencies: 174
-- Name: haskeyword; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE haskeyword FROM PUBLIC;
REVOKE ALL ON TABLE haskeyword FROM postgres;
GRANT ALL ON TABLE haskeyword TO postgres;
GRANT SELECT ON TABLE haskeyword TO visitor;


--
-- TOC entry 2026 (class 0 OID 0)
-- Dependencies: 181
-- Name: hasreadme; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE hasreadme FROM PUBLIC;
REVOKE ALL ON TABLE hasreadme FROM postgres;
GRANT ALL ON TABLE hasreadme TO postgres;
GRANT SELECT ON TABLE hasreadme TO visitor;


--
-- TOC entry 2027 (class 0 OID 0)
-- Dependencies: 173
-- Name: keyword; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE keyword FROM PUBLIC;
REVOKE ALL ON TABLE keyword FROM postgres;
GRANT ALL ON TABLE keyword TO postgres;
GRANT SELECT ON TABLE keyword TO visitor;


--
-- TOC entry 2029 (class 0 OID 0)
-- Dependencies: 183
-- Name: language; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE language FROM PUBLIC;
REVOKE ALL ON TABLE language FROM postgres;
GRANT ALL ON TABLE language TO postgres;
GRANT SELECT ON TABLE language TO visitor;


--
-- TOC entry 2031 (class 0 OID 0)
-- Dependencies: 176
-- Name: package; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE package FROM PUBLIC;
REVOKE ALL ON TABLE package FROM postgres;
GRANT ALL ON TABLE package TO postgres;
GRANT SELECT ON TABLE package TO visitor;


--
-- TOC entry 2033 (class 0 OID 0)
-- Dependencies: 180
-- Name: readme; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE readme FROM PUBLIC;
REVOKE ALL ON TABLE readme FROM postgres;
GRANT ALL ON TABLE readme TO postgres;
GRANT SELECT ON TABLE readme TO visitor;


--
-- TOC entry 2035 (class 0 OID 0)
-- Dependencies: 171
-- Name: script; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE script FROM PUBLIC;
REVOKE ALL ON TABLE script FROM postgres;
GRANT ALL ON TABLE script TO postgres;
GRANT SELECT ON TABLE script TO visitor;


--
-- TOC entry 2037 (class 0 OID 0)
-- Dependencies: 178
-- Name: unsorted; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE unsorted FROM PUBLIC;
REVOKE ALL ON TABLE unsorted FROM postgres;
GRANT ALL ON TABLE unsorted TO postgres;
GRANT SELECT ON TABLE unsorted TO visitor;


-- Completed on 2014-12-08 18:50:20

--
-- PostgreSQL database dump complete
--

